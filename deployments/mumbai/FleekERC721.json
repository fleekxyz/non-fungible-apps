{
  "address": "0xB8594DC01580884AD69FE5d78EDEA5e66BeB5fFA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "commit_hash",
          "type": "string"
        }
      ],
      "name": "NewBuild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "NewTokenDescription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ENS",
          "type": "string"
        }
      ],
      "name": "NewTokenENS",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "external_url",
          "type": "string"
        }
      ],
      "name": "NewTokenExternalURL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "NewTokenImage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NewTokenName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLECTION_CONTROLLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLECTION_OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addTokenController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isTokenController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "external_url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ENS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "commit_hash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "git_repository",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "author",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "removeTokenController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_commit_hash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_git_repository",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_author",
          "type": "string"
        }
      ],
      "name": "setTokenBuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenDescription",
          "type": "string"
        }
      ],
      "name": "setTokenDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenENS",
          "type": "string"
        }
      ],
      "name": "setTokenENS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenExternalURL",
          "type": "string"
        }
      ],
      "name": "setTokenExternalURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenImage",
          "type": "string"
        }
      ],
      "name": "setTokenImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        }
      ],
      "name": "setTokenName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13c35bf6842a0688f3a8f4d5cdb5f03a5f4f069559b3971ce8182e2a1980181f",
  "receipt": {
    "to": null,
    "from": "0x7ED735b7095C05d78dF169F991f2b7f1A1F1A049",
    "contractAddress": "0xB8594DC01580884AD69FE5d78EDEA5e66BeB5fFA",
    "transactionIndex": 23,
    "gasUsed": "4870336",
    "logsBloom": "0x
    "blockHash": "0xb0e51a6784e8eb45118c21fdaa1e6eab2374dbf9cfb71128fefe69f5f141b98e",
    "transactionHash": "0x13c35bf6842a0688f3a8f4d5cdb5f03a5f4f069559b3971ce8182e2a1980181f",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 29554521,
        "transactionHash": "0x13c35bf6842a0688f3a8f4d5cdb5f03a5f4f069559b3971ce8182e2a1980181f",
        "address": "0xB8594DC01580884AD69FE5d78EDEA5e66BeB5fFA",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xcac50f86c292f6863f130b9e1133a5f875e8e957fed41745b8fa2498550cbdfc",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0xb0e51a6784e8eb45118c21fdaa1e6eab2374dbf9cfb71128fefe69f5f141b98e"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 29554521,
        "transactionHash": "0x13c35bf6842a0688f3a8f4d5cdb5f03a5f4f069559b3971ce8182e2a1980181f",
        "address": "0xB8594DC01580884AD69FE5d78EDEA5e66BeB5fFA",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xcac50f86c292f6863f130b9e1133a5f875e8e957fed41745b8fa2498550cbdfc",
          "0x0000000000000000000000007ed735b7095c05d78df169f991f2b7f1a1f1a049",
          "0x0000000000000000000000007ed735b7095c05d78df169f991f2b7f1a1f1a049"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0xb0e51a6784e8eb45118c21fdaa1e6eab2374dbf9cfb71128fefe69f5f141b98e"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 29554521,
        "transactionHash": "0x13c35bf6842a0688f3a8f4d5cdb5f03a5f4f069559b3971ce8182e2a1980181f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ed735b7095c05d78df169f991f2b7f1a1f1a049",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000223e2cc26efa000000000000000000000000000000000000000000000000000330148de3577a6d000000000000000000000000000000000000000000000941912dbfe086c95487000000000000000000000000000000000000000000000000030dd66120e8806d000000000000000000000000000000000000000000000941914ffe0d49384e87",
        "logIndex": 84,
        "blockHash": "0xb0e51a6784e8eb45118c21fdaa1e6eab2374dbf9cfb71128fefe69f5f141b98e"
      }
    ],
    "blockNumber": 29554521,
    "cumulativeGasUsed": "9189740",
    "status": 1,
    "byzantium": true
  },
  "args": ["FleekSites", "FLKSITE"],
  "numDeployments": 1,
  "solcInputHash": "0ee8c4d44ebad02e2364970b68450c98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"commit_hash\",\"type\":\"string\"}],\"name\":\"NewBuild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"NewTokenDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ENS\",\"type\":\"string\"}],\"name\":\"NewTokenENS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"external_url\",\"type\":\"string\"}],\"name\":\"NewTokenExternalURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"NewTokenImage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewTokenName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLECTION_CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLECTION_OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addTokenController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTokenController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"external_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ENS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"commit_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"git_repository\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeTokenController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_commit_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_git_repository\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_author\",\"type\":\"string\"}],\"name\":\"setTokenBuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenDescription\",\"type\":\"string\"}],\"name\":\"setTokenDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenENS\",\"type\":\"string\"}],\"name\":\"setTokenENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenExternalURL\",\"type\":\"string\"}],\"name\":\"setTokenExternalURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenImage\",\"type\":\"string\"}],\"name\":\"setTokenImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FleekERC721.sol\":\"FleekERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/FleekAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\nabstract contract FleekAccessControl is AccessControl {\\r\\n    bytes32 public constant COLLECTION_OWNER_ROLE =\\r\\n        keccak256(\\\"COLLECTION_OWNER_ROLE\\\");\\r\\n    bytes32 public constant COLLECTION_CONTROLLER_ROLE =\\r\\n        keccak256(\\\"COLLECTION_CONTROLLER_ROLE\\\");\\r\\n\\r\\n    constructor() {\\r\\n        _setRoleAdmin(COLLECTION_OWNER_ROLE, DEFAULT_ADMIN_ROLE);\\r\\n        _grantRole(COLLECTION_OWNER_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier requireCollectionOwner() {\\r\\n        require(\\r\\n            hasRole(COLLECTION_OWNER_ROLE, msg.sender),\\r\\n            \\\"FleekAccessControl: must have collection owner role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier requireCollectionController() {\\r\\n        require(\\r\\n            hasRole(COLLECTION_OWNER_ROLE, msg.sender) ||\\r\\n                hasRole(COLLECTION_CONTROLLER_ROLE, msg.sender),\\r\\n            \\\"FleekAccessControl: must have collection controller role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier requireTokenController(uint256 tokenId) {\\r\\n        require(\\r\\n            hasRole(_tokenRole(tokenId, \\\"CONTROLLER\\\"), msg.sender),\\r\\n            \\\"FleekAccessControl: must have token role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isTokenController(\\r\\n        uint256 tokenId,\\r\\n        address account\\r\\n    ) public view returns (bool) {\\r\\n        return hasRole(_tokenRole(tokenId, \\\"CONTROLLER\\\"), account);\\r\\n    }\\r\\n\\r\\n    function _tokenRole(\\r\\n        uint256 tokenId,\\r\\n        string memory role\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"TOKEN_\\\", role, tokenId));\\r\\n    }\\r\\n\\r\\n    function _clearTokenControllers(uint256 tokenId) internal {\\r\\n        // TODO: Remove token controllers from AccessControl\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c8115940e2d11e8fb541873abefd9bbe1601bb6a3753580b2eea9feb2ce1014\",\"license\":\"MIT\"},\"contracts/FleekERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./FleekAccessControl.sol\\\";\\n\\ncontract FleekERC721 is ERC721, FleekAccessControl {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    event NewBuild(uint256 indexed token, string indexed commit_hash);\\n    event NewTokenName(uint256 indexed token, string indexed name);\\n    event NewTokenDescription(uint256 indexed token, string indexed description);\\n    event NewTokenImage(uint256 indexed token, string indexed image);\\n    event NewTokenExternalURL(uint256 indexed token, string indexed external_url);\\n    event NewTokenENS(uint256 indexed token, string indexed ENS);\\n\\n    struct Build {\\n        string commit_hash;\\n        string git_repository;\\n        string author;\\n    }\\n\\n    /**\\n     * The properties are stored as string to keep consistency with\\n     * other token contracts, we might consider changing for bytes32\\n     * in the future due to gas optimization\\n     */\\n    struct App {\\n        string name; // Name of the site\\n        string description; // Description about the site\\n        string image; // Preview Image IPFS Link\\n        string external_url; // Site URL\\n        string ENS; // ENS ID\\n        uint256 current_build; // The current build number (Increments by one with each change, starts at zero)\\n        mapping(uint256 => Build) builds; // Mapping to build details for each build number\\n    }\\n\\n    Counters.Counter private _tokenIds;\\n    mapping(uint256 => App) private _apps;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {}\\n\\n    modifier requireTokenOwner(uint256 tokenId) {\\n        require(\\n            msg.sender == ownerOf(tokenId),\\n            \\\"FleekERC721: must be token owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function mint(\\n        address to,\\n        string memory name,\\n        string memory description,\\n        string memory image,\\n        string memory external_url,\\n        string memory ENS,\\n        string memory commit_hash,\\n        string memory git_repository,\\n        string memory author\\n    ) public payable requireCollectionOwner returns (uint256) {\\n        uint256 tokenId = _tokenIds.current();\\n        _mint(to, tokenId);\\n        _tokenIds.increment();\\n\\n        App storage app = _apps[tokenId];\\n        app.name = name;\\n        app.description = description;\\n        app.image = image;\\n        app.external_url = external_url;\\n        app.ENS = ENS;\\n\\n        // The mint interaction is considered to be the first build of the site. Updates from now on all increment the current_build by one and update the mapping.\\n        app.current_build = 0;\\n        app.builds[0] = Build(commit_hash, git_repository, author);\\n\\n        return tokenId;\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n        address owner = ownerOf(tokenId);\\n        App storage app = _apps[tokenId];\\n\\n        bytes memory dataURI = abi.encodePacked(\\n            '{',\\n                '\\\"name\\\":\\\"', app.name, '\\\",',\\n                '\\\"description\\\":\\\"', app.description, '\\\",',\\n                '\\\"owner\\\":\\\"', Strings.toHexString(uint160(owner), 20), '\\\",',\\n                '\\\"external_url\\\":\\\"', app.external_url, '\\\",',\\n                '\\\"image\\\":\\\"', app.image, '\\\",',\\n                '\\\"attributes\\\": [',\\n                    '{\\\"trait_type\\\": \\\"ENS\\\", \\\"value\\\":\\\"', app.ENS,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Commit Hash\\\", \\\"value\\\":\\\"', app.builds[app.current_build].commit_hash,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Repository\\\", \\\"value\\\":\\\"', app.builds[app.current_build].git_repository,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Author\\\", \\\"value\\\":\\\"', app.builds[app.current_build].author,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Version\\\", \\\"value\\\":\\\"', Strings.toString(app.current_build),'\\\"}',\\n                ']',\\n            '}'\\n        );\\n\\n        return string(abi.encodePacked(_baseURI(), Base64.encode((dataURI))));\\n    }\\n\\n    function addTokenController(\\n        uint256 tokenId,\\n        address controller\\n    ) public requireTokenOwner(tokenId) {\\n        _requireMinted(tokenId);\\n        _grantRole(_tokenRole(tokenId, \\\"CONTROLLER\\\"), controller);\\n    }\\n\\n    function removeTokenController(\\n        uint256 tokenId,\\n        address controller\\n    ) public requireTokenOwner(tokenId) {\\n        _requireMinted(tokenId);\\n        _revokeRole(_tokenRole(tokenId, \\\"CONTROLLER\\\"), controller);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Override of _beforeTokenTransfer of ERC721.\\n     * Here it needs to update the token controller roles for mint, burn and transfer.\\n     * IMPORTANT: The function for clearing token controllers is not implemented yet.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        if (from != address(0) && to != address(0)) {\\n            // Transfer\\n            _clearTokenControllers(tokenId);\\n            _grantRole(_tokenRole(tokenId, \\\"CONTROLLER\\\"), to);\\n        } else if (from == address(0)) {\\n            // Mint\\n            _grantRole(_tokenRole(tokenId, \\\"CONTROLLER\\\"), to);\\n        } else if (to == address(0)) {\\n            // Burn\\n            _clearTokenControllers(tokenId);\\n        }\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return \\\"data:application/json;base64,\\\";\\n    }\\n\\n    function setTokenExternalURL(\\n        uint256 tokenId,\\n        string memory _tokenExternalURL\\n    ) public virtual requireTokenController(tokenId) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].external_url = _tokenExternalURL;\\n        emit NewTokenExternalURL(tokenId, _tokenExternalURL);\\n    }\\n\\n    function setTokenENS(\\n        uint256 tokenId,\\n        string memory _tokenENS\\n    ) public virtual requireTokenController(tokenId) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].ENS = _tokenENS;\\n        emit NewTokenENS(tokenId, _tokenENS);\\n    }\\n\\n    function setTokenName(\\n        uint256 tokenId,\\n        string memory _tokenName\\n    ) public virtual requireTokenController(tokenId) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].name = _tokenName;\\n        emit NewTokenName(tokenId, _tokenName);\\n    }\\n\\n    function setTokenDescription(\\n        uint256 tokenId,\\n        string memory _tokenDescription\\n    ) public virtual requireTokenController(tokenId) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].description = _tokenDescription;\\n        emit NewTokenDescription(tokenId, _tokenDescription);\\n    }\\n\\n    function setTokenImage(\\n        uint256 tokenId,\\n        string memory _tokenImage\\n    ) public virtual requireTokenController(tokenId) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].image = _tokenImage;\\n        emit NewTokenImage(tokenId, _tokenImage);\\n    }\\n\\n    function setTokenBuild(\\n        uint256 tokenId,\\n        string memory _commit_hash,\\n        string memory _git_repository,\\n        string memory _author\\n    ) public virtual requireTokenController(tokenId) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].builds[++_apps[tokenId].current_build] = Build(\\n            _commit_hash,\\n            _git_repository,\\n            _author\\n        );\\n        emit NewBuild(tokenId, _commit_hash);\\n    }\\n\\n    function burn(\\n        uint256 tokenId\\n    ) public virtual requireTokenOwner(tokenId) {\\n        super._burn(tokenId);\\n\\n        if (bytes(_apps[tokenId].external_url).length != 0) {\\n            delete _apps[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09e1fc900f727d7948ab307e3ed432c91e2e4b5c734343db7fd94577de3c27e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005bda38038062005bda8339818101604052810190620000379190620003f3565b8181816000908051906020019062000051929190620002c5565b5080600190805190602001906200006a929190620002c5565b505050620000a27fcac50f86c292f6863f130b9e1133a5f875e8e957fed41745b8fa2498550cbdfc6000801b620000dc60201b60201c565b620000d47fcac50f86c292f6863f130b9e1133a5f875e8e957fed41745b8fa2498550cbdfc336200014060201b60201c565b5050620005fc565b6000620000ef836200023260201b60201c565b90508160066000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6200015282826200025260201b60201c565b6200022e5760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001d3620002bd60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600060066000838152602001908152602001600020600101549050919050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b828054620002d3906200050d565b90600052602060002090601f016020900481019282620002f7576000855562000343565b82601f106200031257805160ff191683800117855562000343565b8280016001018555821562000343579182015b828111156200034257825182559160200191906001019062000325565b5b50905062000352919062000356565b5090565b5b808211156200037157600081600090555060010162000357565b5090565b60006200038c6200038684620004a1565b62000478565b905082815260208101848484011115620003ab57620003aa620005dc565b5b620003b8848285620004d7565b509392505050565b600082601f830112620003d857620003d7620005d7565b5b8151620003ea84826020860162000375565b91505092915050565b600080604083850312156200040d576200040c620005e6565b5b600083015167ffffffffffffffff8111156200042e576200042d620005e1565b5b6200043c85828601620003c0565b925050602083015167ffffffffffffffff81111562000460576200045f620005e1565b5b6200046e85828601620003c0565b9150509250929050565b60006200048462000497565b905062000492828262000543565b919050565b6000604051905090565b600067ffffffffffffffff821115620004bf57620004be620005a8565b5b620004ca82620005eb565b9050602081019050919050565b60005b83811015620004f7578082015181840152602081019050620004da565b8381111562000507576000848401525b50505050565b600060028204905060018216806200052657607f821691505b602082108114156200053d576200053c62000579565b5b50919050565b6200054e82620005eb565b810181811067ffffffffffffffff8211171562000570576200056f620005a8565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6155ce806200060c6000396000f3fe6080604052600436106101e35760003560e01c806395d89b4111610102578063befaa6a311610095578063dcd7818611610064578063dcd7818614610713578063e46f29c81461073c578063e985e9c514610767578063f9315177146107a4576101e3565b8063befaa6a31461065b578063c87b56dd14610684578063cdb0e89e146106c1578063d547741f146106ea576101e3565b8063a22cb465116100d1578063a22cb465146105b0578063b4ff9205146105d9578063b6959c3c14610609578063b88d4fde14610632576101e3565b806395d89b41146104f257806398b707931461051d5780639e8a3ca414610548578063a217fddf14610585576101e3565b806336568abe1161017a57806364140ec01161014957806364140ec01461042657806370a082311461044f57806378278cca1461048c57806391d14854146104b5576101e3565b806336568abe1461036e57806342842e0e1461039757806342966c68146103c05780636352211e146103e9576101e3565b806323b872dd116101b657806323b872dd146102b6578063246a908b146102df578063248a9ca3146103085780632f2ff15d14610345576101e3565b806301ffc9a7146101e857806306fdde0314610225578063081812fc14610250578063095ea7b31461028d575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190613b14565b6107cd565b60405161021c91906145f6565b60405180910390f35b34801561023157600080fd5b5061023a6107df565b604051610247919061462c565b60405180910390f35b34801561025c57600080fd5b5061027760048036038101906102729190613b6e565b610871565b604051610284919061458f565b60405180910390f35b34801561029957600080fd5b506102b460048036038101906102af9190613a67565b6108b7565b005b3480156102c257600080fd5b506102dd60048036038101906102d891906137a7565b6109cf565b005b3480156102eb57600080fd5b5061030660048036038101906103019190613bdb565b610a2f565b005b34801561031457600080fd5b5061032f600480360381019061032a9190613aa7565b610b33565b60405161033c9190614611565b60405180910390f35b34801561035157600080fd5b5061036c60048036038101906103679190613ad4565b610b53565b005b34801561037a57600080fd5b5061039560048036038101906103909190613ad4565b610b74565b005b3480156103a357600080fd5b506103be60048036038101906103b991906137a7565b610bf7565b005b3480156103cc57600080fd5b506103e760048036038101906103e29190613b6e565b610c17565b005b3480156103f557600080fd5b50610410600480360381019061040b9190613b6e565b610d34565b60405161041d919061458f565b60405180910390f35b34801561043257600080fd5b5061044d60048036038101906104489190613bdb565b610dbb565b005b34801561045b57600080fd5b506104766004803603810190610471919061373a565b610ebf565b604051610483919061484e565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae9190613bdb565b610f77565b005b3480156104c157600080fd5b506104dc60048036038101906104d79190613ad4565b61107b565b6040516104e991906145f6565b60405180910390f35b3480156104fe57600080fd5b506105076110e6565b604051610514919061462c565b60405180910390f35b34801561052957600080fd5b50610532611178565b60405161053f9190614611565b60405180910390f35b34801561055457600080fd5b5061056f600480360381019061056a9190613b9b565b61119c565b60405161057c91906145f6565b60405180910390f35b34801561059157600080fd5b5061059a6111ee565b6040516105a79190614611565b60405180910390f35b3480156105bc57600080fd5b506105d760048036038101906105d2919061387d565b6111f5565b005b6105f360048036038101906105ee91906138bd565b61120b565b604051610600919061484e565b60405180910390f35b34801561061557600080fd5b50610630600480360381019061062b9190613c37565b6113d2565b005b34801561063e57600080fd5b50610659600480360381019061065491906137fa565b611571565b005b34801561066757600080fd5b50610682600480360381019061067d9190613b9b565b6115d3565b005b34801561069057600080fd5b506106ab60048036038101906106a69190613b6e565b6116a0565b6040516106b8919061462c565b60405180910390f35b3480156106cd57600080fd5b506106e860048036038101906106e39190613bdb565b6117cc565b005b3480156106f657600080fd5b50610711600480360381019061070c9190613ad4565b6118d0565b005b34801561071f57600080fd5b5061073a60048036038101906107359190613b9b565b6118f1565b005b34801561074857600080fd5b506107516119be565b60405161075e9190614611565b60405180910390f35b34801561077357600080fd5b5061078e60048036038101906107899190613767565b6119e2565b60405161079b91906145f6565b60405180910390f35b3480156107b057600080fd5b506107cb60048036038101906107c69190613bdb565b611a76565b005b60006107d882611b7a565b9050919050565b6060600080546107ee90614b47565b80601f016020809104026020016040519081016040528092919081815260200182805461081a90614b47565b80156108675780601f1061083c57610100808354040283529160200191610867565b820191906000526020600020905b81548152906001019060200180831161084a57829003601f168201915b5050505050905090565b600061087c82611bf4565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108c282610d34565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a906147ae565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610952611c3f565b73ffffffffffffffffffffffffffffffffffffffff16148061098157506109808161097b611c3f565b6119e2565b5b6109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7906147ce565b60405180910390fd5b6109ca8383611c47565b505050565b6109e06109da611c3f565b82611d00565b610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a169061466e565b60405180910390fd5b610a2a838383611d95565b505050565b81610a78610a72826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b610ab7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aae9061480e565b60405180910390fd5b610ac083611bf4565b81600860008581526020019081526020016000206001019080519060200190610aea9291906134f9565b5081604051610af99190614353565b6040518091039020837f9b3089e7af95b8d43fdceb16eb9cbf620a0cb486e1a291b15121a44e0f69127a60405160405180910390a3505050565b600060066000838152602001908152602001600020600101549050919050565b610b5c82610b33565b610b65816120c2565b610b6f83836120d6565b505050565b610b7c611c3f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be09061482e565b60405180910390fd5b610bf382826121b7565b5050565b610c1283838360405180602001604052806000815250611571565b505050565b80610c2181610d34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c859061476e565b60405180910390fd5b610c9782612299565b6000600860008481526020019081526020016000206003018054610cba90614b47565b905014610d30576008600083815260200190815260200160002060008082016000610ce5919061357f565b600182016000610cf5919061357f565b600282016000610d05919061357f565b600382016000610d15919061357f565b600482016000610d25919061357f565b600582016000905550505b5050565b600080610d40836123e7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da99061478e565b60405180910390fd5b80915050919050565b81610e04610dfe826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b610e43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3a9061480e565b60405180910390fd5b610e4c83611bf4565b81600860008581526020019081526020016000206002019080519060200190610e769291906134f9565b5081604051610e859190614353565b6040518091039020837fb041870856ebefdd6a3cb1ac665eb6739281b855c912ff622e814dbf91c96bb660405160405180910390a3505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f279061472e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b81610fc0610fba826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b610fff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff69061480e565b60405180910390fd5b61100883611bf4565b816008600085815260200190815260200160002060040190805190602001906110329291906134f9565b50816040516110419190614353565b6040518091039020837fc1b5a2141fc60537be795a8771f5e8c80188922acb5399a6e463ea95aa852f3160405160405180910390a3505050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600180546110f590614b47565b80601f016020809104026020016040519081016040528092919081815260200182805461112190614b47565b801561116e5780601f106111435761010080835404028352916020019161116e565b820191906000526020600020905b81548152906001019060200180831161115157829003601f168201915b5050505050905090565b7fcac50f86c292f6863f130b9e1133a5f875e8e957fed41745b8fa2498550cbdfc81565b60006111e66111e0846040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b8361107b565b905092915050565b6000801b81565b611207611200611c3f565b8383612424565b5050565b60006112377fcac50f86c292f6863f130b9e1133a5f875e8e957fed41745b8fa2498550cbdfc3361107b565b611276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126d906147ee565b60405180910390fd5b60006112826007612591565b905061128e8b8261259f565b61129860076127bd565b60006008600083815260200190815260200160002090508a8160000190805190602001906112c79291906134f9565b50898160010190805190602001906112e09291906134f9565b50888160020190805190602001906112f99291906134f9565b50878160030190805190602001906113129291906134f9565b508681600401908051906020019061132b9291906134f9565b506000816005018190555060405180606001604052808781526020018681526020018581525081600601600080815260200190815260200160002060008201518160000190805190602001906113829291906134f9565b50602082015181600101908051906020019061139f9291906134f9565b5060408201518160020190805190602001906113bc9291906134f9565b5090505081925050509998505050505050505050565b8361141b611415826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b61145a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114519061480e565b60405180910390fd5b61146385611bf4565b60405180606001604052808581526020018481526020018381525060086000878152602001908152602001600020600601600060086000898152602001908152602001600020600501600081546114b990614baa565b919050819055815260200190815260200160002060008201518160000190805190602001906114e99291906134f9565b5060208201518160010190805190602001906115069291906134f9565b5060408201518160020190805190602001906115239291906134f9565b50905050836040516115359190614353565b6040518091039020857ff0cd0ce9d5882a10e2780d2d9c805c18e7536b9b2c6412f7bfb7f163656dd0f660405160405180910390a35050505050565b61158261157c611c3f565b83611d00565b6115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b89061466e565b60405180910390fd5b6115cd848484846127d3565b50505050565b816115dd81610d34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461164a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116419061476e565b60405180910390fd5b61165383611bf4565b61169b611695846040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b836121b7565b505050565b60606116ab82611bf4565b60006116b683610d34565b90506000600860008581526020019081526020016000209050600081600001826001016116fa8573ffffffffffffffffffffffffffffffffffffffff16601461282f565b846003018560020186600401876006016000896005015481526020019081526020016000206000018860060160008a6005015481526020019081526020016000206001018960060160008b6005015481526020019081526020016000206002016117678b60050154612a6b565b6040516020016117809a999897969594939291906143c1565b6040516020818303038152906040529050611799612b43565b6117a282612b80565b6040516020016117b392919061436a565b6040516020818303038152906040529350505050919050565b8161181561180f826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b611854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184b9061480e565b60405180910390fd5b61185d83611bf4565b816008600085815260200190815260200160002060000190805190602001906118879291906134f9565b50816040516118969190614353565b6040518091039020837fabf44020991f188f6b302a14e4b7a3dc94de10ed2140a6c03e16f4213d11b1c960405160405180910390a3505050565b6118d982610b33565b6118e2816120c2565b6118ec83836121b7565b505050565b816118fb81610d34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195f9061476e565b60405180910390fd5b61197183611bf4565b6119b96119b3846040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b836120d6565b505050565b7f54812023c8fe13756580f3420840aeb566f69714bea27346e22e4c654756d77e81565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b81611abf611ab9826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af59061480e565b60405180910390fd5b611b0783611bf4565b81600860008581526020019081526020016000206003019080519060200190611b319291906134f9565b5081604051611b409190614353565b6040518091039020837f9f284fd257fb85bc33901e673c078261b0222fbcc4b52c74784c9566808e3cfc60405160405180910390a3505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611bed5750611bec82612ce4565b5b9050919050565b611bfd81612dc6565b611c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c339061478e565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611cba83610d34565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611d0c83610d34565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d4e5750611d4d81856119e2565b5b80611d8c57508373ffffffffffffffffffffffffffffffffffffffff16611d7484610871565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611db582610d34565b73ffffffffffffffffffffffffffffffffffffffff1614611e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e02906146ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e72906146ee565b60405180910390fd5b611e888383836001612e07565b8273ffffffffffffffffffffffffffffffffffffffff16611ea882610d34565b73ffffffffffffffffffffffffffffffffffffffff1614611efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef5906146ae565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461208a8383836001612fa1565b505050565b600081836040516020016120a492919061438e565b60405160208183030381529060405280519060200120905092915050565b6120d3816120ce611c3f565b612fa7565b50565b6120e0828261107b565b6121b35760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612158611c3f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6121c1828261107b565b156122955760006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061223a611c3f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006122a482610d34565b90506122b4816000846001612e07565b6122bd82610d34565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46123e3816000846001612fa1565b5050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248a9061470e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161258491906145f6565b60405180910390a3505050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561260f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126069061474e565b60405180910390fd5b61261881612dc6565b15612658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264f906146ce565b60405180910390fd5b612666600083836001612e07565b61266f81612dc6565b156126af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a6906146ce565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46127b9600083836001612fa1565b5050565b6001816000016000828254019250508190555050565b6127de848484611d95565b6127ea8484848461302c565b612829576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128209061468e565b60405180910390fd5b50505050565b60606000600283600261284291906149cf565b61284c9190614948565b67ffffffffffffffff81111561286557612864614cb9565b5b6040519080825280601f01601f1916602001820160405280156128975781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128cf576128ce614c8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061293357612932614c8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261297391906149cf565b61297d9190614948565b90505b6001811115612a1d577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106129bf576129be614c8a565b5b1a60f81b8282815181106129d6576129d5614c8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612a1690614b1d565b9050612980565b5060008414612a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a589061464e565b60405180910390fd5b8091505092915050565b606060006001612a7a846131c3565b01905060008167ffffffffffffffff811115612a9957612a98614cb9565b5b6040519080825280601f01601f191660200182016040528015612acb5781602001600182028036833780820191505090505b509050600082602001820190505b600115612b38578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612b2257612b21614c2c565b5b0494506000851415612b3357612b38565b612ad9565b819350505050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b6060600082511415612ba357604051806020016040528060008152509050612cdf565b60006040518060600160405280604081526020016155596040913990506000600360028551612bd29190614948565b612bdc919061499e565b6004612be891906149cf565b67ffffffffffffffff811115612c0157612c00614cb9565b5b6040519080825280601f01601f191660200182016040528015612c335781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015612c9f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050612c44565b5050600386510660018114612cbb5760028114612cce57612cd6565b603d6001830353603d6002830353612cd6565b603d60018303535b50505080925050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612daf57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612dbf5750612dbe82613316565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612de8836123e7565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015612e715750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15612ecc57612e7f82613380565b612ec7612ec1836040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b846120d6565b612f8f565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612f4e57612f49612f43836040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b846120d6565b612f8e565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612f8d57612f8c82613380565b5b5b5b612f9b84848484613383565b50505050565b50505050565b612fb1828261107b565b61302857612fbe816134a9565b612fcc8360001c602061282f565b604051602001612fdd929190614555565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301f919061462c565b60405180910390fd5b5050565b600061304d8473ffffffffffffffffffffffffffffffffffffffff166134d6565b156131b6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613076611c3f565b8786866040518563ffffffff1660e01b815260040161309894939291906145aa565b602060405180830381600087803b1580156130b257600080fd5b505af19250505080156130e357506040513d601f19601f820116820180604052508101906130e09190613b41565b60015b613166573d8060008114613113576040519150601f19603f3d011682016040523d82523d6000602084013e613118565b606091505b5060008151141561315e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131559061468e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506131bb565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613221577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161321757613216614c2c565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061325e576d04ee2d6d415b85acef8100000000838161325457613253614c2c565b5b0492506020810190505b662386f26fc10000831061328d57662386f26fc10000838161328357613282614c2c565b5b0492506010810190505b6305f5e10083106132b6576305f5e10083816132ac576132ab614c2c565b5b0492506008810190505b61271083106132db5761271083816132d1576132d0614c2c565b5b0492506004810190505b606483106132fe57606483816132f4576132f3614c2c565b5b0492506002810190505b600a831061330d576001810190505b80915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50565b60018111156134a357600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146134175780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461340f9190614a29565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146134a25780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461349a9190614948565b925050819055505b5b50505050565b60606134cf8273ffffffffffffffffffffffffffffffffffffffff16601460ff1661282f565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461350590614b47565b90600052602060002090601f016020900481019282613527576000855561356e565b82601f1061354057805160ff191683800117855561356e565b8280016001018555821561356e579182015b8281111561356d578251825591602001919060010190613552565b5b50905061357b91906135bf565b5090565b50805461358b90614b47565b6000825580601f1061359d57506135bc565b601f0160209004906000526020600020908101906135bb91906135bf565b5b50565b5b808211156135d85760008160009055506001016135c0565b5090565b60006135ef6135ea8461488e565b614869565b90508281526020810184848401111561360b5761360a614ced565b5b613616848285614adb565b509392505050565b600061363161362c846148bf565b614869565b90508281526020810184848401111561364d5761364c614ced565b5b613658848285614adb565b509392505050565b60008135905061366f816154e5565b92915050565b600081359050613684816154fc565b92915050565b60008135905061369981615513565b92915050565b6000813590506136ae8161552a565b92915050565b6000815190506136c38161552a565b92915050565b600082601f8301126136de576136dd614ce8565b5b81356136ee8482602086016135dc565b91505092915050565b600082601f83011261370c5761370b614ce8565b5b813561371c84826020860161361e565b91505092915050565b60008135905061373481615541565b92915050565b6000602082840312156137505761374f614cf7565b5b600061375e84828501613660565b91505092915050565b6000806040838503121561377e5761377d614cf7565b5b600061378c85828601613660565b925050602061379d85828601613660565b9150509250929050565b6000806000606084860312156137c0576137bf614cf7565b5b60006137ce86828701613660565b93505060206137df86828701613660565b92505060406137f086828701613725565b9150509250925092565b6000806000806080858703121561381457613813614cf7565b5b600061382287828801613660565b945050602061383387828801613660565b935050604061384487828801613725565b925050606085013567ffffffffffffffff81111561386557613864614cf2565b5b613871878288016136c9565b91505092959194509250565b6000806040838503121561389457613893614cf7565b5b60006138a285828601613660565b92505060206138b385828601613675565b9150509250929050565b60008060008060008060008060006101208a8c0312156138e0576138df614cf7565b5b60006138ee8c828d01613660565b99505060208a013567ffffffffffffffff81111561390f5761390e614cf2565b5b61391b8c828d016136f7565b98505060408a013567ffffffffffffffff81111561393c5761393b614cf2565b5b6139488c828d016136f7565b97505060608a013567ffffffffffffffff81111561396957613968614cf2565b5b6139758c828d016136f7565b96505060808a013567ffffffffffffffff81111561399657613995614cf2565b5b6139a28c828d016136f7565b95505060a08a013567ffffffffffffffff8111156139c3576139c2614cf2565b5b6139cf8c828d016136f7565b94505060c08a013567ffffffffffffffff8111156139f0576139ef614cf2565b5b6139fc8c828d016136f7565b93505060e08a013567ffffffffffffffff811115613a1d57613a1c614cf2565b5b613a298c828d016136f7565b9250506101008a013567ffffffffffffffff811115613a4b57613a4a614cf2565b5b613a578c828d016136f7565b9150509295985092959850929598565b60008060408385031215613a7e57613a7d614cf7565b5b6000613a8c85828601613660565b9250506020613a9d85828601613725565b9150509250929050565b600060208284031215613abd57613abc614cf7565b5b6000613acb8482850161368a565b91505092915050565b60008060408385031215613aeb57613aea614cf7565b5b6000613af98582860161368a565b9250506020613b0a85828601613660565b9150509250929050565b600060208284031215613b2a57613b29614cf7565b5b6000613b388482850161369f565b91505092915050565b600060208284031215613b5757613b56614cf7565b5b6000613b65848285016136b4565b91505092915050565b600060208284031215613b8457613b83614cf7565b5b6000613b9284828501613725565b91505092915050565b60008060408385031215613bb257613bb1614cf7565b5b6000613bc085828601613725565b9250506020613bd185828601613660565b9150509250929050565b60008060408385031215613bf257613bf1614cf7565b5b6000613c0085828601613725565b925050602083013567ffffffffffffffff811115613c2157613c20614cf2565b5b613c2d858286016136f7565b9150509250929050565b60008060008060808587031215613c5157613c50614cf7565b5b6000613c5f87828801613725565b945050602085013567ffffffffffffffff811115613c8057613c7f614cf2565b5b613c8c878288016136f7565b935050604085013567ffffffffffffffff811115613cad57613cac614cf2565b5b613cb9878288016136f7565b925050606085013567ffffffffffffffff811115613cda57613cd9614cf2565b5b613ce6878288016136f7565b91505092959194509250565b613cfb81614a5d565b82525050565b613d0a81614a6f565b82525050565b613d1981614a7b565b82525050565b6000613d2a82614905565b613d34818561491b565b9350613d44818560208601614aea565b613d4d81614cfc565b840191505092915050565b6000613d6382614910565b613d6d818561492c565b9350613d7d818560208601614aea565b613d8681614cfc565b840191505092915050565b6000613d9c82614910565b613da6818561493d565b9350613db6818560208601614aea565b80840191505092915050565b60008154613dcf81614b47565b613dd9818661493d565b94506001821660008114613df45760018114613e0557613e38565b60ff19831686528186019350613e38565b613e0e856148f0565b60005b83811015613e3057815481890152600182019150602081019050613e11565b838801955050505b50505092915050565b6000613e4e60208361492c565b9150613e5982614d0d565b602082019050919050565b6000613e71602d8361492c565b9150613e7c82614d36565b604082019050919050565b6000613e9460108361493d565b9150613e9f82614d85565b601082019050919050565b6000613eb760328361492c565b9150613ec282614dae565b604082019050919050565b6000613eda600f8361493d565b9150613ee582614dfd565b600f82019050919050565b6000613efd60028361493d565b9150613f0882614e26565b600282019050919050565b6000613f2060258361492c565b9150613f2b82614e4f565b604082019050919050565b6000613f4360238361493d565b9150613f4e82614e9e565b602382019050919050565b6000613f66601c8361492c565b9150613f7182614eed565b602082019050919050565b6000613f8960038361493d565b9150613f9482614f16565b600382019050919050565b6000613fac60248361492c565b9150613fb782614f3f565b604082019050919050565b6000613fcf60198361492c565b9150613fda82614f8e565b602082019050919050565b6000613ff260268361493d565b9150613ffd82614fb7565b602682019050919050565b600061401560088361493d565b915061402082615006565b600882019050919050565b600061403860228361493d565b91506140438261502f565b602282019050919050565b600061405b60068361493d565b91506140668261507e565b600682019050919050565b600061407e60298361492c565b9150614089826150a7565b604082019050919050565b60006140a160098361493d565b91506140ac826150f6565b600982019050919050565b60006140c460028361493d565b91506140cf8261511f565b600282019050919050565b60006140e760208361492c565b91506140f282615148565b602082019050919050565b600061410a60018361493d565b915061411582615171565b600182019050919050565b600061412d60208361492c565b91506141388261519a565b602082019050919050565b600061415060018361493d565b915061415b826151c3565b600182019050919050565b6000614173600f8361493d565b915061417e826151ec565b600f82019050919050565b600061419660098361493d565b91506141a182615215565b600982019050919050565b60006141b960188361492c565b91506141c48261523e565b602082019050919050565b60006141dc601f8361493d565b91506141e782615267565b601f82019050919050565b60006141ff60018361493d565b915061420a82615290565b600182019050919050565b600061422260218361492c565b915061422d826152b9565b604082019050919050565b600061424560278361493d565b915061425082615308565b602782019050919050565b6000614268603d8361492c565b915061427382615357565b604082019050919050565b600061428b60178361493d565b9150614296826153a6565b601782019050919050565b60006142ae60338361492c565b91506142b9826153cf565b604082019050919050565b60006142d160288361492c565b91506142dc8261541e565b604082019050919050565b60006142f460118361493d565b91506142ff8261546d565b601182019050919050565b6000614317602f8361492c565b915061432282615496565b604082019050919050565b61433681614ad1565b82525050565b61434d61434882614ad1565b614bf3565b82525050565b600061435f8284613d91565b915081905092915050565b60006143768285613d91565b91506143828284613d91565b91508190509392505050565b60006143998261404e565b91506143a58285613d91565b91506143b1828461433c565b6020820191508190509392505050565b60006143cc82614143565b91506143d782614008565b91506143e3828d613dc2565b91506143ee82613ef0565b91506143f982613ecd565b9150614405828c613dc2565b915061441082613ef0565b915061441b82614189565b9150614427828b613d91565b915061443282613ef0565b915061443d82613e87565b9150614449828a613dc2565b915061445482613ef0565b915061445f82614094565b915061446b8289613dc2565b915061447682613ef0565b915061448182614166565b915061448c826141cf565b91506144988288613dc2565b91506144a382613f7c565b91506144ae82614238565b91506144ba8287613dc2565b91506144c582613f7c565b91506144d082613fe5565b91506144dc8286613dc2565b91506144e782613f7c565b91506144f28261402b565b91506144fe8285613dc2565b915061450982613f7c565b915061451482613f36565b91506145208284613d91565b915061452b826140b7565b9150614536826141f2565b9150614541826140fd565b91508190509b9a5050505050505050505050565b60006145608261427e565b915061456c8285613d91565b9150614577826142e7565b91506145838284613d91565b91508190509392505050565b60006020820190506145a46000830184613cf2565b92915050565b60006080820190506145bf6000830187613cf2565b6145cc6020830186613cf2565b6145d9604083018561432d565b81810360608301526145eb8184613d1f565b905095945050505050565b600060208201905061460b6000830184613d01565b92915050565b60006020820190506146266000830184613d10565b92915050565b600060208201905081810360008301526146468184613d58565b905092915050565b6000602082019050818103600083015261466781613e41565b9050919050565b6000602082019050818103600083015261468781613e64565b9050919050565b600060208201905081810360008301526146a781613eaa565b9050919050565b600060208201905081810360008301526146c781613f13565b9050919050565b600060208201905081810360008301526146e781613f59565b9050919050565b6000602082019050818103600083015261470781613f9f565b9050919050565b6000602082019050818103600083015261472781613fc2565b9050919050565b6000602082019050818103600083015261474781614071565b9050919050565b60006020820190508181036000830152614767816140da565b9050919050565b6000602082019050818103600083015261478781614120565b9050919050565b600060208201905081810360008301526147a7816141ac565b9050919050565b600060208201905081810360008301526147c781614215565b9050919050565b600060208201905081810360008301526147e78161425b565b9050919050565b60006020820190508181036000830152614807816142a1565b9050919050565b60006020820190508181036000830152614827816142c4565b9050919050565b600060208201905081810360008301526148478161430a565b9050919050565b6000602082019050614863600083018461432d565b92915050565b6000614873614884565b905061487f8282614b79565b919050565b6000604051905090565b600067ffffffffffffffff8211156148a9576148a8614cb9565b5b6148b282614cfc565b9050602081019050919050565b600067ffffffffffffffff8211156148da576148d9614cb9565b5b6148e382614cfc565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061495382614ad1565b915061495e83614ad1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561499357614992614bfd565b5b828201905092915050565b60006149a982614ad1565b91506149b483614ad1565b9250826149c4576149c3614c2c565b5b828204905092915050565b60006149da82614ad1565b91506149e583614ad1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a1e57614a1d614bfd565b5b828202905092915050565b6000614a3482614ad1565b9150614a3f83614ad1565b925082821015614a5257614a51614bfd565b5b828203905092915050565b6000614a6882614ab1565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614b08578082015181840152602081019050614aed565b83811115614b17576000848401525b50505050565b6000614b2882614ad1565b91506000821415614b3c57614b3b614bfd565b5b600182039050919050565b60006002820490506001821680614b5f57607f821691505b60208210811415614b7357614b72614c5b565b5b50919050565b614b8282614cfc565b810181811067ffffffffffffffff82111715614ba157614ba0614cb9565b5b80604052505050565b6000614bb582614ad1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614be857614be7614bfd565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f2265787465726e616c5f75726c223a2200000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f226465736372697074696f6e223a220000000000000000000000000000000000600082015250565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f7b2274726169745f74797065223a202256657273696f6e222c202276616c756560008201527f223a220000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f227d2c0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f7b2274726169745f74797065223a20225265706f7369746f7279222c2022766160008201527f6c7565223a220000000000000000000000000000000000000000000000000000602082015250565b7f226e616d65223a22000000000000000000000000000000000000000000000000600082015250565b7f7b2274726169745f74797065223a2022417574686f72222c202276616c75652260008201527f3a22000000000000000000000000000000000000000000000000000000000000602082015250565b7f544f4b454e5f0000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f22696d616765223a220000000000000000000000000000000000000000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f466c65656b4552433732313a206d75737420626520746f6b656e206f776e6572600082015250565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b7f2261747472696275746573223a205b0000000000000000000000000000000000600082015250565b7f226f776e6572223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f7b2274726169745f74797065223a2022454e53222c202276616c7565223a2200600082015250565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f7b2274726169745f74797065223a2022436f6d6d69742048617368222c20227660008201527f616c7565223a2200000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f466c65656b416363657373436f6e74726f6c3a206d757374206861766520636f60008201527f6c6c656374696f6e206f776e657220726f6c6500000000000000000000000000602082015250565b7f466c65656b416363657373436f6e74726f6c3a206d757374206861766520746f60008201527f6b656e20726f6c65000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6154ee81614a5d565b81146154f957600080fd5b50565b61550581614a6f565b811461551057600080fd5b50565b61551c81614a7b565b811461552757600080fd5b50565b61553381614a85565b811461553e57600080fd5b50565b61554a81614ad1565b811461555557600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205246882f1f7107874499f15cd7bbafb2b47fb926e7a8f78e5904c597b5cebf8b64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c806395d89b4111610102578063befaa6a311610095578063dcd7818611610064578063dcd7818614610713578063e46f29c81461073c578063e985e9c514610767578063f9315177146107a4576101e3565b8063befaa6a31461065b578063c87b56dd14610684578063cdb0e89e146106c1578063d547741f146106ea576101e3565b8063a22cb465116100d1578063a22cb465146105b0578063b4ff9205146105d9578063b6959c3c14610609578063b88d4fde14610632576101e3565b806395d89b41146104f257806398b707931461051d5780639e8a3ca414610548578063a217fddf14610585576101e3565b806336568abe1161017a57806364140ec01161014957806364140ec01461042657806370a082311461044f57806378278cca1461048c57806391d14854146104b5576101e3565b806336568abe1461036e57806342842e0e1461039757806342966c68146103c05780636352211e146103e9576101e3565b806323b872dd116101b657806323b872dd146102b6578063246a908b146102df578063248a9ca3146103085780632f2ff15d14610345576101e3565b806301ffc9a7146101e857806306fdde0314610225578063081812fc14610250578063095ea7b31461028d575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190613b14565b6107cd565b60405161021c91906145f6565b60405180910390f35b34801561023157600080fd5b5061023a6107df565b604051610247919061462c565b60405180910390f35b34801561025c57600080fd5b5061027760048036038101906102729190613b6e565b610871565b604051610284919061458f565b60405180910390f35b34801561029957600080fd5b506102b460048036038101906102af9190613a67565b6108b7565b005b3480156102c257600080fd5b506102dd60048036038101906102d891906137a7565b6109cf565b005b3480156102eb57600080fd5b5061030660048036038101906103019190613bdb565b610a2f565b005b34801561031457600080fd5b5061032f600480360381019061032a9190613aa7565b610b33565b60405161033c9190614611565b60405180910390f35b34801561035157600080fd5b5061036c60048036038101906103679190613ad4565b610b53565b005b34801561037a57600080fd5b5061039560048036038101906103909190613ad4565b610b74565b005b3480156103a357600080fd5b506103be60048036038101906103b991906137a7565b610bf7565b005b3480156103cc57600080fd5b506103e760048036038101906103e29190613b6e565b610c17565b005b3480156103f557600080fd5b50610410600480360381019061040b9190613b6e565b610d34565b60405161041d919061458f565b60405180910390f35b34801561043257600080fd5b5061044d60048036038101906104489190613bdb565b610dbb565b005b34801561045b57600080fd5b506104766004803603810190610471919061373a565b610ebf565b604051610483919061484e565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae9190613bdb565b610f77565b005b3480156104c157600080fd5b506104dc60048036038101906104d79190613ad4565b61107b565b6040516104e991906145f6565b60405180910390f35b3480156104fe57600080fd5b506105076110e6565b604051610514919061462c565b60405180910390f35b34801561052957600080fd5b50610532611178565b60405161053f9190614611565b60405180910390f35b34801561055457600080fd5b5061056f600480360381019061056a9190613b9b565b61119c565b60405161057c91906145f6565b60405180910390f35b34801561059157600080fd5b5061059a6111ee565b6040516105a79190614611565b60405180910390f35b3480156105bc57600080fd5b506105d760048036038101906105d2919061387d565b6111f5565b005b6105f360048036038101906105ee91906138bd565b61120b565b604051610600919061484e565b60405180910390f35b34801561061557600080fd5b50610630600480360381019061062b9190613c37565b6113d2565b005b34801561063e57600080fd5b50610659600480360381019061065491906137fa565b611571565b005b34801561066757600080fd5b50610682600480360381019061067d9190613b9b565b6115d3565b005b34801561069057600080fd5b506106ab60048036038101906106a69190613b6e565b6116a0565b6040516106b8919061462c565b60405180910390f35b3480156106cd57600080fd5b506106e860048036038101906106e39190613bdb565b6117cc565b005b3480156106f657600080fd5b50610711600480360381019061070c9190613ad4565b6118d0565b005b34801561071f57600080fd5b5061073a60048036038101906107359190613b9b565b6118f1565b005b34801561074857600080fd5b506107516119be565b60405161075e9190614611565b60405180910390f35b34801561077357600080fd5b5061078e60048036038101906107899190613767565b6119e2565b60405161079b91906145f6565b60405180910390f35b3480156107b057600080fd5b506107cb60048036038101906107c69190613bdb565b611a76565b005b60006107d882611b7a565b9050919050565b6060600080546107ee90614b47565b80601f016020809104026020016040519081016040528092919081815260200182805461081a90614b47565b80156108675780601f1061083c57610100808354040283529160200191610867565b820191906000526020600020905b81548152906001019060200180831161084a57829003601f168201915b5050505050905090565b600061087c82611bf4565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108c282610d34565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a906147ae565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610952611c3f565b73ffffffffffffffffffffffffffffffffffffffff16148061098157506109808161097b611c3f565b6119e2565b5b6109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b7906147ce565b60405180910390fd5b6109ca8383611c47565b505050565b6109e06109da611c3f565b82611d00565b610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a169061466e565b60405180910390fd5b610a2a838383611d95565b505050565b81610a78610a72826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b610ab7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aae9061480e565b60405180910390fd5b610ac083611bf4565b81600860008581526020019081526020016000206001019080519060200190610aea9291906134f9565b5081604051610af99190614353565b6040518091039020837f9b3089e7af95b8d43fdceb16eb9cbf620a0cb486e1a291b15121a44e0f69127a60405160405180910390a3505050565b600060066000838152602001908152602001600020600101549050919050565b610b5c82610b33565b610b65816120c2565b610b6f83836120d6565b505050565b610b7c611c3f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610be9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be09061482e565b60405180910390fd5b610bf382826121b7565b5050565b610c1283838360405180602001604052806000815250611571565b505050565b80610c2181610d34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c859061476e565b60405180910390fd5b610c9782612299565b6000600860008481526020019081526020016000206003018054610cba90614b47565b905014610d30576008600083815260200190815260200160002060008082016000610ce5919061357f565b600182016000610cf5919061357f565b600282016000610d05919061357f565b600382016000610d15919061357f565b600482016000610d25919061357f565b600582016000905550505b5050565b600080610d40836123e7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da99061478e565b60405180910390fd5b80915050919050565b81610e04610dfe826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b610e43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3a9061480e565b60405180910390fd5b610e4c83611bf4565b81600860008581526020019081526020016000206002019080519060200190610e769291906134f9565b5081604051610e859190614353565b6040518091039020837fb041870856ebefdd6a3cb1ac665eb6739281b855c912ff622e814dbf91c96bb660405160405180910390a3505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f279061472e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b81610fc0610fba826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b610fff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff69061480e565b60405180910390fd5b61100883611bf4565b816008600085815260200190815260200160002060040190805190602001906110329291906134f9565b50816040516110419190614353565b6040518091039020837fc1b5a2141fc60537be795a8771f5e8c80188922acb5399a6e463ea95aa852f3160405160405180910390a3505050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600180546110f590614b47565b80601f016020809104026020016040519081016040528092919081815260200182805461112190614b47565b801561116e5780601f106111435761010080835404028352916020019161116e565b820191906000526020600020905b81548152906001019060200180831161115157829003601f168201915b5050505050905090565b7fcac50f86c292f6863f130b9e1133a5f875e8e957fed41745b8fa2498550cbdfc81565b60006111e66111e0846040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b8361107b565b905092915050565b6000801b81565b611207611200611c3f565b8383612424565b5050565b60006112377fcac50f86c292f6863f130b9e1133a5f875e8e957fed41745b8fa2498550cbdfc3361107b565b611276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126d906147ee565b60405180910390fd5b60006112826007612591565b905061128e8b8261259f565b61129860076127bd565b60006008600083815260200190815260200160002090508a8160000190805190602001906112c79291906134f9565b50898160010190805190602001906112e09291906134f9565b50888160020190805190602001906112f99291906134f9565b50878160030190805190602001906113129291906134f9565b508681600401908051906020019061132b9291906134f9565b506000816005018190555060405180606001604052808781526020018681526020018581525081600601600080815260200190815260200160002060008201518160000190805190602001906113829291906134f9565b50602082015181600101908051906020019061139f9291906134f9565b5060408201518160020190805190602001906113bc9291906134f9565b5090505081925050509998505050505050505050565b8361141b611415826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b61145a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114519061480e565b60405180910390fd5b61146385611bf4565b60405180606001604052808581526020018481526020018381525060086000878152602001908152602001600020600601600060086000898152602001908152602001600020600501600081546114b990614baa565b919050819055815260200190815260200160002060008201518160000190805190602001906114e99291906134f9565b5060208201518160010190805190602001906115069291906134f9565b5060408201518160020190805190602001906115239291906134f9565b50905050836040516115359190614353565b6040518091039020857ff0cd0ce9d5882a10e2780d2d9c805c18e7536b9b2c6412f7bfb7f163656dd0f660405160405180910390a35050505050565b61158261157c611c3f565b83611d00565b6115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b89061466e565b60405180910390fd5b6115cd848484846127d3565b50505050565b816115dd81610d34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461164a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116419061476e565b60405180910390fd5b61165383611bf4565b61169b611695846040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b836121b7565b505050565b60606116ab82611bf4565b60006116b683610d34565b90506000600860008581526020019081526020016000209050600081600001826001016116fa8573ffffffffffffffffffffffffffffffffffffffff16601461282f565b846003018560020186600401876006016000896005015481526020019081526020016000206000018860060160008a6005015481526020019081526020016000206001018960060160008b6005015481526020019081526020016000206002016117678b60050154612a6b565b6040516020016117809a999897969594939291906143c1565b6040516020818303038152906040529050611799612b43565b6117a282612b80565b6040516020016117b392919061436a565b6040516020818303038152906040529350505050919050565b8161181561180f826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b611854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184b9061480e565b60405180910390fd5b61185d83611bf4565b816008600085815260200190815260200160002060000190805190602001906118879291906134f9565b50816040516118969190614353565b6040518091039020837fabf44020991f188f6b302a14e4b7a3dc94de10ed2140a6c03e16f4213d11b1c960405160405180910390a3505050565b6118d982610b33565b6118e2816120c2565b6118ec83836121b7565b505050565b816118fb81610d34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195f9061476e565b60405180910390fd5b61197183611bf4565b6119b96119b3846040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b836120d6565b505050565b7f54812023c8fe13756580f3420840aeb566f69714bea27346e22e4c654756d77e81565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b81611abf611ab9826040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b3361107b565b611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af59061480e565b60405180910390fd5b611b0783611bf4565b81600860008581526020019081526020016000206003019080519060200190611b319291906134f9565b5081604051611b409190614353565b6040518091039020837f9f284fd257fb85bc33901e673c078261b0222fbcc4b52c74784c9566808e3cfc60405160405180910390a3505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611bed5750611bec82612ce4565b5b9050919050565b611bfd81612dc6565b611c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c339061478e565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611cba83610d34565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611d0c83610d34565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d4e5750611d4d81856119e2565b5b80611d8c57508373ffffffffffffffffffffffffffffffffffffffff16611d7484610871565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611db582610d34565b73ffffffffffffffffffffffffffffffffffffffff1614611e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e02906146ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e72906146ee565b60405180910390fd5b611e888383836001612e07565b8273ffffffffffffffffffffffffffffffffffffffff16611ea882610d34565b73ffffffffffffffffffffffffffffffffffffffff1614611efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef5906146ae565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461208a8383836001612fa1565b505050565b600081836040516020016120a492919061438e565b60405160208183030381529060405280519060200120905092915050565b6120d3816120ce611c3f565b612fa7565b50565b6120e0828261107b565b6121b35760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612158611c3f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6121c1828261107b565b156122955760006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061223a611c3f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006122a482610d34565b90506122b4816000846001612e07565b6122bd82610d34565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46123e3816000846001612fa1565b5050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248a9061470e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161258491906145f6565b60405180910390a3505050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561260f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126069061474e565b60405180910390fd5b61261881612dc6565b15612658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264f906146ce565b60405180910390fd5b612666600083836001612e07565b61266f81612dc6565b156126af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a6906146ce565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46127b9600083836001612fa1565b5050565b6001816000016000828254019250508190555050565b6127de848484611d95565b6127ea8484848461302c565b612829576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128209061468e565b60405180910390fd5b50505050565b60606000600283600261284291906149cf565b61284c9190614948565b67ffffffffffffffff81111561286557612864614cb9565b5b6040519080825280601f01601f1916602001820160405280156128975781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128cf576128ce614c8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061293357612932614c8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261297391906149cf565b61297d9190614948565b90505b6001811115612a1d577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106129bf576129be614c8a565b5b1a60f81b8282815181106129d6576129d5614c8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612a1690614b1d565b9050612980565b5060008414612a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a589061464e565b60405180910390fd5b8091505092915050565b606060006001612a7a846131c3565b01905060008167ffffffffffffffff811115612a9957612a98614cb9565b5b6040519080825280601f01601f191660200182016040528015612acb5781602001600182028036833780820191505090505b509050600082602001820190505b600115612b38578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612b2257612b21614c2c565b5b0494506000851415612b3357612b38565b612ad9565b819350505050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b6060600082511415612ba357604051806020016040528060008152509050612cdf565b60006040518060600160405280604081526020016155596040913990506000600360028551612bd29190614948565b612bdc919061499e565b6004612be891906149cf565b67ffffffffffffffff811115612c0157612c00614cb9565b5b6040519080825280601f01601f191660200182016040528015612c335781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015612c9f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050612c44565b5050600386510660018114612cbb5760028114612cce57612cd6565b603d6001830353603d6002830353612cd6565b603d60018303535b50505080925050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612daf57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612dbf5750612dbe82613316565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612de8836123e7565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015612e715750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15612ecc57612e7f82613380565b612ec7612ec1836040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b846120d6565b612f8f565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612f4e57612f49612f43836040518060400160405280600a81526020017f434f4e54524f4c4c45520000000000000000000000000000000000000000000081525061208f565b846120d6565b612f8e565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612f8d57612f8c82613380565b5b5b5b612f9b84848484613383565b50505050565b50505050565b612fb1828261107b565b61302857612fbe816134a9565b612fcc8360001c602061282f565b604051602001612fdd929190614555565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301f919061462c565b60405180910390fd5b5050565b600061304d8473ffffffffffffffffffffffffffffffffffffffff166134d6565b156131b6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613076611c3f565b8786866040518563ffffffff1660e01b815260040161309894939291906145aa565b602060405180830381600087803b1580156130b257600080fd5b505af19250505080156130e357506040513d601f19601f820116820180604052508101906130e09190613b41565b60015b613166573d8060008114613113576040519150601f19603f3d011682016040523d82523d6000602084013e613118565b606091505b5060008151141561315e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131559061468e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506131bb565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613221577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161321757613216614c2c565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061325e576d04ee2d6d415b85acef8100000000838161325457613253614c2c565b5b0492506020810190505b662386f26fc10000831061328d57662386f26fc10000838161328357613282614c2c565b5b0492506010810190505b6305f5e10083106132b6576305f5e10083816132ac576132ab614c2c565b5b0492506008810190505b61271083106132db5761271083816132d1576132d0614c2c565b5b0492506004810190505b606483106132fe57606483816132f4576132f3614c2c565b5b0492506002810190505b600a831061330d576001810190505b80915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50565b60018111156134a357600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146134175780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461340f9190614a29565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146134a25780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461349a9190614948565b925050819055505b5b50505050565b60606134cf8273ffffffffffffffffffffffffffffffffffffffff16601460ff1661282f565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461350590614b47565b90600052602060002090601f016020900481019282613527576000855561356e565b82601f1061354057805160ff191683800117855561356e565b8280016001018555821561356e579182015b8281111561356d578251825591602001919060010190613552565b5b50905061357b91906135bf565b5090565b50805461358b90614b47565b6000825580601f1061359d57506135bc565b601f0160209004906000526020600020908101906135bb91906135bf565b5b50565b5b808211156135d85760008160009055506001016135c0565b5090565b60006135ef6135ea8461488e565b614869565b90508281526020810184848401111561360b5761360a614ced565b5b613616848285614adb565b509392505050565b600061363161362c846148bf565b614869565b90508281526020810184848401111561364d5761364c614ced565b5b613658848285614adb565b509392505050565b60008135905061366f816154e5565b92915050565b600081359050613684816154fc565b92915050565b60008135905061369981615513565b92915050565b6000813590506136ae8161552a565b92915050565b6000815190506136c38161552a565b92915050565b600082601f8301126136de576136dd614ce8565b5b81356136ee8482602086016135dc565b91505092915050565b600082601f83011261370c5761370b614ce8565b5b813561371c84826020860161361e565b91505092915050565b60008135905061373481615541565b92915050565b6000602082840312156137505761374f614cf7565b5b600061375e84828501613660565b91505092915050565b6000806040838503121561377e5761377d614cf7565b5b600061378c85828601613660565b925050602061379d85828601613660565b9150509250929050565b6000806000606084860312156137c0576137bf614cf7565b5b60006137ce86828701613660565b93505060206137df86828701613660565b92505060406137f086828701613725565b9150509250925092565b6000806000806080858703121561381457613813614cf7565b5b600061382287828801613660565b945050602061383387828801613660565b935050604061384487828801613725565b925050606085013567ffffffffffffffff81111561386557613864614cf2565b5b613871878288016136c9565b91505092959194509250565b6000806040838503121561389457613893614cf7565b5b60006138a285828601613660565b92505060206138b385828601613675565b9150509250929050565b60008060008060008060008060006101208a8c0312156138e0576138df614cf7565b5b60006138ee8c828d01613660565b99505060208a013567ffffffffffffffff81111561390f5761390e614cf2565b5b61391b8c828d016136f7565b98505060408a013567ffffffffffffffff81111561393c5761393b614cf2565b5b6139488c828d016136f7565b97505060608a013567ffffffffffffffff81111561396957613968614cf2565b5b6139758c828d016136f7565b96505060808a013567ffffffffffffffff81111561399657613995614cf2565b5b6139a28c828d016136f7565b95505060a08a013567ffffffffffffffff8111156139c3576139c2614cf2565b5b6139cf8c828d016136f7565b94505060c08a013567ffffffffffffffff8111156139f0576139ef614cf2565b5b6139fc8c828d016136f7565b93505060e08a013567ffffffffffffffff811115613a1d57613a1c614cf2565b5b613a298c828d016136f7565b9250506101008a013567ffffffffffffffff811115613a4b57613a4a614cf2565b5b613a578c828d016136f7565b9150509295985092959850929598565b60008060408385031215613a7e57613a7d614cf7565b5b6000613a8c85828601613660565b9250506020613a9d85828601613725565b9150509250929050565b600060208284031215613abd57613abc614cf7565b5b6000613acb8482850161368a565b91505092915050565b60008060408385031215613aeb57613aea614cf7565b5b6000613af98582860161368a565b9250506020613b0a85828601613660565b9150509250929050565b600060208284031215613b2a57613b29614cf7565b5b6000613b388482850161369f565b91505092915050565b600060208284031215613b5757613b56614cf7565b5b6000613b65848285016136b4565b91505092915050565b600060208284031215613b8457613b83614cf7565b5b6000613b9284828501613725565b91505092915050565b60008060408385031215613bb257613bb1614cf7565b5b6000613bc085828601613725565b9250506020613bd185828601613660565b9150509250929050565b60008060408385031215613bf257613bf1614cf7565b5b6000613c0085828601613725565b925050602083013567ffffffffffffffff811115613c2157613c20614cf2565b5b613c2d858286016136f7565b9150509250929050565b60008060008060808587031215613c5157613c50614cf7565b5b6000613c5f87828801613725565b945050602085013567ffffffffffffffff811115613c8057613c7f614cf2565b5b613c8c878288016136f7565b935050604085013567ffffffffffffffff811115613cad57613cac614cf2565b5b613cb9878288016136f7565b925050606085013567ffffffffffffffff811115613cda57613cd9614cf2565b5b613ce6878288016136f7565b91505092959194509250565b613cfb81614a5d565b82525050565b613d0a81614a6f565b82525050565b613d1981614a7b565b82525050565b6000613d2a82614905565b613d34818561491b565b9350613d44818560208601614aea565b613d4d81614cfc565b840191505092915050565b6000613d6382614910565b613d6d818561492c565b9350613d7d818560208601614aea565b613d8681614cfc565b840191505092915050565b6000613d9c82614910565b613da6818561493d565b9350613db6818560208601614aea565b80840191505092915050565b60008154613dcf81614b47565b613dd9818661493d565b94506001821660008114613df45760018114613e0557613e38565b60ff19831686528186019350613e38565b613e0e856148f0565b60005b83811015613e3057815481890152600182019150602081019050613e11565b838801955050505b50505092915050565b6000613e4e60208361492c565b9150613e5982614d0d565b602082019050919050565b6000613e71602d8361492c565b9150613e7c82614d36565b604082019050919050565b6000613e9460108361493d565b9150613e9f82614d85565b601082019050919050565b6000613eb760328361492c565b9150613ec282614dae565b604082019050919050565b6000613eda600f8361493d565b9150613ee582614dfd565b600f82019050919050565b6000613efd60028361493d565b9150613f0882614e26565b600282019050919050565b6000613f2060258361492c565b9150613f2b82614e4f565b604082019050919050565b6000613f4360238361493d565b9150613f4e82614e9e565b602382019050919050565b6000613f66601c8361492c565b9150613f7182614eed565b602082019050919050565b6000613f8960038361493d565b9150613f9482614f16565b600382019050919050565b6000613fac60248361492c565b9150613fb782614f3f565b604082019050919050565b6000613fcf60198361492c565b9150613fda82614f8e565b602082019050919050565b6000613ff260268361493d565b9150613ffd82614fb7565b602682019050919050565b600061401560088361493d565b915061402082615006565b600882019050919050565b600061403860228361493d565b91506140438261502f565b602282019050919050565b600061405b60068361493d565b91506140668261507e565b600682019050919050565b600061407e60298361492c565b9150614089826150a7565b604082019050919050565b60006140a160098361493d565b91506140ac826150f6565b600982019050919050565b60006140c460028361493d565b91506140cf8261511f565b600282019050919050565b60006140e760208361492c565b91506140f282615148565b602082019050919050565b600061410a60018361493d565b915061411582615171565b600182019050919050565b600061412d60208361492c565b91506141388261519a565b602082019050919050565b600061415060018361493d565b915061415b826151c3565b600182019050919050565b6000614173600f8361493d565b915061417e826151ec565b600f82019050919050565b600061419660098361493d565b91506141a182615215565b600982019050919050565b60006141b960188361492c565b91506141c48261523e565b602082019050919050565b60006141dc601f8361493d565b91506141e782615267565b601f82019050919050565b60006141ff60018361493d565b915061420a82615290565b600182019050919050565b600061422260218361492c565b915061422d826152b9565b604082019050919050565b600061424560278361493d565b915061425082615308565b602782019050919050565b6000614268603d8361492c565b915061427382615357565b604082019050919050565b600061428b60178361493d565b9150614296826153a6565b601782019050919050565b60006142ae60338361492c565b91506142b9826153cf565b604082019050919050565b60006142d160288361492c565b91506142dc8261541e565b604082019050919050565b60006142f460118361493d565b91506142ff8261546d565b601182019050919050565b6000614317602f8361492c565b915061432282615496565b604082019050919050565b61433681614ad1565b82525050565b61434d61434882614ad1565b614bf3565b82525050565b600061435f8284613d91565b915081905092915050565b60006143768285613d91565b91506143828284613d91565b91508190509392505050565b60006143998261404e565b91506143a58285613d91565b91506143b1828461433c565b6020820191508190509392505050565b60006143cc82614143565b91506143d782614008565b91506143e3828d613dc2565b91506143ee82613ef0565b91506143f982613ecd565b9150614405828c613dc2565b915061441082613ef0565b915061441b82614189565b9150614427828b613d91565b915061443282613ef0565b915061443d82613e87565b9150614449828a613dc2565b915061445482613ef0565b915061445f82614094565b915061446b8289613dc2565b915061447682613ef0565b915061448182614166565b915061448c826141cf565b91506144988288613dc2565b91506144a382613f7c565b91506144ae82614238565b91506144ba8287613dc2565b91506144c582613f7c565b91506144d082613fe5565b91506144dc8286613dc2565b91506144e782613f7c565b91506144f28261402b565b91506144fe8285613dc2565b915061450982613f7c565b915061451482613f36565b91506145208284613d91565b915061452b826140b7565b9150614536826141f2565b9150614541826140fd565b91508190509b9a5050505050505050505050565b60006145608261427e565b915061456c8285613d91565b9150614577826142e7565b91506145838284613d91565b91508190509392505050565b60006020820190506145a46000830184613cf2565b92915050565b60006080820190506145bf6000830187613cf2565b6145cc6020830186613cf2565b6145d9604083018561432d565b81810360608301526145eb8184613d1f565b905095945050505050565b600060208201905061460b6000830184613d01565b92915050565b60006020820190506146266000830184613d10565b92915050565b600060208201905081810360008301526146468184613d58565b905092915050565b6000602082019050818103600083015261466781613e41565b9050919050565b6000602082019050818103600083015261468781613e64565b9050919050565b600060208201905081810360008301526146a781613eaa565b9050919050565b600060208201905081810360008301526146c781613f13565b9050919050565b600060208201905081810360008301526146e781613f59565b9050919050565b6000602082019050818103600083015261470781613f9f565b9050919050565b6000602082019050818103600083015261472781613fc2565b9050919050565b6000602082019050818103600083015261474781614071565b9050919050565b60006020820190508181036000830152614767816140da565b9050919050565b6000602082019050818103600083015261478781614120565b9050919050565b600060208201905081810360008301526147a7816141ac565b9050919050565b600060208201905081810360008301526147c781614215565b9050919050565b600060208201905081810360008301526147e78161425b565b9050919050565b60006020820190508181036000830152614807816142a1565b9050919050565b60006020820190508181036000830152614827816142c4565b9050919050565b600060208201905081810360008301526148478161430a565b9050919050565b6000602082019050614863600083018461432d565b92915050565b6000614873614884565b905061487f8282614b79565b919050565b6000604051905090565b600067ffffffffffffffff8211156148a9576148a8614cb9565b5b6148b282614cfc565b9050602081019050919050565b600067ffffffffffffffff8211156148da576148d9614cb9565b5b6148e382614cfc565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061495382614ad1565b915061495e83614ad1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561499357614992614bfd565b5b828201905092915050565b60006149a982614ad1565b91506149b483614ad1565b9250826149c4576149c3614c2c565b5b828204905092915050565b60006149da82614ad1565b91506149e583614ad1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a1e57614a1d614bfd565b5b828202905092915050565b6000614a3482614ad1565b9150614a3f83614ad1565b925082821015614a5257614a51614bfd565b5b828203905092915050565b6000614a6882614ab1565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614b08578082015181840152602081019050614aed565b83811115614b17576000848401525b50505050565b6000614b2882614ad1565b91506000821415614b3c57614b3b614bfd565b5b600182039050919050565b60006002820490506001821680614b5f57607f821691505b60208210811415614b7357614b72614c5b565b5b50919050565b614b8282614cfc565b810181811067ffffffffffffffff82111715614ba157614ba0614cb9565b5b80604052505050565b6000614bb582614ad1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614be857614be7614bfd565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f2265787465726e616c5f75726c223a2200000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f226465736372697074696f6e223a220000000000000000000000000000000000600082015250565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f7b2274726169745f74797065223a202256657273696f6e222c202276616c756560008201527f223a220000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f227d2c0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f7b2274726169745f74797065223a20225265706f7369746f7279222c2022766160008201527f6c7565223a220000000000000000000000000000000000000000000000000000602082015250565b7f226e616d65223a22000000000000000000000000000000000000000000000000600082015250565b7f7b2274726169745f74797065223a2022417574686f72222c202276616c75652260008201527f3a22000000000000000000000000000000000000000000000000000000000000602082015250565b7f544f4b454e5f0000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f22696d616765223a220000000000000000000000000000000000000000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f466c65656b4552433732313a206d75737420626520746f6b656e206f776e6572600082015250565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b7f2261747472696275746573223a205b0000000000000000000000000000000000600082015250565b7f226f776e6572223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f7b2274726169745f74797065223a2022454e53222c202276616c7565223a2200600082015250565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f7b2274726169745f74797065223a2022436f6d6d69742048617368222c20227660008201527f616c7565223a2200000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f466c65656b416363657373436f6e74726f6c3a206d757374206861766520636f60008201527f6c6c656374696f6e206f776e657220726f6c6500000000000000000000000000602082015250565b7f466c65656b416363657373436f6e74726f6c3a206d757374206861766520746f60008201527f6b656e20726f6c65000000000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6154ee81614a5d565b81146154f957600080fd5b50565b61550581614a6f565b811461551057600080fd5b50565b61551c81614a7b565b811461552757600080fd5b50565b61553381614a85565b811461553e57600080fd5b50565b61554a81614ad1565b811461555557600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205246882f1f7107874499f15cd7bbafb2b47fb926e7a8f78e5904c597b5cebf8b64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 414,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 416,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 424,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 428,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 434,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 24,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3248,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1899_storage"
      },
      {
        "astId": 3253,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_apps",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(App)3245_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(App)3245_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FleekERC721.App)",
        "numberOfBytes": "32",
        "value": "t_struct(App)3245_storage"
      },
      "t_mapping(t_uint256,t_struct(Build)3227_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FleekERC721.Build)",
        "numberOfBytes": "32",
        "value": "t_struct(Build)3227_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(App)3245_storage": {
        "encoding": "inplace",
        "label": "struct FleekERC721.App",
        "members": [
          {
            "astId": 3229,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3231,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3233,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3235,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "external_url",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3237,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "ENS",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3239,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "current_build",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3244,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "builds",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Build)3227_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Build)3227_storage": {
        "encoding": "inplace",
        "label": "struct FleekERC721.Build",
        "members": [
          {
            "astId": 3222,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "commit_hash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3224,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "git_repository",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3226,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "author",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Counter)1899_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1898,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
