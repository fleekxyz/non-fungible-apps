import React, { useState } from 'react';
import {
  Heading,
  Flex,
  Box,
  FormControl,
  FormLabel,
  Input,
  Button,
  FormErrorMessage,
  IconButton,
  useToast,
  UseToastOptions,
  Textarea,
  Checkbox,
} from '@chakra-ui/react';
import { Formik, Field } from 'formik';
import { ethers } from 'ethers';
import { ArrowBackIcon } from '@chakra-ui/icons';
import { useNavigate } from 'react-router-dom';
import './mint.css';

export const MintSite = () => {
  const toast = useToast();
  const navigate = useNavigate();
  const [autogeneratedImage, setAutogeneratedImage] = useState(false);

  const showToast = (
    title: string,
    description: string,
    status: UseToastOptions['status']
  ) => {
    toast({
      title,
      description,
      status,
      duration: 9000,
      isClosable: true,
    });
  };

  const getRepoAndCommit = (url: string) => {
    //TODO validate is a github url
    url = url.replace('/commit', '');
    const lastIndexSlash = url.lastIndexOf('/');
    const repo_hash = url
      .substring(0, lastIndexSlash + 1)
      .slice(0, lastIndexSlash);
    const commit_hash = url.substring(lastIndexSlash + 1, url.length);
    return { repo_hash, commit_hash };
  };

  const isValidUrl = (url: string) => {
    console.log('url', url);
    const regex =
      /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    console.log('isValid', regex.test(url));
    return regex.test(url);
  };

  return (
    <>
      <Flex width="full" align="center" justifyContent="center" mt="50px">
        <Box width="80%">
          <IconButton
            aria-label="back home"
            icon={<ArrowBackIcon />}
            onClick={() => navigate('/home')}
          />
          <Box textAlign="center">
            <Heading>Mint your Site</Heading>
          </Box>
          <Box my={4} textAlign="left">
            <Formik
              initialValues={{
                name: '',
                description: '',
                githubCommit: '',
                author: '',
                ownerAddress: '',
                controllerAddress: '',
                externalUrl: '',
                image: '',
                ens: '',
              }}
              onSubmit={(values, { setSubmitting }) => {
                const {
                  name,
                  description,
                  githubCommit,
                  author,
                  ownerAddress,
                  controllerAddress,
                  externalUrl,
                  image,
                  ens,
                } = values;

                const { repo_hash, commit_hash } =
                  getRepoAndCommit(githubCommit);

                try {
                  //TODO connect to the contract.
                  showToast(
                    'Success!',
                    'Your site has been minted.',
                    'success'
                  );
                } catch (err) {
                  showToast(
                    'Error!',
                    'We had an error while minting your site. Please try again later',
                    'error'
                  );
                }
                setSubmitting(false);
              }}
            >
              {({ values, touched, handleSubmit, isSubmitting, errors }) => (
                <form onSubmit={handleSubmit}>
                  <Box display="flex" flexDirection="row">
                    <FormControl
                      mr={5}
                      isRequired
                      isInvalid={touched.name && !values.name}
                    >
                      <FormLabel htmlFor="name">Name</FormLabel>
                      <Field as={Input} name="name" id="name" type="text" />
                    </FormControl>
                    <FormControl
                      isRequired
                      isInvalid={
                        touched.ownerAddress &&
                        (!values.ownerAddress ||
                          !ethers.utils.isAddress(values.ownerAddress))
                      }
                    >
                      <FormLabel htmlFor="ownerAddress">
                        Owner address
                      </FormLabel>
                      <Field
                        as={Input}
                        name="ownerAddress"
                        id="ownerAddress"
                        type="text"
                        validate={(value: string) => {
                          let error;
                          if (!value) error = 'Owner address cannot be empty';
                          else if (!ethers.utils.isAddress(value))
                            error = 'Owner address is not a valid address';

                          return error;
                        }}
                      />
                      <FormErrorMessage>{errors.ownerAddress}</FormErrorMessage>
                    </FormControl>
                  </Box>
                  <Box display="flex" flexDirection="row">
                    <Box width="container.md" mr={5}>
                      <FormControl
                        mt={6}
                        isRequired
                        isInvalid={touched.description && !values.description}
                      >
                        <FormLabel htmlFor="description">Description</FormLabel>
                        <Field name="description">
                          {() => <Textarea height={137} />}
                        </Field>
                      </FormControl>
                    </Box>
                    <Box width="container.md">
                      <FormControl pt={6}>
                        <FormLabel>Controller address</FormLabel>
                        <Input type="text" />
                      </FormControl>
                      <FormControl
                        mt={6}
                        isRequired
                        isInvalid={
                          touched.externalUrl &&
                          (!values.externalUrl ||
                            !isValidUrl(values.externalUrl))
                        }
                      >
                        <FormLabel htmlFor="externalUrl">
                          External url
                        </FormLabel>
                        <Field
                          as={Input}
                          name="externalUrl"
                          id="externalUrl"
                          type="externalUrl"
                          validate={(value: string) => {
                            if (!isValidUrl(value))
                              return 'External url is not a valid url';
                          }}
                        />
                        <FormErrorMessage>
                          {errors.externalUrl}
                        </FormErrorMessage>
                      </FormControl>
                    </Box>
                  </Box>
                  <Box display="flex" flexDirection="row">
                    <FormControl
                      mr={5}
                      mt={6}
                      isRequired
                      isInvalid={touched.githubCommit && !values.githubCommit}
                    >
                      <FormLabel htmlFor="githubCommit">
                        Github commit url
                      </FormLabel>
                      <Field
                        as={Input}
                        name="githubCommit"
                        id="githubCommit"
                        type="text"
                      />
                    </FormControl>
                    <FormControl mt={6}>
                      <Box display="flex" alignItems="flex-start">
                        <FormLabel htmlFor="image">Image</FormLabel>
                        <Checkbox
                          isChecked={autogeneratedImage}
                          onChange={() => {
                            setAutogeneratedImage((prevState) => !prevState);
                          }}
                        >
                          Autogenerate image
                        </Checkbox>
                      </Box>
                      <Field name="image" id="image">
                        {() => <Input type="file" />}
                      </Field>
                    </FormControl>
                  </Box>
                  <Box display="flex" flexDirection="row">
                    <FormControl
                      mr={5}
                      mt={6}
                      isInvalid={touched.author && !values.author}
                    >
                      <FormLabel htmlFor="author">Author</FormLabel>
                      <Field as={Input} name="author" id="author" type="text" />
                    </FormControl>
                    <FormControl
                      mt={6}
                      isRequired
                      isInvalid={touched.ens && !values.ens}
                    >
                      <FormLabel htmlFor="ens">ENS</FormLabel>
                      <Field as={Input} name="ens" id="ens" type="ens" />
                    </FormControl>
                  </Box>
                  <Button
                    width="full"
                    mt={4}
                    type="submit"
                    disabled={
                      isSubmitting ||
                      !(
                        !!values.name &&
                        !!values.description &&
                        !!values.githubCommit &&
                        !!values.ownerAddress &&
                        !!values.externalUrl &&
                        !!values.ens
                      )
                    }
                  >
                    Mint
                  </Button>
                </form>
              )}
            </Formik>
          </Box>
        </Box>
      </Flex>
    </>
  );
};

