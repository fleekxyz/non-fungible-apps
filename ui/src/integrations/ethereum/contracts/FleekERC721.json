{
  "address": "0x645BD6fB363510e8D047566626ef4534d8dfEE21",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "byAddress",
          "type": "address"
        }
      ],
      "name": "CollectionRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "byAddress",
          "type": "address"
        }
      ],
      "name": "CollectionRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "commitHash",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        }
      ],
      "name": "NewBuild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        }
      ],
      "name": "NewTokenDescription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "ENS",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        }
      ],
      "name": "NewTokenENS",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "externalURL",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        }
      ],
      "name": "NewTokenExternalURL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        }
      ],
      "name": "NewTokenImage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        }
      ],
      "name": "NewTokenName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "byAddress",
          "type": "address"
        }
      ],
      "name": "TokenRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "byAddress",
          "type": "address"
        }
      ],
      "name": "TokenRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "getCollectionRoleMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "getTokenRoleMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCollectionRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantTokenRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCollectionRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasTokenRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "externalURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ENS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "commitHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gitRepository",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCollectionRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum FleekAccessControl.Roles",
          "name": "role",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeTokenRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_commitHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_gitRepository",
          "type": "string"
        }
      ],
      "name": "setTokenBuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenDescription",
          "type": "string"
        }
      ],
      "name": "setTokenDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenENS",
          "type": "string"
        }
      ],
      "name": "setTokenENS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenExternalURL",
          "type": "string"
        }
      ],
      "name": "setTokenExternalURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenImage",
          "type": "string"
        }
      ],
      "name": "setTokenImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        }
      ],
      "name": "setTokenName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0fd5f90e880efa81c1bd2e80c996e96860126503b4782f1c3a16ef58ab8a2fd",
  "receipt": {
    "to": null,
    "from": "0x7ED735b7095C05d78dF169F991f2b7f1A1F1A049",
    "contractAddress": "0x645BD6fB363510e8D047566626ef4534d8dfEE21",
    "transactionIndex": 1,
    "gasUsed": "4978823",
    "logsBloom": "0x
    "blockHash": "0x49c25d0255cbd39b52994adf9201eec62aeeda0b6a1a605e2ae793dffa0e7175",
    "transactionHash": "0xf0fd5f90e880efa81c1bd2e80c996e96860126503b4782f1c3a16ef58ab8a2fd",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 29975815,
        "transactionHash": "0xf0fd5f90e880efa81c1bd2e80c996e96860126503b4782f1c3a16ef58ab8a2fd",
        "address": "0x645BD6fB363510e8D047566626ef4534d8dfEE21",
        "topics": [
          "0xcf081ed2b728e3115904be00eb8927b2375ff3401839b37f7accfa1bb2bee15c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ed735b7095c05d78df169f991f2b7f1a1f1a049"
        ],
        "data": "0x0000000000000000000000007ed735b7095c05d78df169f991f2b7f1a1f1a049",
        "logIndex": 4,
        "blockHash": "0x49c25d0255cbd39b52994adf9201eec62aeeda0b6a1a605e2ae793dffa0e7175"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 29975815,
        "transactionHash": "0xf0fd5f90e880efa81c1bd2e80c996e96860126503b4782f1c3a16ef58ab8a2fd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007ed735b7095c05d78df169f991f2b7f1a1f1a049",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001a8851d878c9000000000000000000000000000000000000000000000000000286b97bf2638bb80000000000000000000000000000000000000000000001320df3c8e740942c46000000000000000000000000000000000000000000000000026c312a19eac2b80000000000000000000000000000000000000000000001320e0e5139190cf546",
        "logIndex": 5,
        "blockHash": "0x49c25d0255cbd39b52994adf9201eec62aeeda0b6a1a605e2ae793dffa0e7175"
      }
    ],
    "blockNumber": 29975815,
    "cumulativeGasUsed": "5140072",
    "status": 1,
    "byzantium": true
  },
  "args": ["FleekSites", "FLKSITE"],
  "numDeployments": 2,
  "solcInputHash": "b88731ab6401d18abef5bd8425a23961",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"CollectionRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"CollectionRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"commitHash\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewBuild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ENS\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenENS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenExternalURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenImage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"TokenRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"TokenRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getCollectionRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getTokenRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCollectionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantTokenRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCollectionRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTokenRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ENS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"commitHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gitRepository\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCollectionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTokenRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_commitHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_gitRepository\",\"type\":\"string\"}],\"name\":\"setTokenBuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenDescription\",\"type\":\"string\"}],\"name\":\"setTokenDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenENS\",\"type\":\"string\"}],\"name\":\"setTokenENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenExternalURL\",\"type\":\"string\"}],\"name\":\"setTokenExternalURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenImage\",\"type\":\"string\"}],\"name\":\"setTokenImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns a previously minted `tokenId`. May emit a {Transfer} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenOwner` role.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCollectionRoleMembers(uint8)\":{\"details\":\"Returns an array of addresses that all have the collection role.\"},\"getTokenRoleMembers(uint256,uint8)\":{\"details\":\"Returns an array of addresses that all have the same token role for a certain tokenId.\"},\"grantCollectionRole(uint8,address)\":{\"details\":\"Grants the collection role to an address. Requirements: - the caller should have the collection role.\"},\"grantTokenRole(uint256,uint8,address)\":{\"details\":\"Grants the token role to an address. Requirements: - the caller should have the token role.\"},\"hasCollectionRole(uint8,address)\":{\"details\":\"Returns `True` if a certain address has the collection role.\"},\"hasTokenRole(uint256,uint8,address)\":{\"details\":\"Returns `True` if a certain address has the token role.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,string,string,string,string,string,string,string)\":{\"details\":\"Mints a token and returns a tokenId. If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event. Requirements: - the caller must have ``collectionOwner``'s admin role.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"revokeCollectionRole(uint8,address)\":{\"details\":\"Revokes the collection role of an address. Requirements: - the caller should have the collection role.\"},\"revokeTokenRole(uint256,uint8,address)\":{\"details\":\"Revokes the token role of an address. Requirements: - the caller should have the token role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setTokenBuild(uint256,string,string)\":{\"details\":\"Adds a new build to a minted `tokenId`'s builds mapping. May emit a {NewBuild} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenDescription(uint256,string)\":{\"details\":\"Updates the `description` metadata field of a minted `tokenId`. May emit a {NewTokenDescription} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenENS(uint256,string)\":{\"details\":\"Updates the `ENS` metadata field of a minted `tokenId`. May emit a {NewTokenENS} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenExternalURL(uint256,string)\":{\"details\":\"Updates the `externalURL` metadata field of a minted `tokenId`. May emit a {NewTokenExternalURL} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenImage(uint256,string)\":{\"details\":\"Updates the `image` metadata field of a minted `tokenId`. May emit a {NewTokenImage} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenName(uint256,string)\":{\"details\":\"Updates the `name` metadata field of a minted `tokenId`. May emit a {NewTokenName} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the token metadata associated with the `tokenId`. Returns a based64 encoded string value of the URI. Requirements: - the tokenId must be minted and valid.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FleekERC721.sol\":\"FleekERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/FleekAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract FleekAccessControl {\\n    using Counters for Counters.Counter;\\n\\n    enum Roles {\\n        Owner,\\n        Controller\\n    }\\n\\n    event TokenRoleGranted(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event TokenRoleRevoked(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleGranted(Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleRevoked(Roles indexed role, address indexed toAddress, address byAddress);\\n\\n    struct Role {\\n        mapping(address => uint256) indexes;\\n        address[] members;\\n    }\\n\\n    Counters.Counter private _collectionRolesVersion;\\n    // _collectionRoles[version][role]\\n    mapping(uint256 => mapping(Roles => Role)) private _collectionRoles;\\n\\n    mapping(uint256 => Counters.Counter) private _tokenRolesVersion;\\n    // _tokenRoles[tokenId][version][role]\\n    mapping(uint256 => mapping(uint256 => mapping(Roles => Role))) private _tokenRoles;\\n\\n    constructor() {\\n        _grantCollectionRole(Roles.Owner, msg.sender);\\n    }\\n\\n    modifier requireCollectionRole(Roles role) {\\n        require(\\n            hasCollectionRole(role, msg.sender) || hasCollectionRole(Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have collection role\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requireTokenRole(uint256 tokenId, Roles role) {\\n        require(\\n            hasTokenRole(tokenId, role, msg.sender) || hasTokenRole(tokenId, Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have token role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function grantCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _grantCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function grantTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _grantTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function revokeCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _revokeCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function revokeTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _revokeTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the collection role.\\n     */\\n    function hasCollectionRole(Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n\\n        return _collectionRoles[currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the token role.\\n     */\\n    function hasTokenRole(uint256 tokenId, Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the collection role.\\n     */\\n    function getCollectionRoleMembers(Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        return _collectionRoles[currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the same token role for a certain tokenId.\\n     */\\n    function getTokenRoleMembers(uint256 tokenId, Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     */\\n    function _grantCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _grantRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     */\\n    function _revokeCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _revokeRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     */\\n    function _grantTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _grantRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleGranted(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     */\\n    function _revokeTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _revokeRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleRevoked(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants a certain role to a certain address.\\n     */\\n    function _grantRole(Role storage role, address account) internal {\\n        if (role.indexes[account] == 0) {\\n            role.members.push(account);\\n            role.indexes[account] = role.members.length;\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes a certain role from a certain address.\\n     */\\n    function _revokeRole(Role storage role, address account) internal {\\n        if (role.indexes[account] != 0) {\\n            uint256 index = role.indexes[account] - 1;\\n            uint256 lastIndex = role.members.length - 1;\\n            address lastAccount = role.members[lastIndex];\\n\\n            role.members[index] = lastAccount;\\n            role.indexes[lastAccount] = index + 1;\\n\\n            role.members.pop();\\n            delete role.indexes[account];\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId.\\n     * Should only be used for burning tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId) internal {\\n        _tokenRolesVersion[tokenId].increment();\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId and grants the owner role to a new address.\\n     * Should only be used for transferring tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId, address newOwner) internal {\\n        _clearAllTokenRoles(tokenId);\\n        _grantTokenRole(tokenId, Roles.Owner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfe5a878a86e13f126add51ad06700ec7f5e597c1add7b62e76b26f6f8b72ed24\",\"license\":\"MIT\"},\"contracts/FleekERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./FleekAccessControl.sol\\\";\\n\\ncontract FleekERC721 is ERC721, FleekAccessControl {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    event NewBuild(uint256 indexed token, string indexed commitHash, address indexed triggeredBy);\\n    event NewTokenName(uint256 indexed token, string indexed name, address indexed triggeredBy);\\n    event NewTokenDescription(uint256 indexed token, string indexed description, address indexed triggeredBy);\\n    event NewTokenImage(uint256 indexed token, string indexed image, address indexed triggeredBy);\\n    event NewTokenExternalURL(uint256 indexed token, string indexed externalURL, address indexed triggeredBy);\\n    event NewTokenENS(uint256 indexed token, string indexed ENS, address indexed triggeredBy);\\n\\n    struct Build {\\n        string commitHash;\\n        string gitRepository;\\n    }\\n\\n    /**\\n     * The properties are stored as string to keep consistency with\\n     * other token contracts, we might consider changing for bytes32\\n     * in the future due to gas optimization\\n     */\\n    struct App {\\n        string name; // Name of the site\\n        string description; // Description about the site\\n        string image; // Preview Image IPFS Link\\n        string externalURL; // Site URL\\n        string ENS; // ENS ID\\n        uint256 currentBuild; // The current build number (Increments by one with each change, starts at zero)\\n        mapping(uint256 => Build) builds; // Mapping to build details for each build number\\n    }\\n\\n    Counters.Counter private _tokenIds;\\n    mapping(uint256 => App) private _apps;\\n\\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\\n\\n    modifier requireTokenOwner(uint256 tokenId) {\\n        require(msg.sender == ownerOf(tokenId), \\\"FleekERC721: must be token owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Mints a token and returns a tokenId.\\n     *\\n     * If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``collectionOwner``'s admin role.\\n     *\\n     */\\n    function mint(\\n        address to,\\n        string memory name,\\n        string memory description,\\n        string memory image,\\n        string memory externalURL,\\n        string memory ENS,\\n        string memory commitHash,\\n        string memory gitRepository\\n    ) public payable requireCollectionRole(Roles.Owner) returns (uint256) {\\n        uint256 tokenId = _tokenIds.current();\\n        _mint(to, tokenId);\\n        _tokenIds.increment();\\n\\n        App storage app = _apps[tokenId];\\n        app.name = name;\\n        app.description = description;\\n        app.image = image;\\n        app.externalURL = externalURL;\\n        app.ENS = ENS;\\n\\n        // The mint interaction is considered to be the first build of the site. Updates from now on all increment the currentBuild by one and update the mapping.\\n        app.currentBuild = 0;\\n        app.builds[0] = Build(commitHash, gitRepository);\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Returns the token metadata associated with the `tokenId`.\\n     *\\n     * Returns a based64 encoded string value of the URI.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     *\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n        address owner = ownerOf(tokenId);\\n        App storage app = _apps[tokenId];\\n\\n        // prettier-ignore\\n        bytes memory dataURI = abi.encodePacked(\\n            '{',\\n                '\\\"name\\\":\\\"', app.name, '\\\",',\\n                '\\\"description\\\":\\\"', app.description, '\\\",',\\n                '\\\"owner\\\":\\\"', Strings.toHexString(uint160(owner), 20), '\\\",',\\n                '\\\"external_url\\\":\\\"', app.externalURL, '\\\",',\\n                '\\\"image\\\":\\\"', app.image, '\\\",',\\n                '\\\"attributes\\\": [',\\n                    '{\\\"trait_type\\\": \\\"ENS\\\", \\\"value\\\":\\\"', app.ENS,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Commit Hash\\\", \\\"value\\\":\\\"', app.builds[app.currentBuild].commitHash,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Repository\\\", \\\"value\\\":\\\"', app.builds[app.currentBuild].gitRepository,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Version\\\", \\\"value\\\":\\\"', Strings.toString(app.currentBuild),'\\\"}',\\n                ']',\\n            '}'\\n        );\\n\\n        return string(abi.encodePacked(_baseURI(), Base64.encode((dataURI))));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Override of _beforeTokenTransfer of ERC721.\\n     * Here it needs to update the token controller roles for mint, burn and transfer.\\n     * IMPORTANT: The function for clearing token controllers is not implemented yet.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        if (from != address(0) && to != address(0)) {\\n            // Transfer\\n            _clearAllTokenRoles(tokenId, to);\\n        } else if (from == address(0)) {\\n            // Mint\\n            _grantTokenRole(tokenId, Roles.Owner, to);\\n        } else if (to == address(0)) {\\n            // Burn\\n            _clearAllTokenRoles(tokenId);\\n        }\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    /**\\n     * @dev A baseURI internal function implementation to be called in the `tokenURI` function.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return \\\"data:application/json;base64,\\\";\\n    }\\n\\n    /**\\n     * @dev Updates the `externalURL` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenExternalURL} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenExternalURL(\\n        uint256 tokenId,\\n        string memory _tokenExternalURL\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].externalURL = _tokenExternalURL;\\n        emit NewTokenExternalURL(tokenId, _tokenExternalURL, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `ENS` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenENS} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenENS(\\n        uint256 tokenId,\\n        string memory _tokenENS\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].ENS = _tokenENS;\\n        emit NewTokenENS(tokenId, _tokenENS, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `name` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenName} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenName(\\n        uint256 tokenId,\\n        string memory _tokenName\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].name = _tokenName;\\n        emit NewTokenName(tokenId, _tokenName, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `description` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenDescription} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenDescription(\\n        uint256 tokenId,\\n        string memory _tokenDescription\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].description = _tokenDescription;\\n        emit NewTokenDescription(tokenId, _tokenDescription, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `image` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenImage} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenImage(\\n        uint256 tokenId,\\n        string memory _tokenImage\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].image = _tokenImage;\\n        emit NewTokenImage(tokenId, _tokenImage, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Adds a new build to a minted `tokenId`'s builds mapping.\\n     *\\n     * May emit a {NewBuild} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenBuild(\\n        uint256 tokenId,\\n        string memory _commitHash,\\n        string memory _gitRepository\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].builds[++_apps[tokenId].currentBuild] = Build(_commitHash, _gitRepository);\\n        emit NewBuild(tokenId, _commitHash, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Burns a previously minted `tokenId`.\\n     *\\n     * May emit a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenOwner` role.\\n     *\\n     */\\n    function burn(uint256 tokenId) public virtual requireTokenRole(tokenId, Roles.Owner) {\\n        super._burn(tokenId);\\n\\n        if (bytes(_apps[tokenId].externalURL).length != 0) {\\n            delete _apps[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a13c1d1816e56a2aef81a4a5316f990e36a6886b11c09943501c75f4b3afa76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806364140ec0116100f7578063b42dbe3811610095578063cdb0e89e11610064578063cdb0e89e14610673578063e94472501461069c578063e985e9c5146106d9578063f931517714610716576101c2565b8063b42dbe38146105a0578063b543be12146105dd578063b88d4fde1461060d578063c87b56dd14610636576101c2565b80638c3c0a44116100d15780638c3c0a44146104fa57806395d89b4114610523578063a22cb4651461054e578063a27d0b2714610577576101c2565b806364140ec01461046b57806370a082311461049457806378278cca146104d1576101c2565b80632d957aad116101645780633806f1521161013e5780633806f152146103b357806342842e0e146103dc57806342966c68146104055780636352211e1461042e576101c2565b80632d957aad146103105780632f1e8f0a14610339578063353b07a414610376576101c2565b8063081812fc116101a0578063081812fc14610258578063095ea7b31461029557806323b872dd146102be578063246a908b146102e7576101c2565b806301468deb146101c757806301ffc9a7146101f057806306fdde031461022d575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190613ede565b61073f565b005b3480156101fc57600080fd5b5061021760048036038101906102129190613daa565b6107b1565b604051610224919061483b565b60405180910390f35b34801561023957600080fd5b506102426107c3565b60405161024f9190614856565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a9190613e71565b610855565b60405161028c91906147b2565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190613d6a565b61089b565b005b3480156102ca57600080fd5b506102e560048036038101906102e09190613ada565b6109b3565b005b3480156102f357600080fd5b5061030e60048036038101906103099190613f31565b610a13565b005b34801561031c57600080fd5b5061033760048036038101906103329190613e31565b610b07565b005b34801561034557600080fd5b50610360600480360381019061035b9190613e9e565b610b73565b60405161036d9190614819565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190613e04565b610c7e565b6040516103aa9190614819565b60405180910390f35b3480156103bf57600080fd5b506103da60048036038101906103d59190613f8d565b610d66565b005b3480156103e857600080fd5b5061040360048036038101906103fe9190613ada565b610ed1565b005b34801561041157600080fd5b5061042c60048036038101906104279190613e71565b610ef1565b005b34801561043a57600080fd5b5061045560048036038101906104509190613e71565b610ff8565b60405161046291906147b2565b60405180910390f35b34801561047757600080fd5b50610492600480360381019061048d9190613f31565b61107f565b005b3480156104a057600080fd5b506104bb60048036038101906104b69190613a6d565b611173565b6040516104c89190614a38565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f39190613f31565b61122b565b005b34801561050657600080fd5b50610521600480360381019061051c9190613e31565b61131f565b005b34801561052f57600080fd5b5061053861138b565b6040516105459190614856565b60405180910390f35b34801561055a57600080fd5b5061057560048036038101906105709190613bb0565b61141d565b005b34801561058357600080fd5b5061059e60048036038101906105999190613ede565b611433565b005b3480156105ac57600080fd5b506105c760048036038101906105c29190613ede565b6114a5565b6040516105d4919061483b565b60405180910390f35b6105f760048036038101906105f29190613bf0565b61156d565b6040516106049190614a38565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f9190613b2d565b611704565b005b34801561064257600080fd5b5061065d60048036038101906106589190613e71565b611766565b60405161066a9190614856565b60405180910390f35b34801561067f57600080fd5b5061069a60048036038101906106959190613f31565b611875565b005b3480156106a857600080fd5b506106c360048036038101906106be9190613e31565b611969565b6040516106d0919061483b565b60405180910390f35b3480156106e557600080fd5b5061070060048036038101906106fb9190613a9a565b611a0e565b60405161070d919061483b565b60405180910390f35b34801561072257600080fd5b5061073d60048036038101906107389190613f31565b611aa2565b005b82600061074d8282336114a5565b80610760575061075f826000336114a5565b5b61079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079690614a18565b60405180910390fd5b6107aa858585611ba4565b5050505050565b60006107bc82611c8d565b9050919050565b6060600080546107d290614d60565b80601f01602080910402602001604051908101604052809291908181526020018280546107fe90614d60565b801561084b5780601f106108205761010080835404028352916020019161084b565b820191906000526020600020905b81548152906001019060200180831161082e57829003601f168201915b5050505050905090565b600061086082611d6f565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108a682610ff8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e906149d8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610936611dba565b73ffffffffffffffffffffffffffffffffffffffff16148061096557506109648161095f611dba565b611a0e565b5b6109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b906149f8565b60405180910390fd5b6109ae8383611dc2565b505050565b6109c46109be611dba565b82611e7b565b610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa90614898565b60405180910390fd5b610a0e838383611f10565b505050565b816001610a218282336114a5565b80610a345750610a33826000336114a5565b5b610a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6a90614a18565b60405180910390fd5b610a7c84611d6f565b82600b60008681526020019081526020016000206001019080519060200190610aa692919061382c565b503373ffffffffffffffffffffffffffffffffffffffff1683604051610acc9190614606565b6040518091039020857fd771eaa1c1382b0a9867125fcd921fdeddd211538b5381353a877abfbe3b50a460405160405180910390a450505050565b6000610b138133611969565b80610b255750610b24600033611969565b5b610b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5b90614918565b60405180910390fd5b610b6e838361220a565b505050565b60606000610b9260086000868152602001908152602001600020611b96565b90506009600085815260200190815260200160002060008281526020019081526020016000206000846001811115610bcd57610bcc614e6a565b5b6001811115610bdf57610bde614e6a565b5b8152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610c7057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c26575b505050505091505092915050565b60606000610c8c6006611b96565b9050600760008281526020019081526020016000206000846001811115610cb657610cb5614e6a565b5b6001811115610cc857610cc7614e6a565b5b8152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610d5957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d0f575b5050505050915050919050565b826001610d748282336114a5565b80610d875750610d86826000336114a5565b5b610dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbd90614a18565b60405180910390fd5b610dcf85611d6f565b604051806040016040528085815260200184815250600b60008781526020019081526020016000206006016000600b600089815260200190815260200160002060050160008154610e1f90614dc3565b91905081905581526020019081526020016000206000820151816000019080519060200190610e4f92919061382c565b506020820151816001019080519060200190610e6c92919061382c565b509050503373ffffffffffffffffffffffffffffffffffffffff1684604051610e959190614606565b6040518091039020867f73b929bf4db6be678cdbc6d41a5fe0a2cbb84ca95572062c4a978d8bd80a41b160405160405180910390a45050505050565b610eec83838360405180602001604052806000815250611704565b505050565b806000610eff8282336114a5565b80610f125750610f11826000336114a5565b5b610f51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4890614a18565b60405180910390fd5b610f5a836122cf565b6000600b60008581526020019081526020016000206003018054610f7d90614d60565b905014610ff357600b600084815260200190815260200160002060008082016000610fa891906138b2565b600182016000610fb891906138b2565b600282016000610fc891906138b2565b600382016000610fd891906138b2565b600482016000610fe891906138b2565b600582016000905550505b505050565b6000806110048361241d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106d906149b8565b60405180910390fd5b80915050919050565b81600161108d8282336114a5565b806110a0575061109f826000336114a5565b5b6110df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d690614a18565b60405180910390fd5b6110e884611d6f565b82600b6000868152602001908152602001600020600201908051906020019061111292919061382c565b503373ffffffffffffffffffffffffffffffffffffffff16836040516111389190614606565b6040518091039020857f80f081796a13b5a4269815447e37462c5739a69ea7f1460301b595e0c4003d8360405160405180910390a450505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111db90614978565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b8160016112398282336114a5565b8061124c575061124b826000336114a5565b5b61128b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128290614a18565b60405180910390fd5b61129484611d6f565b82600b600086815260200190815260200160002060040190805190602001906112be92919061382c565b503373ffffffffffffffffffffffffffffffffffffffff16836040516112e49190614606565b6040518091039020857f91ce7fcd4462481791c3fe849f7049373c5b43ef44aed48e7f1ecce781586e1560405160405180910390a450505050565b600061132b8133611969565b8061133d575061133c600033611969565b5b61137c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137390614918565b60405180910390fd5b611386838361245a565b505050565b60606001805461139a90614d60565b80601f01602080910402602001604051908101604052809291908181526020018280546113c690614d60565b80156114135780601f106113e857610100808354040283529160200191611413565b820191906000526020600020905b8154815290600101906020018083116113f657829003601f168201915b5050505050905090565b61142f611428611dba565b838361251f565b5050565b8260006114418282336114a5565b806114545750611453826000336114a5565b5b611493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148a90614a18565b60405180910390fd5b61149e85858561268c565b5050505050565b6000806114c360086000878152602001908152602001600020611b96565b905060006009600087815260200190815260200160002060008381526020019081526020016000206000866001811115611500576114ff614e6a565b5b600181111561151257611511614e6a565b5b815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414159150509392505050565b60008061157a8133611969565b8061158c575061158b600033611969565b5b6115cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c290614918565b60405180910390fd5b60006115d7600a611b96565b90506115e38b82612775565b6115ed600a612993565b6000600b600083815260200190815260200160002090508a81600001908051906020019061161c92919061382c565b508981600101908051906020019061163592919061382c565b508881600201908051906020019061164e92919061382c565b508781600301908051906020019061166792919061382c565b508681600401908051906020019061168092919061382c565b506000816005018190555060405180604001604052808781526020018681525081600601600080815260200190815260200160002060008201518160000190805190602001906116d192919061382c565b5060208201518160010190805190602001906116ee92919061382c565b5090505081935050505098975050505050505050565b61171561170f611dba565b83611e7b565b611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174b90614898565b60405180910390fd5b611760848484846129a9565b50505050565b606061177182611d6f565b600061177c83610ff8565b90506000600b60008581526020019081526020016000209050600081600001826001016117c08573ffffffffffffffffffffffffffffffffffffffff166014612a05565b846003018560020186600401876006016000896005015481526020019081526020016000206000018860060160008a6005015481526020019081526020016000206001016118118a60050154612c41565b60405160200161182999989796959493929190614641565b6040516020818303038152906040529050611842612d19565b61184b82612d56565b60405160200161185c92919061461d565b6040516020818303038152906040529350505050919050565b8160016118838282336114a5565b806118965750611895826000336114a5565b5b6118d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cc90614a18565b60405180910390fd5b6118de84611d6f565b82600b6000868152602001908152602001600020600001908051906020019061190892919061382c565b503373ffffffffffffffffffffffffffffffffffffffff168360405161192e9190614606565b6040518091039020857ffbbfca16a2770c7ca6e7063ab1a7eea5fe441ffef818325db51752066a6b128a60405160405180910390a450505050565b6000806119766006611b96565b905060006007600083815260200190815260200160002060008660018111156119a2576119a1614e6a565b5b60018111156119b4576119b3614e6a565b5b815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141591505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b816001611ab08282336114a5565b80611ac35750611ac2826000336114a5565b5b611b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af990614a18565b60405180910390fd5b611b0b84611d6f565b82600b60008681526020019081526020016000206003019080519060200190611b3592919061382c565b503373ffffffffffffffffffffffffffffffffffffffff1683604051611b5b9190614606565b6040518091039020857fedbf1209b3baa7c1b5c43052ce5c511e243b3241d9f67733141d14f1da88cba160405160405180910390a450505050565b600081600001549050919050565b6000611bc160086000868152602001908152602001600020611b96565b9050611c256009600086815260200190815260200160002060008381526020019081526020016000206000856001811115611bff57611bfe614e6a565b5b6001811115611c1157611c10614e6a565b5b815260200190815260200160002083612eba565b8173ffffffffffffffffffffffffffffffffffffffff16836001811115611c4f57611c4e614e6a565b5b857fe52d746e4c78c98c6bfa291b273406905c3e8550b7d911a6bea686368c2dc79d33604051611c7f91906147b2565b60405180910390a450505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611d5857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611d685750611d67826130f9565b5b9050919050565b611d7881613163565b611db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dae906149b8565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611e3583610ff8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611e8783610ff8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ec95750611ec88185611a0e565b5b80611f0757508373ffffffffffffffffffffffffffffffffffffffff16611eef84610855565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f3082610ff8565b73ffffffffffffffffffffffffffffffffffffffff1614611f86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7d906148d8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fed90614938565b60405180910390fd5b61200383838360016131a4565b8273ffffffffffffffffffffffffffffffffffffffff1661202382610ff8565b73ffffffffffffffffffffffffffffffffffffffff1614612079576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612070906148d8565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461220583838360016132bb565b505050565b60006122166006611b96565b905061226960076000838152602001908152602001600020600085600181111561224357612242614e6a565b5b600181111561225557612254614e6a565b5b8152602001908152602001600020836132c1565b8173ffffffffffffffffffffffffffffffffffffffff1683600181111561229357612292614e6a565b5b7fcf081ed2b728e3115904be00eb8927b2375ff3401839b37f7accfa1bb2bee15c336040516122c291906147b2565b60405180910390a3505050565b60006122da82610ff8565b90506122ea8160008460016131a4565b6122f382610ff8565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46124198160008460016132bb565b5050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006124666006611b96565b90506124b960076000838152602001908152602001600020600085600181111561249357612492614e6a565b5b60018111156124a5576124a4614e6a565b5b815260200190815260200160002083612eba565b8173ffffffffffffffffffffffffffffffffffffffff168360018111156124e3576124e2614e6a565b5b7faeff57f0f5e4d3d10a37d4a70fde8ed67a95e67b251d5c512c0ea98c380d2f953360405161251291906147b2565b60405180910390a3505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561258e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258590614958565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161267f919061483b565b60405180910390a3505050565b60006126a960086000868152602001908152602001600020611b96565b905061270d60096000868152602001908152602001600020600083815260200190815260200160002060008560018111156126e7576126e6614e6a565b5b60018111156126f9576126f8614e6a565b5b8152602001908152602001600020836132c1565b8173ffffffffffffffffffffffffffffffffffffffff1683600181111561273757612736614e6a565b5b857f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c2393360405161276791906147b2565b60405180910390a450505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127dc90614998565b60405180910390fd5b6127ee81613163565b1561282e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612825906148f8565b60405180910390fd5b61283c6000838360016131a4565b61284581613163565b15612885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287c906148f8565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461298f6000838360016132bb565b5050565b6001816000016000828254019250508190555050565b6129b4848484611f10565b6129c0848484846133c2565b6129ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f6906148b8565b60405180910390fd5b50505050565b606060006002836002612a189190614bf2565b612a229190614b6b565b67ffffffffffffffff811115612a3b57612a3a614f26565b5b6040519080825280601f01601f191660200182016040528015612a6d5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612aa557612aa4614ef7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612b0957612b08614ef7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612b499190614bf2565b612b539190614b6b565b90505b6001811115612bf3577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612b9557612b94614ef7565b5b1a60f81b828281518110612bac57612bab614ef7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612bec90614d36565b9050612b56565b5060008414612c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2e90614878565b60405180910390fd5b8091505092915050565b606060006001612c5084613559565b01905060008167ffffffffffffffff811115612c6f57612c6e614f26565b5b6040519080825280601f01601f191660200182016040528015612ca15781602001600182028036833780820191505090505b509050600082602001820190505b600115612d0e578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612cf857612cf7614e3b565b5b0494506000851415612d0957612d0e565b612caf565b819350505050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b6060600082511415612d7957604051806020016040528060008152509050612eb5565b600060405180606001604052806040815260200161567d6040913990506000600360028551612da89190614b6b565b612db29190614bc1565b6004612dbe9190614bf2565b67ffffffffffffffff811115612dd757612dd6614f26565b5b6040519080825280601f01601f191660200182016040528015612e095781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015612e75576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050612e1a565b5050600386510660018114612e915760028114612ea457612eac565b603d6001830353603d6002830353612eac565b603d60018303535b50505080925050505b919050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146130f557600060018360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f539190614c4c565b9050600060018460010180549050612f6b9190614c4c565b90506000846001018281548110612f8557612f84614ef7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080856001018481548110612fc957612fc8614ef7565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018361301e9190614b6b565b8560000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460010180548061307757613076614ec8565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050505b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166131858361241d565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561320e5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156132225761321d82846136ac565b6132a9565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613268576132638260008561268c565b6132a8565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156132a7576132a6826136c5565b5b5b5b6132b5848484846136e3565b50505050565b50505050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156133be5781600101819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b60006133e38473ffffffffffffffffffffffffffffffffffffffff16613809565b1561354c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261340c611dba565b8786866040518563ffffffff1660e01b815260040161342e94939291906147cd565b602060405180830381600087803b15801561344857600080fd5b505af192505050801561347957506040513d601f19601f820116820180604052508101906134769190613dd7565b60015b6134fc573d80600081146134a9576040519150601f19603f3d011682016040523d82523d6000602084013e6134ae565b606091505b506000815114156134f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134eb906148b8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613551565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106135b7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816135ad576135ac614e3b565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106135f4576d04ee2d6d415b85acef810000000083816135ea576135e9614e3b565b5b0492506020810190505b662386f26fc10000831061362357662386f26fc10000838161361957613618614e3b565b5b0492506010810190505b6305f5e100831061364c576305f5e100838161364257613641614e3b565b5b0492506008810190505b612710831061367157612710838161366757613666614e3b565b5b0492506004810190505b60648310613694576064838161368a57613689614e3b565b5b0492506002810190505b600a83106136a3576001810190505b80915050919050565b6136b5826136c5565b6136c18260008361268c565b5050565b6136e060086000838152602001908152602001600020612993565b50565b600181111561380357600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146137775780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461376f9190614c4c565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146138025780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546137fa9190614b6b565b925050819055505b5b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461383890614d60565b90600052602060002090601f01602090048101928261385a57600085556138a1565b82601f1061387357805160ff19168380011785556138a1565b828001600101855582156138a1579182015b828111156138a0578251825591602001919060010190613885565b5b5090506138ae91906138f2565b5090565b5080546138be90614d60565b6000825580601f106138d057506138ef565b601f0160209004906000526020600020908101906138ee91906138f2565b5b50565b5b8082111561390b5760008160009055506001016138f3565b5090565b600061392261391d84614a78565b614a53565b90508281526020810184848401111561393e5761393d614f5a565b5b613949848285614cf4565b509392505050565b600061396461395f84614aa9565b614a53565b9050828152602081018484840111156139805761397f614f5a565b5b61398b848285614cf4565b509392505050565b6000813590506139a281615610565b92915050565b6000813590506139b781615627565b92915050565b6000813590506139cc8161563e565b92915050565b6000815190506139e18161563e565b92915050565b600082601f8301126139fc576139fb614f55565b5b8135613a0c84826020860161390f565b91505092915050565b600081359050613a2481615655565b92915050565b600082601f830112613a3f57613a3e614f55565b5b8135613a4f848260208601613951565b91505092915050565b600081359050613a6781615665565b92915050565b600060208284031215613a8357613a82614f64565b5b6000613a9184828501613993565b91505092915050565b60008060408385031215613ab157613ab0614f64565b5b6000613abf85828601613993565b9250506020613ad085828601613993565b9150509250929050565b600080600060608486031215613af357613af2614f64565b5b6000613b0186828701613993565b9350506020613b1286828701613993565b9250506040613b2386828701613a58565b9150509250925092565b60008060008060808587031215613b4757613b46614f64565b5b6000613b5587828801613993565b9450506020613b6687828801613993565b9350506040613b7787828801613a58565b925050606085013567ffffffffffffffff811115613b9857613b97614f5f565b5b613ba4878288016139e7565b91505092959194509250565b60008060408385031215613bc757613bc6614f64565b5b6000613bd585828601613993565b9250506020613be6858286016139a8565b9150509250929050565b600080600080600080600080610100898b031215613c1157613c10614f64565b5b6000613c1f8b828c01613993565b985050602089013567ffffffffffffffff811115613c4057613c3f614f5f565b5b613c4c8b828c01613a2a565b975050604089013567ffffffffffffffff811115613c6d57613c6c614f5f565b5b613c798b828c01613a2a565b965050606089013567ffffffffffffffff811115613c9a57613c99614f5f565b5b613ca68b828c01613a2a565b955050608089013567ffffffffffffffff811115613cc757613cc6614f5f565b5b613cd38b828c01613a2a565b94505060a089013567ffffffffffffffff811115613cf457613cf3614f5f565b5b613d008b828c01613a2a565b93505060c089013567ffffffffffffffff811115613d2157613d20614f5f565b5b613d2d8b828c01613a2a565b92505060e089013567ffffffffffffffff811115613d4e57613d4d614f5f565b5b613d5a8b828c01613a2a565b9150509295985092959890939650565b60008060408385031215613d8157613d80614f64565b5b6000613d8f85828601613993565b9250506020613da085828601613a58565b9150509250929050565b600060208284031215613dc057613dbf614f64565b5b6000613dce848285016139bd565b91505092915050565b600060208284031215613ded57613dec614f64565b5b6000613dfb848285016139d2565b91505092915050565b600060208284031215613e1a57613e19614f64565b5b6000613e2884828501613a15565b91505092915050565b60008060408385031215613e4857613e47614f64565b5b6000613e5685828601613a15565b9250506020613e6785828601613993565b9150509250929050565b600060208284031215613e8757613e86614f64565b5b6000613e9584828501613a58565b91505092915050565b60008060408385031215613eb557613eb4614f64565b5b6000613ec385828601613a58565b9250506020613ed485828601613a15565b9150509250929050565b600080600060608486031215613ef757613ef6614f64565b5b6000613f0586828701613a58565b9350506020613f1686828701613a15565b9250506040613f2786828701613993565b9150509250925092565b60008060408385031215613f4857613f47614f64565b5b6000613f5685828601613a58565b925050602083013567ffffffffffffffff811115613f7757613f76614f5f565b5b613f8385828601613a2a565b9150509250929050565b600080600060608486031215613fa657613fa5614f64565b5b6000613fb486828701613a58565b935050602084013567ffffffffffffffff811115613fd557613fd4614f5f565b5b613fe186828701613a2a565b925050604084013567ffffffffffffffff81111561400257614001614f5f565b5b61400e86828701613a2a565b9150509250925092565b60006140248383614030565b60208301905092915050565b61403981614c80565b82525050565b61404881614c80565b82525050565b600061405982614aff565b6140638185614b2d565b935061406e83614ada565b8060005b8381101561409f5781516140868882614018565b975061409183614b20565b925050600181019050614072565b5085935050505092915050565b6140b581614c92565b82525050565b60006140c682614b0a565b6140d08185614b3e565b93506140e0818560208601614d03565b6140e981614f69565b840191505092915050565b60006140ff82614b15565b6141098185614b4f565b9350614119818560208601614d03565b61412281614f69565b840191505092915050565b600061413882614b15565b6141428185614b60565b9350614152818560208601614d03565b80840191505092915050565b6000815461416b81614d60565b6141758186614b60565b9450600182166000811461419057600181146141a1576141d4565b60ff198316865281860193506141d4565b6141aa85614aea565b60005b838110156141cc578154818901526001820191506020810190506141ad565b838801955050505b50505092915050565b60006141ea602083614b4f565b91506141f582614f7a565b602082019050919050565b600061420d602d83614b4f565b915061421882614fa3565b604082019050919050565b6000614230601083614b60565b915061423b82614ff2565b601082019050919050565b6000614253603283614b4f565b915061425e8261501b565b604082019050919050565b6000614276600f83614b60565b91506142818261506a565b600f82019050919050565b6000614299600283614b60565b91506142a482615093565b600282019050919050565b60006142bc602583614b4f565b91506142c7826150bc565b604082019050919050565b60006142df602383614b60565b91506142ea8261510b565b602382019050919050565b6000614302601c83614b4f565b915061430d8261515a565b602082019050919050565b6000614325600383614b60565b915061433082615183565b600382019050919050565b6000614348602d83614b4f565b9150614353826151ac565b604082019050919050565b600061436b602483614b4f565b9150614376826151fb565b604082019050919050565b600061438e601983614b4f565b91506143998261524a565b602082019050919050565b60006143b1602683614b60565b91506143bc82615273565b602682019050919050565b60006143d4600883614b60565b91506143df826152c2565b600882019050919050565b60006143f7602983614b4f565b9150614402826152eb565b604082019050919050565b600061441a600983614b60565b91506144258261533a565b600982019050919050565b600061443d600283614b60565b915061444882615363565b600282019050919050565b6000614460602083614b4f565b915061446b8261538c565b602082019050919050565b6000614483600183614b60565b915061448e826153b5565b600182019050919050565b60006144a6600183614b60565b91506144b1826153de565b600182019050919050565b60006144c9600f83614b60565b91506144d482615407565b600f82019050919050565b60006144ec600983614b60565b91506144f782615430565b600982019050919050565b600061450f601883614b4f565b915061451a82615459565b602082019050919050565b6000614532601f83614b60565b915061453d82615482565b601f82019050919050565b6000614555600183614b60565b9150614560826154ab565b600182019050919050565b6000614578602183614b4f565b9150614583826154d4565b604082019050919050565b600061459b602783614b60565b91506145a682615523565b602782019050919050565b60006145be603d83614b4f565b91506145c982615572565b604082019050919050565b60006145e1602883614b4f565b91506145ec826155c1565b604082019050919050565b61460081614cea565b82525050565b6000614612828461412d565b915081905092915050565b6000614629828561412d565b9150614635828461412d565b91508190509392505050565b600061464c82614499565b9150614657826143c7565b9150614663828c61415e565b915061466e8261428c565b915061467982614269565b9150614685828b61415e565b91506146908261428c565b915061469b826144df565b91506146a7828a61412d565b91506146b28261428c565b91506146bd82614223565b91506146c9828961415e565b91506146d48261428c565b91506146df8261440d565b91506146eb828861415e565b91506146f68261428c565b9150614701826144bc565b915061470c82614525565b9150614718828761415e565b915061472382614318565b915061472e8261458e565b915061473a828661415e565b915061474582614318565b9150614750826143a4565b915061475c828561415e565b915061476782614318565b9150614772826142d2565b915061477e828461412d565b915061478982614430565b915061479482614548565b915061479f82614476565b91508190509a9950505050505050505050565b60006020820190506147c7600083018461403f565b92915050565b60006080820190506147e2600083018761403f565b6147ef602083018661403f565b6147fc60408301856145f7565b818103606083015261480e81846140bb565b905095945050505050565b60006020820190508181036000830152614833818461404e565b905092915050565b600060208201905061485060008301846140ac565b92915050565b6000602082019050818103600083015261487081846140f4565b905092915050565b60006020820190508181036000830152614891816141dd565b9050919050565b600060208201905081810360008301526148b181614200565b9050919050565b600060208201905081810360008301526148d181614246565b9050919050565b600060208201905081810360008301526148f1816142af565b9050919050565b60006020820190508181036000830152614911816142f5565b9050919050565b600060208201905081810360008301526149318161433b565b9050919050565b600060208201905081810360008301526149518161435e565b9050919050565b6000602082019050818103600083015261497181614381565b9050919050565b60006020820190508181036000830152614991816143ea565b9050919050565b600060208201905081810360008301526149b181614453565b9050919050565b600060208201905081810360008301526149d181614502565b9050919050565b600060208201905081810360008301526149f18161456b565b9050919050565b60006020820190508181036000830152614a11816145b1565b9050919050565b60006020820190508181036000830152614a31816145d4565b9050919050565b6000602082019050614a4d60008301846145f7565b92915050565b6000614a5d614a6e565b9050614a698282614d92565b919050565b6000604051905090565b600067ffffffffffffffff821115614a9357614a92614f26565b5b614a9c82614f69565b9050602081019050919050565b600067ffffffffffffffff821115614ac457614ac3614f26565b5b614acd82614f69565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614b7682614cea565b9150614b8183614cea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614bb657614bb5614e0c565b5b828201905092915050565b6000614bcc82614cea565b9150614bd783614cea565b925082614be757614be6614e3b565b5b828204905092915050565b6000614bfd82614cea565b9150614c0883614cea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c4157614c40614e0c565b5b828202905092915050565b6000614c5782614cea565b9150614c6283614cea565b925082821015614c7557614c74614e0c565b5b828203905092915050565b6000614c8b82614cca565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614d21578082015181840152602081019050614d06565b83811115614d30576000848401525b50505050565b6000614d4182614cea565b91506000821415614d5557614d54614e0c565b5b600182039050919050565b60006002820490506001821680614d7857607f821691505b60208210811415614d8c57614d8b614e99565b5b50919050565b614d9b82614f69565b810181811067ffffffffffffffff82111715614dba57614db9614f26565b5b80604052505050565b6000614dce82614cea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614e0157614e00614e0c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f2265787465726e616c5f75726c223a2200000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f226465736372697074696f6e223a220000000000000000000000000000000000600082015250565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f7b2274726169745f74797065223a202256657273696f6e222c202276616c756560008201527f223a220000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f227d2c0000000000000000000000000000000000000000000000000000000000600082015250565b7f466c65656b416363657373436f6e74726f6c3a206d757374206861766520636f60008201527f6c6c656374696f6e20726f6c6500000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f7b2274726169745f74797065223a20225265706f7369746f7279222c2022766160008201527f6c7565223a220000000000000000000000000000000000000000000000000000602082015250565b7f226e616d65223a22000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f22696d616765223a220000000000000000000000000000000000000000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b7f2261747472696275746573223a205b0000000000000000000000000000000000600082015250565b7f226f776e6572223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f7b2274726169745f74797065223a2022454e53222c202276616c7565223a2200600082015250565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f7b2274726169745f74797065223a2022436f6d6d69742048617368222c20227660008201527f616c7565223a2200000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b7f466c65656b416363657373436f6e74726f6c3a206d757374206861766520746f60008201527f6b656e20726f6c65000000000000000000000000000000000000000000000000602082015250565b61561981614c80565b811461562457600080fd5b50565b61563081614c92565b811461563b57600080fd5b50565b61564781614c9e565b811461565257600080fd5b50565b6002811061566257600080fd5b50565b61566e81614cea565b811461567957600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202ad793148892cb17843bc8ddfc8da3cf80fb0141adeabdb33bfc6d87fe628c9b64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns a previously minted `tokenId`. May emit a {Transfer} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenOwner` role."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCollectionRoleMembers(uint8)": {
        "details": "Returns an array of addresses that all have the collection role."
      },
      "getTokenRoleMembers(uint256,uint8)": {
        "details": "Returns an array of addresses that all have the same token role for a certain tokenId."
      },
      "grantCollectionRole(uint8,address)": {
        "details": "Grants the collection role to an address. Requirements: - the caller should have the collection role."
      },
      "grantTokenRole(uint256,uint8,address)": {
        "details": "Grants the token role to an address. Requirements: - the caller should have the token role."
      },
      "hasCollectionRole(uint8,address)": {
        "details": "Returns `True` if a certain address has the collection role."
      },
      "hasTokenRole(uint256,uint8,address)": {
        "details": "Returns `True` if a certain address has the token role."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,string,string,string,string,string,string,string)": {
        "details": "Mints a token and returns a tokenId. If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event. Requirements: - the caller must have ``collectionOwner``'s admin role."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "revokeCollectionRole(uint8,address)": {
        "details": "Revokes the collection role of an address. Requirements: - the caller should have the collection role."
      },
      "revokeTokenRole(uint256,uint8,address)": {
        "details": "Revokes the token role of an address. Requirements: - the caller should have the token role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setTokenBuild(uint256,string,string)": {
        "details": "Adds a new build to a minted `tokenId`'s builds mapping. May emit a {NewBuild} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
      },
      "setTokenDescription(uint256,string)": {
        "details": "Updates the `description` metadata field of a minted `tokenId`. May emit a {NewTokenDescription} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
      },
      "setTokenENS(uint256,string)": {
        "details": "Updates the `ENS` metadata field of a minted `tokenId`. May emit a {NewTokenENS} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
      },
      "setTokenExternalURL(uint256,string)": {
        "details": "Updates the `externalURL` metadata field of a minted `tokenId`. May emit a {NewTokenExternalURL} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
      },
      "setTokenImage(uint256,string)": {
        "details": "Updates the `image` metadata field of a minted `tokenId`. May emit a {NewTokenImage} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
      },
      "setTokenName(uint256,string)": {
        "details": "Updates the `name` metadata field of a minted `tokenId`. May emit a {NewTokenName} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Returns the token metadata associated with the `tokenId`. Returns a based64 encoded string value of the URI. Requirements: - the tokenId must be minted and valid."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2715,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_collectionRolesVersion",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)1510_storage"
      },
      {
        "astId": 2723,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_collectionRoles",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))"
      },
      {
        "astId": 2728,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_tokenRolesVersion",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Counter)1510_storage)"
      },
      {
        "astId": 2738,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_tokenRoles",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)))"
      },
      {
        "astId": 3377,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)1510_storage"
      },
      {
        "astId": 3382,
        "contract": "contracts/FleekERC721.sol:FleekERC721",
        "label": "_apps",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(App)3374_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Roles)2664": {
        "encoding": "inplace",
        "label": "enum FleekAccessControl.Roles",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Roles)2664",
        "label": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)2712_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))"
      },
      "t_mapping(t_uint256,t_struct(App)3374_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FleekERC721.App)",
        "numberOfBytes": "32",
        "value": "t_struct(App)3374_storage"
      },
      "t_mapping(t_uint256,t_struct(Build)3356_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FleekERC721.Build)",
        "numberOfBytes": "32",
        "value": "t_struct(Build)3356_storage"
      },
      "t_mapping(t_uint256,t_struct(Counter)1510_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1510_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(App)3374_storage": {
        "encoding": "inplace",
        "label": "struct FleekERC721.App",
        "members": [
          {
            "astId": 3358,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3360,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3362,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3364,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "externalURL",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3366,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "ENS",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3368,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "currentBuild",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3373,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "builds",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Build)3356_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Build)3356_storage": {
        "encoding": "inplace",
        "label": "struct FleekERC721.Build",
        "members": [
          {
            "astId": 3353,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "commitHash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3355,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "gitRepository",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)1510_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1509,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Role)2712_storage": {
        "encoding": "inplace",
        "label": "struct FleekAccessControl.Role",
        "members": [
          {
            "astId": 2708,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "indexes",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2711,
            "contract": "contracts/FleekERC721.sol:FleekERC721",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
