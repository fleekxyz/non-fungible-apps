{
  "id": "0a46779e28a7033b2a044322b9c212ac",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.12",
  "solcLongVersion": "0.8.12+commit.f00d7308",
  "input": {
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Base64.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Counters.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "@openzeppelin/contracts/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
      },
      "contracts/FleekAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract FleekAccessControl {\n    using Counters for Counters.Counter;\n\n    enum Roles {\n        Owner,\n        Controller\n    }\n\n    event TokenRoleGranted(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\n    event TokenRoleRevoked(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\n    event CollectionRoleGranted(Roles indexed role, address indexed toAddress, address byAddress);\n    event CollectionRoleRevoked(Roles indexed role, address indexed toAddress, address byAddress);\n\n    struct Role {\n        mapping(address => uint256) indexes;\n        address[] members;\n    }\n\n    Counters.Counter private _collectionRolesVersion;\n    // _collectionRoles[version][role]\n    mapping(uint256 => mapping(Roles => Role)) private _collectionRoles;\n\n    mapping(uint256 => Counters.Counter) private _tokenRolesVersion;\n    // _tokenRoles[tokenId][version][role]\n    mapping(uint256 => mapping(uint256 => mapping(Roles => Role))) private _tokenRoles;\n\n    /**\n     * @dev Initializes the contract by granting the `Owner` role to the deployer.\n     */\n    constructor() {\n        _grantCollectionRole(Roles.Owner, msg.sender);\n    }\n\n    /**\n     * @dev Checks if the `msg.sender` has a certain role.\n     */\n    modifier requireCollectionRole(Roles role) {\n        require(\n            hasCollectionRole(role, msg.sender) || hasCollectionRole(Roles.Owner, msg.sender),\n            \"FleekAccessControl: must have collection role\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Checks if the `msg.sender` has the `Token` role for a certain `tokenId`.\n     */\n    modifier requireTokenRole(uint256 tokenId, Roles role) {\n        require(\n            hasTokenRole(tokenId, role, msg.sender) || hasTokenRole(tokenId, Roles.Owner, msg.sender),\n            \"FleekAccessControl: must have token role\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Grants the collection role to an address.\n     *\n     * Requirements:\n     *\n     * - the caller should have the collection role.\n     *\n     */\n    function grantCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\n        _grantCollectionRole(role, account);\n    }\n\n    /**\n     * @dev Grants the token role to an address.\n     *\n     * Requirements:\n     *\n     * - the caller should have the token role.\n     *\n     */\n    function grantTokenRole(\n        uint256 tokenId,\n        Roles role,\n        address account\n    ) public requireTokenRole(tokenId, Roles.Owner) {\n        _grantTokenRole(tokenId, role, account);\n    }\n\n    /**\n     * @dev Revokes the collection role of an address.\n     *\n     * Requirements:\n     *\n     * - the caller should have the collection role.\n     *\n     */\n    function revokeCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\n        _revokeCollectionRole(role, account);\n    }\n\n    /**\n     * @dev Revokes the token role of an address.\n     *\n     * Requirements:\n     *\n     * - the caller should have the token role.\n     *\n     */\n    function revokeTokenRole(\n        uint256 tokenId,\n        Roles role,\n        address account\n    ) public requireTokenRole(tokenId, Roles.Owner) {\n        _revokeTokenRole(tokenId, role, account);\n    }\n\n    /**\n     * @dev Returns `True` if a certain address has the collection role.\n     */\n    function hasCollectionRole(Roles role, address account) public view returns (bool) {\n        uint256 currentVersion = _collectionRolesVersion.current();\n\n        return _collectionRoles[currentVersion][role].indexes[account] != 0;\n    }\n\n    /**\n     * @dev Returns `True` if a certain address has the token role.\n     */\n    function hasTokenRole(uint256 tokenId, Roles role, address account) public view returns (bool) {\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\n        return _tokenRoles[tokenId][currentVersion][role].indexes[account] != 0;\n    }\n\n    /**\n     * @dev Returns an array of addresses that all have the collection role.\n     */\n    function getCollectionRoleMembers(Roles role) public view returns (address[] memory) {\n        uint256 currentVersion = _collectionRolesVersion.current();\n        return _collectionRoles[currentVersion][role].members;\n    }\n\n    /**\n     * @dev Returns an array of addresses that all have the same token role for a certain tokenId.\n     */\n    function getTokenRoleMembers(uint256 tokenId, Roles role) public view returns (address[] memory) {\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\n        return _tokenRoles[tokenId][currentVersion][role].members;\n    }\n\n    /**\n     * @dev Grants the collection role to an address.\n     */\n    function _grantCollectionRole(Roles role, address account) internal {\n        uint256 currentVersion = _collectionRolesVersion.current();\n        _grantRole(_collectionRoles[currentVersion][role], account);\n        emit CollectionRoleGranted(role, account, msg.sender);\n    }\n\n    /**\n     * @dev Revokes the collection role of an address.\n     */\n    function _revokeCollectionRole(Roles role, address account) internal {\n        uint256 currentVersion = _collectionRolesVersion.current();\n        _revokeRole(_collectionRoles[currentVersion][role], account);\n        emit CollectionRoleRevoked(role, account, msg.sender);\n    }\n\n    /**\n     * @dev Grants the token role to an address.\n     */\n    function _grantTokenRole(uint256 tokenId, Roles role, address account) internal {\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\n        _grantRole(_tokenRoles[tokenId][currentVersion][role], account);\n        emit TokenRoleGranted(tokenId, role, account, msg.sender);\n    }\n\n    /**\n     * @dev Revokes the token role of an address.\n     */\n    function _revokeTokenRole(uint256 tokenId, Roles role, address account) internal {\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\n        _revokeRole(_tokenRoles[tokenId][currentVersion][role], account);\n        emit TokenRoleRevoked(tokenId, role, account, msg.sender);\n    }\n\n    /**\n     * @dev Grants a certain role to a certain address.\n     */\n    function _grantRole(Role storage role, address account) internal {\n        if (role.indexes[account] == 0) {\n            role.members.push(account);\n            role.indexes[account] = role.members.length;\n        }\n    }\n\n    /**\n     * @dev Revokes a certain role from a certain address.\n     */\n    function _revokeRole(Role storage role, address account) internal {\n        if (role.indexes[account] != 0) {\n            uint256 index = role.indexes[account] - 1;\n            uint256 lastIndex = role.members.length - 1;\n            address lastAccount = role.members[lastIndex];\n\n            role.members[index] = lastAccount;\n            role.indexes[lastAccount] = index + 1;\n\n            role.members.pop();\n            delete role.indexes[account];\n        }\n    }\n\n    /**\n     * @dev Clears all token roles for a certain tokenId.\n     * Should only be used for burning tokens.\n     */\n    function _clearAllTokenRoles(uint256 tokenId) internal {\n        _tokenRolesVersion[tokenId].increment();\n    }\n\n    /**\n     * @dev Clears all token roles for a certain tokenId and grants the owner role to a new address.\n     * Should only be used for transferring tokens.\n     */\n    function _clearAllTokenRoles(uint256 tokenId, address newOwner) internal {\n        _clearAllTokenRoles(tokenId);\n        _grantTokenRole(tokenId, Roles.Owner, newOwner);\n    }\n}\n"
      },
      "contracts/FleekERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"./FleekAccessControl.sol\";\nimport \"./util/FleekStrings.sol\";\n\ncontract FleekERC721 is ERC721, FleekAccessControl {\n    using Counters for Counters.Counter;\n    using FleekStrings for FleekERC721.App;\n    using FleekStrings for FleekERC721.AccessPoint;\n    using FleekStrings for string;\n\n    event NewBuild(uint256 indexed token, string indexed commitHash, address indexed triggeredBy);\n    event NewTokenName(uint256 indexed token, string indexed name, address indexed triggeredBy);\n    event NewTokenDescription(uint256 indexed token, string indexed description, address indexed triggeredBy);\n    event NewTokenImage(uint256 indexed token, string indexed image, address indexed triggeredBy);\n    event NewTokenExternalURL(uint256 indexed token, string indexed externalURL, address indexed triggeredBy);\n    event NewTokenENS(uint256 indexed token, string indexed ENS, address indexed triggeredBy);\n\n    event NewAccessPoint(string indexed apName, uint256 indexed tokenId, address indexed owner);\n    event RemoveAccessPoint(string indexed apName, uint256 indexed tokenId, address indexed owner);\n    event ChangeAccessPointScore(\n        string indexed apName,\n        uint256 indexed tokenId,\n        uint256 score,\n        address indexed triggeredBy\n    );\n    event ChangeAccessPointNameVerify(\n        string indexed apName,\n        uint256 tokenId,\n        bool indexed verified,\n        address indexed triggeredBy\n    );\n    event ChangeAccessPointContentVerify(\n        string indexed apName,\n        uint256 tokenId,\n        bool indexed verified,\n        address indexed triggeredBy\n    );\n\n    /**\n     * The properties are stored as string to keep consistency with\n     * other token contracts, we might consider changing for bytes32\n     * in the future due to gas optimization.\n     */\n    struct App {\n        string name; // Name of the site\n        string description; // Description about the site\n        string externalURL; // Site URL\n        string ENS; // ENS ID\n        uint256 currentBuild; // The current build number (Increments by one with each change, starts at zero)\n        mapping(uint256 => Build) builds; // Mapping to build details for each build number\n        string[] accessPoints; // List of app AccessPoint\n    }\n\n    /**\n     * The metadata that is stored for each build.\n     */\n    struct Build {\n        string commitHash;\n        string gitRepository;\n    }\n\n    /**\n     * The stored data for each AccessPoint.\n     */\n    struct AccessPoint {\n        uint256 tokenId;\n        uint256 index;\n        uint256 score;\n        bool contentVerified;\n        bool nameVerified;\n        address owner;\n    }\n\n    Counters.Counter private _appIds;\n    mapping(uint256 => App) private _apps;\n    mapping(string => AccessPoint) private _accessPoints;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\n\n    /**\n     * @dev Checks if the AccessPoint exists.\n     */\n    modifier requireAP(string memory apName) {\n        require(_accessPoints[apName].owner != address(0), \"FleekERC721: invalid AP\");\n        _;\n    }\n\n    /**\n     * @dev Mints a token and returns a tokenId.\n     *\n     * If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``collectionOwner``'s admin role.\n     *\n     */\n    function mint(\n        address to,\n        string memory name,\n        string memory description,\n        string memory externalURL,\n        string memory ENS,\n        string memory commitHash,\n        string memory gitRepository\n    ) public payable requireCollectionRole(Roles.Owner) returns (uint256) {\n        uint256 tokenId = _appIds.current();\n        _mint(to, tokenId);\n        _appIds.increment();\n\n        App storage app = _apps[tokenId];\n        app.name = name;\n        app.description = description;\n        app.externalURL = externalURL;\n        app.ENS = ENS;\n\n        // The mint interaction is considered to be the first build of the site. Updates from now on all increment the currentBuild by one and update the mapping.\n        app.currentBuild = 0;\n        app.builds[0] = Build(commitHash, gitRepository);\n        app.accessPoints = new string[](0);\n\n        return tokenId;\n    }\n\n    /**\n     * @dev Returns the token metadata associated with the `tokenId`.\n     *\n     * Returns a based64 encoded string value of the URI.\n     *\n     * Requirements:\n     *\n     * - the tokenId must be minted and valid.\n     *\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n        address owner = ownerOf(tokenId);\n        App storage app = _apps[tokenId];\n\n        return string(abi.encodePacked(_baseURI(), app.toString(owner).toBase64()));\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Override of _beforeTokenTransfer of ERC721.\n     * Here it needs to update the token controller roles for mint, burn and transfer.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        if (from != address(0) && to != address(0)) {\n            // Transfer\n            _clearAllTokenRoles(tokenId, to);\n        } else if (from == address(0)) {\n            // Mint\n            _grantTokenRole(tokenId, Roles.Owner, to);\n        } else if (to == address(0)) {\n            // Burn\n            _clearAllTokenRoles(tokenId);\n        }\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    /**\n     * @dev A baseURI internal function implementation to be called in the `tokenURI` function.\n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return \"data:application/json;base64,\";\n    }\n\n    /**\n     * @dev Updates the `externalURL` metadata field of a minted `tokenId`.\n     *\n     * May emit a {NewTokenExternalURL} event.\n     *\n     * Requirements:\n     *\n     * - the tokenId must be minted and valid.\n     * - the sender must have the `tokenController` role.\n     *\n     */\n    function setTokenExternalURL(\n        uint256 tokenId,\n        string memory _tokenExternalURL\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\n        _requireMinted(tokenId);\n        _apps[tokenId].externalURL = _tokenExternalURL;\n        emit NewTokenExternalURL(tokenId, _tokenExternalURL, msg.sender);\n    }\n\n    /**\n     * @dev Updates the `ENS` metadata field of a minted `tokenId`.\n     *\n     * May emit a {NewTokenENS} event.\n     *\n     * Requirements:\n     *\n     * - the tokenId must be minted and valid.\n     * - the sender must have the `tokenController` role.\n     *\n     */\n    function setTokenENS(\n        uint256 tokenId,\n        string memory _tokenENS\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\n        _requireMinted(tokenId);\n        _apps[tokenId].ENS = _tokenENS;\n        emit NewTokenENS(tokenId, _tokenENS, msg.sender);\n    }\n\n    /**\n     * @dev Updates the `name` metadata field of a minted `tokenId`.\n     *\n     * May emit a {NewTokenName} event.\n     *\n     * Requirements:\n     *\n     * - the tokenId must be minted and valid.\n     * - the sender must have the `tokenController` role.\n     *\n     */\n    function setTokenName(\n        uint256 tokenId,\n        string memory _tokenName\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\n        _requireMinted(tokenId);\n        _apps[tokenId].name = _tokenName;\n        emit NewTokenName(tokenId, _tokenName, msg.sender);\n    }\n\n    /**\n     * @dev Updates the `description` metadata field of a minted `tokenId`.\n     *\n     * May emit a {NewTokenDescription} event.\n     *\n     * Requirements:\n     *\n     * - the tokenId must be minted and valid.\n     * - the sender must have the `tokenController` role.\n     *\n     */\n    function setTokenDescription(\n        uint256 tokenId,\n        string memory _tokenDescription\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\n        _requireMinted(tokenId);\n        _apps[tokenId].description = _tokenDescription;\n        emit NewTokenDescription(tokenId, _tokenDescription, msg.sender);\n    }\n\n    /**\n     * @dev Add a new AccessPoint register for an app token.\n     * The AP name should be a DNS or ENS url and it should be unique.\n     * Anyone can add an AP but it should requires a payment.\n     *\n     * May emit a {NewAccessPoint} event.\n     *\n     * Requirements:\n     *\n     * - the tokenId must be minted and valid.\n     *\n     * IMPORTANT: The payment is not set yet\n     */\n    function addAccessPoint(uint256 tokenId, string memory apName) public payable {\n        // require(msg.value == 0.1 ether, \"You need to pay at least 0.1 ETH\"); // TODO: define a minimum price\n        _requireMinted(tokenId);\n        require(_accessPoints[apName].owner == address(0), \"FleekERC721: AP already exists\");\n\n        _accessPoints[apName] = AccessPoint(tokenId, _apps[tokenId].accessPoints.length, 0, false, false, msg.sender);\n        _apps[tokenId].accessPoints.push(apName);\n\n        emit NewAccessPoint(apName, tokenId, msg.sender);\n    }\n\n    /**\n     * @dev Remove an AccessPoint registry for an app token.\n     * It will also remove the AP from the app token APs list.\n     *\n     * May emit a {RemoveAccessPoint} event.\n     *\n     * Requirements:\n     *\n     * - the AP must exist.\n     * - must be called by the AP owner.\n     */\n    function removeAccessPoint(string memory apName) public requireAP(apName) {\n        require(msg.sender == _accessPoints[apName].owner, \"FleekERC721: must be AP owner\");\n        uint256 tokenId = _accessPoints[apName].tokenId;\n        App storage _app = _apps[tokenId];\n\n        // the index of the AP to remove\n        uint256 indexToRemove = _accessPoints[apName].index;\n\n        // the last item is reposited in the index to remove\n        string memory lastAP = _app.accessPoints[_app.accessPoints.length - 1];\n        _app.accessPoints[indexToRemove] = lastAP;\n        _accessPoints[lastAP].index = indexToRemove;\n\n        // remove the last item\n        _app.accessPoints.pop();\n\n        delete _accessPoints[apName];\n        emit RemoveAccessPoint(apName, tokenId, msg.sender);\n    }\n\n    /**\n     * @dev A view function to gether information about an AccessPoint.\n     * It returns a JSON string representing the AccessPoint information.\n     *\n     * Requirements:\n     *\n     * - the AP must exist.\n     *\n     */\n    function getAccessPointJSON(string memory apName) public view requireAP(apName) returns (string memory) {\n        AccessPoint storage _ap = _accessPoints[apName];\n        return _ap.toString();\n    }\n\n    /**\n     * @dev A view function to check if a AccessPoint is verified.\n     *\n     * Requirements:\n     *\n     * - the AP must exist.\n     *\n     */\n    function isAccessPointNameVerified(string memory apName) public view requireAP(apName) returns (bool) {\n        return _accessPoints[apName].nameVerified;\n    }\n\n    /**\n     * @dev Increases the score of a AccessPoint registry.\n     *\n     * May emit a {ChangeAccessPointScore} event.\n     *\n     * Requirements:\n     *\n     * - the AP must exist.\n     *\n     */\n    function increaseAccessPointScore(string memory apName) public requireAP(apName) {\n        _accessPoints[apName].score++;\n        emit ChangeAccessPointScore(apName, _accessPoints[apName].tokenId, _accessPoints[apName].score, msg.sender);\n    }\n\n    /**\n     * @dev Decreases the score of a AccessPoint registry if is greater than 0.\n     *\n     * May emit a {ChangeAccessPointScore} event.\n     *\n     * Requirements:\n     *\n     * - the AP must exist.\n     *\n     */\n    function decreaseAccessPointScore(string memory apName) public requireAP(apName) {\n        require(_accessPoints[apName].score > 0, \"FleekERC721: score cant be lower\");\n        _accessPoints[apName].score--;\n        emit ChangeAccessPointScore(apName, _accessPoints[apName].tokenId, _accessPoints[apName].score, msg.sender);\n    }\n\n    /**\n     * @dev Set the content verification of a AccessPoint registry.\n     *\n     * May emit a {ChangeAccessPointContentVerify} event.\n     *\n     * Requirements:\n     *\n     * - the AP must exist.\n     * - the sender must have the token controller role.\n     *\n     */\n    function setAccessPointContentVerify(\n        string memory apName,\n        bool verified\n    ) public requireAP(apName) requireTokenRole(_accessPoints[apName].tokenId, Roles.Controller) {\n        _accessPoints[apName].contentVerified = verified;\n        emit ChangeAccessPointContentVerify(apName, _accessPoints[apName].tokenId, verified, msg.sender);\n    }\n\n    /**\n     * @dev Set the name verification of a AccessPoint registry.\n     *\n     * May emit a {ChangeAccessPointNameVerify} event.\n     *\n     * Requirements:\n     *\n     * - the AP must exist.\n     * - the sender must have the token controller role.\n     *\n     */\n    function setAccessPointNameVerify(\n        string memory apName,\n        bool verified\n    ) public requireAP(apName) requireTokenRole(_accessPoints[apName].tokenId, Roles.Controller) {\n        _accessPoints[apName].nameVerified = verified;\n        emit ChangeAccessPointNameVerify(apName, _accessPoints[apName].tokenId, verified, msg.sender);\n    }\n\n    /**\n     * @dev A view function to gether the list of mirrros for a given app.\n     *\n     * Requirements:\n     * - the tokenId must be minted and valid.\n     *\n     */\n    function appAccessPoints(uint256 tokenId) public view returns (string[] memory) {\n        _requireMinted(tokenId);\n        return _apps[tokenId].accessPoints;\n    }\n\n    /**\n     * @dev Adds a new build to a minted `tokenId`'s builds mapping.\n     *\n     * May emit a {NewBuild} event.\n     *\n     * Requirements:\n     *\n     * - the tokenId must be minted and valid.\n     * - the sender must have the `tokenController` role.\n     *\n     */\n    function setTokenBuild(\n        uint256 tokenId,\n        string memory _commitHash,\n        string memory _gitRepository\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\n        _requireMinted(tokenId);\n        _apps[tokenId].builds[++_apps[tokenId].currentBuild] = Build(_commitHash, _gitRepository);\n        emit NewBuild(tokenId, _commitHash, msg.sender);\n    }\n\n    /**\n     * @dev Burns a previously minted `tokenId`.\n     *\n     * May emit a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - the tokenId must be minted and valid.\n     * - the sender must have the `tokenOwner` role.\n     *\n     */\n    function burn(uint256 tokenId) public virtual requireTokenRole(tokenId, Roles.Owner) {\n        super._burn(tokenId);\n\n        if (bytes(_apps[tokenId].externalURL).length != 0) {\n            delete _apps[tokenId];\n        }\n    }\n}\n"
      },
      "contracts/util/FleekStrings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"../FleekERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"./FleekSVG.sol\";\n\nlibrary FleekStrings {\n    using Strings for uint256;\n    using Strings for uint160;\n    using FleekStrings for bool;\n\n    /**\n     * @dev Converts a boolean value to a string.\n     */\n    function toString(bool _bool) internal pure returns (string memory) {\n        return _bool ? \"true\" : \"false\";\n    }\n\n    /**\n     * @dev Converts a string to a base64 string.\n     */\n    function toBase64(string memory str) internal pure returns (string memory) {\n        return Base64.encode(bytes(str));\n    }\n\n    /**\n     * @dev Converts FleekERC721.App to a JSON string.\n     * It requires to receive owner address as a parameter.\n     */\n    function toString(FleekERC721.App storage app, address owner) internal view returns (string memory) {\n        // prettier-ignore\n        return string(abi.encodePacked(\n            '{',\n                '\"name\":\"', app.name, '\",',\n                '\"description\":\"', app.description, '\",',\n                '\"owner\":\"', uint160(owner).toHexString(20), '\",',\n                '\"external_url\":\"', app.externalURL, '\",',\n                '\"image\":\"', FleekSVG.generateBase64(app.name, app.ENS), '\",',\n                '\"attributes\": [',\n                    '{\"trait_type\": \"ENS\", \"value\":\"', app.ENS,'\"},',\n                    '{\"trait_type\": \"Commit Hash\", \"value\":\"', app.builds[app.currentBuild].commitHash,'\"},',\n                    '{\"trait_type\": \"Repository\", \"value\":\"', app.builds[app.currentBuild].gitRepository,'\"},',\n                    '{\"trait_type\": \"Version\", \"value\":\"', app.currentBuild.toString(),'\"}',\n                ']',\n            '}'\n        ));\n    }\n\n    /**\n     * @dev Converts FleekERC721.AccessPoint to a JSON string.\n     */\n    function toString(FleekERC721.AccessPoint storage ap) internal view returns (string memory) {\n        // prettier-ignore\n        return string(abi.encodePacked(\n            \"{\",\n                '\"tokenId\":', ap.tokenId.toString(), \",\",\n                '\"score\":', ap.score.toString(), \",\",\n                '\"nameVerified\":', ap.nameVerified.toString(), \",\",\n                '\"contentVerified\":', ap.contentVerified.toString(), \",\",\n                '\"owner\":\"', uint160(ap.owner).toHexString(20), '\"',\n            \"}\"\n        ));\n    }\n}\n"
      },
      "contracts/util/FleekSVG.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"../FleekERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\nlibrary FleekSVG {\n    /**\n     * @dev Generates a SVG image.\n     */\n    function generateBase64(string memory name, string memory ENS) internal pure returns (string memory) {\n        return (\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        abi.encodePacked(\n                            '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"640\" height=\"480\" viewBox=\"0 0 640 480\" xml:space=\"preserve\">',\n                            \"<defs>\",\n                            \"</defs>\",\n                            '<g transform=\"matrix(3.42 0 0 3.42 300.98 252.98)\"  >',\n                            '<polygon style=\"stroke: rgb(0,0,0); stroke-width: 8; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(152,152,183); fill-rule: nonzero; opacity: 1;\" vector-effect=\"non-scaling-stroke\"  points=\"-50,-50 -50,50 50,50 50,-50 \" />',\n                            \"</g>\",\n                            '<g transform=\"matrix(1 0 0 1 303.5 115.67)\" style=\"\"  >',\n                            '<text xml:space=\"preserve\" font-family=\"Open Sans\" font-size=\"24\" font-style=\"normal\" font-weight=\"normal\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\" ><tspan x=\"-45.7\" y=\"5.65\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">Fleek NFAs</tspan></text>',\n                            \"</g>\",\n                            '<g transform=\"matrix(1 0 0 1 302 261.47)\" style=\"\"  >',\n                            '<text xml:space=\"preserve\" font-family=\"Open Sans\" font-size=\"28\" font-style=\"normal\" font-weight=\"normal\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\" ><tspan x=\"-44.26\" y=\"-6.14\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">',\n                            name,\n                            '</tspan><tspan x=\"-37.14\" y=\"17.45\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">',\n                            ENS,\n                            \"</tspan></text>\",\n                            \"</g>\",\n                            \"</svg>\"\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": { "enabled": true, "runs": 200, "details": { "yul": true } },
      "viaIR": true,
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": ["ast"]
        }
      },
      "metadata": { "useLiteralContent": true }
    }
  },
  "output": {
    "sources": {
      "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
          "exportedSymbols": {
            "Address": [1435],
            "Context": [1504],
            "ERC165": [1777],
            "ERC721": [944],
            "IERC165": [1789],
            "IERC721": [1060],
            "IERC721Metadata": [1105],
            "IERC721Receiver": [1078],
            "Math": [2654],
            "Strings": [1753]
          },
          "id": 945,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "107:23:0"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
              "file": "./IERC721.sol",
              "id": 2,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 945,
              "sourceUnit": 1061,
              "src": "132:23:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
              "file": "./IERC721Receiver.sol",
              "id": 3,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 945,
              "sourceUnit": 1079,
              "src": "156:31:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
              "file": "./extensions/IERC721Metadata.sol",
              "id": 4,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 945,
              "sourceUnit": 1106,
              "src": "188:42:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Address.sol",
              "file": "../../utils/Address.sol",
              "id": 5,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 945,
              "sourceUnit": 1436,
              "src": "231:33:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "../../utils/Context.sol",
              "id": 6,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 945,
              "sourceUnit": 1505,
              "src": "265:33:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
              "file": "../../utils/Strings.sol",
              "id": 7,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 945,
              "sourceUnit": 1754,
              "src": "299:33:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
              "file": "../../utils/introspection/ERC165.sol",
              "id": 8,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 945,
              "sourceUnit": 1778,
              "src": "333:46:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 10,
                    "name": "Context",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1504,
                    "src": "647:7:0"
                  },
                  "id": 11,
                  "nodeType": "InheritanceSpecifier",
                  "src": "647:7:0"
                },
                {
                  "baseName": {
                    "id": 12,
                    "name": "ERC165",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1777,
                    "src": "656:6:0"
                  },
                  "id": 13,
                  "nodeType": "InheritanceSpecifier",
                  "src": "656:6:0"
                },
                {
                  "baseName": {
                    "id": 14,
                    "name": "IERC721",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1060,
                    "src": "664:7:0"
                  },
                  "id": 15,
                  "nodeType": "InheritanceSpecifier",
                  "src": "664:7:0"
                },
                {
                  "baseName": {
                    "id": 16,
                    "name": "IERC721Metadata",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1105,
                    "src": "673:15:0"
                  },
                  "id": 17,
                  "nodeType": "InheritanceSpecifier",
                  "src": "673:15:0"
                }
              ],
              "canonicalName": "ERC721",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 9,
                "nodeType": "StructuredDocumentation",
                "src": "381:246:0",
                "text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
              },
              "fullyImplemented": true,
              "id": 944,
              "linearizedBaseContracts": [944, 1105, 1060, 1777, 1789, 1504],
              "name": "ERC721",
              "nameLocation": "637:6:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 20,
                  "libraryName": {
                    "id": 18,
                    "name": "Address",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1435,
                    "src": "701:7:0"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "695:26:0",
                  "typeName": {
                    "id": 19,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "713:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                },
                {
                  "id": 23,
                  "libraryName": {
                    "id": 21,
                    "name": "Strings",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1753,
                    "src": "732:7:0"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "726:26:0",
                  "typeName": {
                    "id": 22,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "744:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "constant": false,
                  "id": 25,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "791:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 944,
                  "src": "776:20:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "776:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 27,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "838:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 944,
                  "src": "823:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 26,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "823:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 31,
                  "mutability": "mutable",
                  "name": "_owners",
                  "nameLocation": "934:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 944,
                  "src": "898:43:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  },
                  "typeName": {
                    "id": 30,
                    "keyType": {
                      "id": 28,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "906:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "898:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                      "typeString": "mapping(uint256 => address)"
                    },
                    "valueType": {
                      "id": 29,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "917:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "_balances",
                  "nameLocation": "1028:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 944,
                  "src": "992:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 34,
                    "keyType": {
                      "id": 32,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1000:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "992:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 33,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1011:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 39,
                  "mutability": "mutable",
                  "name": "_tokenApprovals",
                  "nameLocation": "1129:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 944,
                  "src": "1093:51:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  },
                  "typeName": {
                    "id": 38,
                    "keyType": {
                      "id": 36,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1101:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1093:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                      "typeString": "mapping(uint256 => address)"
                    },
                    "valueType": {
                      "id": 37,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1112:7:0",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 45,
                  "mutability": "mutable",
                  "name": "_operatorApprovals",
                  "nameLocation": "1252:18:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 944,
                  "src": "1199:71:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                    "typeString": "mapping(address => mapping(address => bool))"
                  },
                  "typeName": {
                    "id": 44,
                    "keyType": {
                      "id": 40,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1207:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1199:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                      "typeString": "mapping(address => mapping(address => bool))"
                    },
                    "valueType": {
                      "id": 43,
                      "keyType": {
                        "id": 41,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1226:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1218:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      },
                      "valueType": {
                        "id": 42,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1237:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 61,
                    "nodeType": "Block",
                    "src": "1446:57:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 55,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 53,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25,
                            "src": "1456:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 54,
                            "name": "name_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48,
                            "src": "1464:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1456:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 56,
                        "nodeType": "ExpressionStatement",
                        "src": "1456:13:0"
                      },
                      {
                        "expression": {
                          "id": 59,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 57,
                            "name": "_symbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27,
                            "src": "1479:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 58,
                            "name": "symbol_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 50,
                            "src": "1489:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1479:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 60,
                        "nodeType": "ExpressionStatement",
                        "src": "1479:17:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 46,
                    "nodeType": "StructuredDocumentation",
                    "src": "1277:108:0",
                    "text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
                  },
                  "id": 62,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 51,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 48,
                        "mutability": "mutable",
                        "name": "name_",
                        "nameLocation": "1416:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 62,
                        "src": "1402:19:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 47,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1402:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 50,
                        "mutability": "mutable",
                        "name": "symbol_",
                        "nameLocation": "1437:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 62,
                        "src": "1423:21:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 49,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1423:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1401:44:0"
                  },
                  "returnParameters": {
                    "id": 52,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1446:0:0"
                  },
                  "scope": 944,
                  "src": "1390:113:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1776, 1788],
                  "body": {
                    "id": 92,
                    "nodeType": "Block",
                    "src": "1678:192:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 90,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 85,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              "id": 78,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 73,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 65,
                                "src": "1707:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 75,
                                      "name": "IERC721",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1060,
                                      "src": "1727:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721_$1060_$",
                                        "typeString": "type(contract IERC721)"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721_$1060_$",
                                        "typeString": "type(contract IERC721)"
                                      }
                                    ],
                                    "id": 74,
                                    "name": "type",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -27,
                                    "src": "1722:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                      "typeString": "function () pure"
                                    }
                                  },
                                  "id": 76,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1722:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$1060",
                                    "typeString": "type(contract IERC721)"
                                  }
                                },
                                "id": 77,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "interfaceId",
                                "nodeType": "MemberAccess",
                                "src": "1722:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "src": "1707:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              "id": 84,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 79,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 65,
                                "src": "1763:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 81,
                                      "name": "IERC721Metadata",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1105,
                                      "src": "1783:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1105_$",
                                        "typeString": "type(contract IERC721Metadata)"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1105_$",
                                        "typeString": "type(contract IERC721Metadata)"
                                      }
                                    ],
                                    "id": 80,
                                    "name": "type",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -27,
                                    "src": "1778:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                      "typeString": "function () pure"
                                    }
                                  },
                                  "id": 82,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1778:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$1105",
                                    "typeString": "type(contract IERC721Metadata)"
                                  }
                                },
                                "id": 83,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "interfaceId",
                                "nodeType": "MemberAccess",
                                "src": "1778:33:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "src": "1763:48:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "1707:104:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 88,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 65,
                                "src": "1851:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "id": 86,
                                "name": "super",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -25,
                                "src": "1827:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_super$_ERC721_$944_$",
                                  "typeString": "type(contract super ERC721)"
                                }
                              },
                              "id": 87,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "supportsInterface",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1776,
                              "src": "1827:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                                "typeString": "function (bytes4) view returns (bool)"
                              }
                            },
                            "id": 89,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1827:36:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "1707:156:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 72,
                        "id": 91,
                        "nodeType": "Return",
                        "src": "1688:175:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 63,
                    "nodeType": "StructuredDocumentation",
                    "src": "1509:56:0",
                    "text": " @dev See {IERC165-supportsInterface}."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 93,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "1579:17:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 69,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [
                      {
                        "id": 67,
                        "name": "ERC165",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1777,
                        "src": "1646:6:0"
                      },
                      {
                        "id": 68,
                        "name": "IERC165",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1789,
                        "src": "1654:7:0"
                      }
                    ],
                    "src": "1637:25:0"
                  },
                  "parameters": {
                    "id": 66,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 65,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "1604:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 93,
                        "src": "1597:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 64,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "1597:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1596:20:0"
                  },
                  "returnParameters": {
                    "id": 72,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 71,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 93,
                        "src": "1672:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 70,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1672:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1671:6:0"
                  },
                  "scope": 944,
                  "src": "1570:300:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [985],
                  "body": {
                    "id": 116,
                    "nodeType": "Block",
                    "src": "2010:123:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 108,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 103,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 96,
                                "src": "2028:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 106,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2045:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 105,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2037:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 104,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2037:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 107,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2037:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2028:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572",
                              "id": 109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2049:43:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
                                "typeString": "literal_string \"ERC721: address zero is not a valid owner\""
                              },
                              "value": "ERC721: address zero is not a valid owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159",
                                "typeString": "literal_string \"ERC721: address zero is not a valid owner\""
                              }
                            ],
                            "id": 102,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2020:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 110,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2020:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 111,
                        "nodeType": "ExpressionStatement",
                        "src": "2020:73:0"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 112,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 35,
                            "src": "2110:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 114,
                          "indexExpression": {
                            "id": 113,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 96,
                            "src": "2120:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2110:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 101,
                        "id": 115,
                        "nodeType": "Return",
                        "src": "2103:23:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 94,
                    "nodeType": "StructuredDocumentation",
                    "src": "1876:48:0",
                    "text": " @dev See {IERC721-balanceOf}."
                  },
                  "functionSelector": "70a08231",
                  "id": 117,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "1938:9:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 98,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "1983:8:0"
                  },
                  "parameters": {
                    "id": 97,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 96,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1956:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 117,
                        "src": "1948:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 95,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1948:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1947:15:0"
                  },
                  "returnParameters": {
                    "id": 101,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 100,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 117,
                        "src": "2001:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 99,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2001:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2000:9:0"
                  },
                  "scope": 944,
                  "src": "1929:204:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [993],
                  "body": {
                    "id": 144,
                    "nodeType": "Block",
                    "src": "2271:138:0",
                    "statements": [
                      {
                        "assignments": [127],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 127,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "2289:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 144,
                            "src": "2281:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 126,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2281:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 131,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 129,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 120,
                              "src": "2306:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 128,
                            "name": "_ownerOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 427,
                            "src": "2297:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2297:17:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2281:33:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 138,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 133,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 127,
                                "src": "2332:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 136,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2349:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 135,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2341:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 134,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2341:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 137,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2341:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2332:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
                              "id": 139,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2353:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
                                "typeString": "literal_string \"ERC721: invalid token ID\""
                              },
                              "value": "ERC721: invalid token ID"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
                                "typeString": "literal_string \"ERC721: invalid token ID\""
                              }
                            ],
                            "id": 132,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2324:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2324:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 141,
                        "nodeType": "ExpressionStatement",
                        "src": "2324:56:0"
                      },
                      {
                        "expression": {
                          "id": 142,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 127,
                          "src": "2397:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 125,
                        "id": 143,
                        "nodeType": "Return",
                        "src": "2390:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 118,
                    "nodeType": "StructuredDocumentation",
                    "src": "2139:46:0",
                    "text": " @dev See {IERC721-ownerOf}."
                  },
                  "functionSelector": "6352211e",
                  "id": 145,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ownerOf",
                  "nameLocation": "2199:7:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 122,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2244:8:0"
                  },
                  "parameters": {
                    "id": 121,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 120,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2215:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 145,
                        "src": "2207:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 119,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2207:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2206:17:0"
                  },
                  "returnParameters": {
                    "id": 125,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 124,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 145,
                        "src": "2262:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 123,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2262:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2261:9:0"
                  },
                  "scope": 944,
                  "src": "2190:219:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1090],
                  "body": {
                    "id": 154,
                    "nodeType": "Block",
                    "src": "2540:29:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 152,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 25,
                          "src": "2557:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 151,
                        "id": 153,
                        "nodeType": "Return",
                        "src": "2550:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 146,
                    "nodeType": "StructuredDocumentation",
                    "src": "2415:51:0",
                    "text": " @dev See {IERC721Metadata-name}."
                  },
                  "functionSelector": "06fdde03",
                  "id": 155,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "2480:4:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 148,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2507:8:0"
                  },
                  "parameters": {
                    "id": 147,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2484:2:0"
                  },
                  "returnParameters": {
                    "id": 151,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 150,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 155,
                        "src": "2525:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 149,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2525:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2524:15:0"
                  },
                  "scope": 944,
                  "src": "2471:98:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1096],
                  "body": {
                    "id": 164,
                    "nodeType": "Block",
                    "src": "2704:31:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 162,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 27,
                          "src": "2721:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 161,
                        "id": 163,
                        "nodeType": "Return",
                        "src": "2714:14:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 156,
                    "nodeType": "StructuredDocumentation",
                    "src": "2575:53:0",
                    "text": " @dev See {IERC721Metadata-symbol}."
                  },
                  "functionSelector": "95d89b41",
                  "id": 165,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "2642:6:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 158,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2671:8:0"
                  },
                  "parameters": {
                    "id": 157,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2648:2:0"
                  },
                  "returnParameters": {
                    "id": 161,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 160,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 165,
                        "src": "2689:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 159,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2689:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2688:15:0"
                  },
                  "scope": 944,
                  "src": "2633:102:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1104],
                  "body": {
                    "id": 203,
                    "nodeType": "Block",
                    "src": "2889:188:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 175,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 168,
                              "src": "2914:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 174,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "2899:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 176,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2899:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 177,
                        "nodeType": "ExpressionStatement",
                        "src": "2899:23:0"
                      },
                      {
                        "assignments": [179],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 179,
                            "mutability": "mutable",
                            "name": "baseURI",
                            "nameLocation": "2947:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 203,
                            "src": "2933:21:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 178,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2933:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 182,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 180,
                            "name": "_baseURI",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 213,
                            "src": "2957:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                              "typeString": "function () view returns (string memory)"
                            }
                          },
                          "id": 181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2957:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2933:34:0"
                      },
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 189,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 185,
                                    "name": "baseURI",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 179,
                                    "src": "2990:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "id": 184,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2984:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 183,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2984:5:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 186,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2984:14:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 187,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "2984:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 188,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3008:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "2984:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "",
                            "id": 200,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3068:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          },
                          "id": 201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "2984:86:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 194,
                                    "name": "baseURI",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 179,
                                    "src": "3036:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "expression": {
                                        "id": 195,
                                        "name": "tokenId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 168,
                                        "src": "3045:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 196,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "toString",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1636,
                                      "src": "3045:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256) pure returns (string memory)"
                                      }
                                    },
                                    "id": 197,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3045:18:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    },
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "expression": {
                                    "id": 192,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "3019:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 193,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encodePacked",
                                  "nodeType": "MemberAccess",
                                  "src": "3019:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 198,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3019:45:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 191,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3012:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                "typeString": "type(string storage pointer)"
                              },
                              "typeName": {
                                "id": 190,
                                "name": "string",
                                "nodeType": "ElementaryTypeName",
                                "src": "3012:6:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 199,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3012:53:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 173,
                        "id": 202,
                        "nodeType": "Return",
                        "src": "2977:93:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 166,
                    "nodeType": "StructuredDocumentation",
                    "src": "2741:55:0",
                    "text": " @dev See {IERC721Metadata-tokenURI}."
                  },
                  "functionSelector": "c87b56dd",
                  "id": 204,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenURI",
                  "nameLocation": "2810:8:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 170,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "2856:8:0"
                  },
                  "parameters": {
                    "id": 169,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 168,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2827:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 204,
                        "src": "2819:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 167,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2819:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2818:17:0"
                  },
                  "returnParameters": {
                    "id": 173,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 172,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 204,
                        "src": "2874:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 171,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2874:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2873:15:0"
                  },
                  "scope": 944,
                  "src": "2801:276:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 212,
                    "nodeType": "Block",
                    "src": "3385:26:0",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "",
                          "id": 210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3402:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          },
                          "value": ""
                        },
                        "functionReturnParameters": 209,
                        "id": 211,
                        "nodeType": "Return",
                        "src": "3395:9:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 205,
                    "nodeType": "StructuredDocumentation",
                    "src": "3083:231:0",
                    "text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."
                  },
                  "id": 213,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_baseURI",
                  "nameLocation": "3328:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 206,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3336:2:0"
                  },
                  "returnParameters": {
                    "id": 209,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 208,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 213,
                        "src": "3370:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 207,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3370:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3369:15:0"
                  },
                  "scope": 944,
                  "src": "3319:92:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [1033],
                  "body": {
                    "id": 255,
                    "nodeType": "Block",
                    "src": "3538:336:0",
                    "statements": [
                      {
                        "assignments": [223],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 223,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "3556:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 255,
                            "src": "3548:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 222,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3548:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 228,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 226,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 218,
                              "src": "3579:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 224,
                              "name": "ERC721",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 944,
                              "src": "3564:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
                                "typeString": "type(contract ERC721)"
                              }
                            },
                            "id": 225,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 145,
                            "src": "3564:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 227,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3564:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3548:39:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 232,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 230,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 216,
                                "src": "3605:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 231,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 223,
                                "src": "3611:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "3605:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
                              "id": 233,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3618:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                                "typeString": "literal_string \"ERC721: approval to current owner\""
                              },
                              "value": "ERC721: approval to current owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                                "typeString": "literal_string \"ERC721: approval to current owner\""
                              }
                            ],
                            "id": 229,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "3597:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3597:57:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 235,
                        "nodeType": "ExpressionStatement",
                        "src": "3597:57:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 246,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 240,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 237,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1494,
                                    "src": "3686:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 238,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3686:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 239,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 223,
                                  "src": "3702:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "3686:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 242,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 223,
                                    "src": "3728:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 243,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1494,
                                      "src": "3735:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 244,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3735:12:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 241,
                                  "name": "isApprovedForAll",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 309,
                                  "src": "3711:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                                    "typeString": "function (address,address) view returns (bool)"
                                  }
                                },
                                "id": 245,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3711:37:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "3686:62:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c",
                              "id": 247,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3762:63:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
                                "typeString": "literal_string \"ERC721: approve caller is not token owner or approved for all\""
                              },
                              "value": "ERC721: approve caller is not token owner or approved for all"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83",
                                "typeString": "literal_string \"ERC721: approve caller is not token owner or approved for all\""
                              }
                            ],
                            "id": 236,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "3665:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3665:170:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 249,
                        "nodeType": "ExpressionStatement",
                        "src": "3665:170:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 251,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 216,
                              "src": "3855:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 252,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 218,
                              "src": "3859:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 250,
                            "name": "_approve",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 776,
                            "src": "3846:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 253,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3846:21:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 254,
                        "nodeType": "ExpressionStatement",
                        "src": "3846:21:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 214,
                    "nodeType": "StructuredDocumentation",
                    "src": "3417:46:0",
                    "text": " @dev See {IERC721-approve}."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 256,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "3477:7:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 220,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3529:8:0"
                  },
                  "parameters": {
                    "id": 219,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 216,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3493:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 256,
                        "src": "3485:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 215,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3485:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 218,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3505:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 256,
                        "src": "3497:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 217,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3497:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3484:29:0"
                  },
                  "returnParameters": {
                    "id": 221,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3538:0:0"
                  },
                  "scope": 944,
                  "src": "3468:406:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1049],
                  "body": {
                    "id": 273,
                    "nodeType": "Block",
                    "src": "4020:82:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 266,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 259,
                              "src": "4045:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 265,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "4030:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4030:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 268,
                        "nodeType": "ExpressionStatement",
                        "src": "4030:23:0"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 269,
                            "name": "_tokenApprovals",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 39,
                            "src": "4071:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 271,
                          "indexExpression": {
                            "id": 270,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 259,
                            "src": "4087:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4071:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 264,
                        "id": 272,
                        "nodeType": "Return",
                        "src": "4064:31:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 257,
                    "nodeType": "StructuredDocumentation",
                    "src": "3880:50:0",
                    "text": " @dev See {IERC721-getApproved}."
                  },
                  "functionSelector": "081812fc",
                  "id": 274,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getApproved",
                  "nameLocation": "3944:11:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 261,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "3993:8:0"
                  },
                  "parameters": {
                    "id": 260,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 259,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3964:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 274,
                        "src": "3956:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 258,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3956:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3955:17:0"
                  },
                  "returnParameters": {
                    "id": 264,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 263,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 274,
                        "src": "4011:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 262,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4011:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4010:9:0"
                  },
                  "scope": 944,
                  "src": "3935:167:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1041],
                  "body": {
                    "id": 290,
                    "nodeType": "Block",
                    "src": "4253:69:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 284,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1494,
                                "src": "4282:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 285,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4282:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 286,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 277,
                              "src": "4296:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 287,
                              "name": "approved",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 279,
                              "src": "4306:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 283,
                            "name": "_setApprovalForAll",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 808,
                            "src": "4263:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
                              "typeString": "function (address,address,bool)"
                            }
                          },
                          "id": 288,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4263:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 289,
                        "nodeType": "ExpressionStatement",
                        "src": "4263:52:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 275,
                    "nodeType": "StructuredDocumentation",
                    "src": "4108:56:0",
                    "text": " @dev See {IERC721-setApprovalForAll}."
                  },
                  "functionSelector": "a22cb465",
                  "id": 291,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setApprovalForAll",
                  "nameLocation": "4178:17:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 281,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4244:8:0"
                  },
                  "parameters": {
                    "id": 280,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 277,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4204:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 291,
                        "src": "4196:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 276,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4196:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 279,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "4219:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 291,
                        "src": "4214:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 278,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4214:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4195:33:0"
                  },
                  "returnParameters": {
                    "id": 282,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4253:0:0"
                  },
                  "scope": 944,
                  "src": "4169:153:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1059],
                  "body": {
                    "id": 308,
                    "nodeType": "Block",
                    "src": "4491:59:0",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 302,
                              "name": "_operatorApprovals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 45,
                              "src": "4508:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(address => bool))"
                              }
                            },
                            "id": 304,
                            "indexExpression": {
                              "id": 303,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 294,
                              "src": "4527:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4508:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 306,
                          "indexExpression": {
                            "id": 305,
                            "name": "operator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 296,
                            "src": "4534:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4508:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 301,
                        "id": 307,
                        "nodeType": "Return",
                        "src": "4501:42:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 292,
                    "nodeType": "StructuredDocumentation",
                    "src": "4328:55:0",
                    "text": " @dev See {IERC721-isApprovedForAll}."
                  },
                  "functionSelector": "e985e9c5",
                  "id": 309,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isApprovedForAll",
                  "nameLocation": "4397:16:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 298,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4467:8:0"
                  },
                  "parameters": {
                    "id": 297,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 294,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "4422:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 309,
                        "src": "4414:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 293,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4414:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 296,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4437:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 309,
                        "src": "4429:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 295,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4429:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4413:33:0"
                  },
                  "returnParameters": {
                    "id": 301,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 300,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 309,
                        "src": "4485:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 299,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4485:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4484:6:0"
                  },
                  "scope": 944,
                  "src": "4388:162:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1025],
                  "body": {
                    "id": 335,
                    "nodeType": "Block",
                    "src": "4731:207:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 322,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1494,
                                    "src": "4820:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 323,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4820:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 324,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 316,
                                  "src": "4834:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 321,
                                "name": "_isApprovedOrOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 479,
                                "src": "4801:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,uint256) view returns (bool)"
                                }
                              },
                              "id": 325,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4801:41:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
                              "id": 326,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4844:47:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
                                "typeString": "literal_string \"ERC721: caller is not token owner or approved\""
                              },
                              "value": "ERC721: caller is not token owner or approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
                                "typeString": "literal_string \"ERC721: caller is not token owner or approved\""
                              }
                            ],
                            "id": 320,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "4793:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 327,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4793:99:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 328,
                        "nodeType": "ExpressionStatement",
                        "src": "4793:99:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 330,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 312,
                              "src": "4913:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 331,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 314,
                              "src": "4919:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 332,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 316,
                              "src": "4923:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 329,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 752,
                            "src": "4903:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4903:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 334,
                        "nodeType": "ExpressionStatement",
                        "src": "4903:28:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 310,
                    "nodeType": "StructuredDocumentation",
                    "src": "4556:51:0",
                    "text": " @dev See {IERC721-transferFrom}."
                  },
                  "functionSelector": "23b872dd",
                  "id": 336,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "4621:12:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 318,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4722:8:0"
                  },
                  "parameters": {
                    "id": 317,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 312,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "4651:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 336,
                        "src": "4643:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 311,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4643:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 314,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "4673:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 336,
                        "src": "4665:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 313,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4665:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 316,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4693:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 336,
                        "src": "4685:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 315,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4685:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4633:73:0"
                  },
                  "returnParameters": {
                    "id": 319,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4731:0:0"
                  },
                  "scope": 944,
                  "src": "4612:326:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1015],
                  "body": {
                    "id": 354,
                    "nodeType": "Block",
                    "src": "5127:56:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 348,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 339,
                              "src": "5154:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 349,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "5160:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 350,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 343,
                              "src": "5164:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "",
                              "id": 351,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5173:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "id": 347,
                            "name": "safeTransferFrom",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [355, 385],
                            "referencedDeclaration": 385,
                            "src": "5137:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (address,address,uint256,bytes memory)"
                            }
                          },
                          "id": 352,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5137:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 353,
                        "nodeType": "ExpressionStatement",
                        "src": "5137:39:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 337,
                    "nodeType": "StructuredDocumentation",
                    "src": "4944:55:0",
                    "text": " @dev See {IERC721-safeTransferFrom}."
                  },
                  "functionSelector": "42842e0e",
                  "id": 355,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "5013:16:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 345,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "5118:8:0"
                  },
                  "parameters": {
                    "id": 344,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 339,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5047:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 355,
                        "src": "5039:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 338,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5039:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5069:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 355,
                        "src": "5061:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5061:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 343,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "5089:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 355,
                        "src": "5081:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 342,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5081:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5029:73:0"
                  },
                  "returnParameters": {
                    "id": 346,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5127:0:0"
                  },
                  "scope": 944,
                  "src": "5004:179:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [1005],
                  "body": {
                    "id": 384,
                    "nodeType": "Block",
                    "src": "5399:164:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 370,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1494,
                                    "src": "5436:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 371,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5436:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 372,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 362,
                                  "src": "5450:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 369,
                                "name": "_isApprovedOrOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 479,
                                "src": "5417:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,uint256) view returns (bool)"
                                }
                              },
                              "id": 373,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5417:41:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
                              "id": 374,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5460:47:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
                                "typeString": "literal_string \"ERC721: caller is not token owner or approved\""
                              },
                              "value": "ERC721: caller is not token owner or approved"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af",
                                "typeString": "literal_string \"ERC721: caller is not token owner or approved\""
                              }
                            ],
                            "id": 368,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "5409:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 375,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5409:99:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 376,
                        "nodeType": "ExpressionStatement",
                        "src": "5409:99:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 378,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 358,
                              "src": "5532:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 379,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 360,
                              "src": "5538:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 380,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 362,
                              "src": "5542:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 381,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 364,
                              "src": "5551:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 377,
                            "name": "_safeTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 414,
                            "src": "5518:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (address,address,uint256,bytes memory)"
                            }
                          },
                          "id": 382,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5518:38:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 383,
                        "nodeType": "ExpressionStatement",
                        "src": "5518:38:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 356,
                    "nodeType": "StructuredDocumentation",
                    "src": "5189:55:0",
                    "text": " @dev See {IERC721-safeTransferFrom}."
                  },
                  "functionSelector": "b88d4fde",
                  "id": 385,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "5258:16:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 366,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "5390:8:0"
                  },
                  "parameters": {
                    "id": 365,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 358,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5292:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 385,
                        "src": "5284:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 357,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5284:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 360,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5314:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 385,
                        "src": "5306:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 359,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5306:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 362,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "5334:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 385,
                        "src": "5326:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 361,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5326:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 364,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5364:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 385,
                        "src": "5351:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 363,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5351:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5274:100:0"
                  },
                  "returnParameters": {
                    "id": 367,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5399:0:0"
                  },
                  "scope": 944,
                  "src": "5249:314:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 413,
                    "nodeType": "Block",
                    "src": "6564:165:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 398,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 388,
                              "src": "6584:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 399,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 390,
                              "src": "6590:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 400,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 392,
                              "src": "6594:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 397,
                            "name": "_transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 752,
                            "src": "6574:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 401,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6574:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 402,
                        "nodeType": "ExpressionStatement",
                        "src": "6574:28:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 405,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "6643:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 406,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 390,
                                  "src": "6649:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 407,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 392,
                                  "src": "6653:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 408,
                                  "name": "data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 394,
                                  "src": "6662:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 404,
                                "name": "_checkOnERC721Received",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 884,
                                "src": "6620:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                                  "typeString": "function (address,address,uint256,bytes memory) returns (bool)"
                                }
                              },
                              "id": 409,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6620:47:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                              "id": 410,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6669:52:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              },
                              "value": "ERC721: transfer to non ERC721Receiver implementer"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              }
                            ],
                            "id": 403,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "6612:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 411,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6612:110:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 412,
                        "nodeType": "ExpressionStatement",
                        "src": "6612:110:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 386,
                    "nodeType": "StructuredDocumentation",
                    "src": "5569:850:0",
                    "text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
                  },
                  "id": 414,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_safeTransfer",
                  "nameLocation": "6433:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 395,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 388,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "6464:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 414,
                        "src": "6456:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 387,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6456:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 390,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "6486:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 414,
                        "src": "6478:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 389,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6478:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 392,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "6506:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 414,
                        "src": "6498:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 391,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6498:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 394,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6536:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 414,
                        "src": "6523:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 393,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6523:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6446:100:0"
                  },
                  "returnParameters": {
                    "id": 396,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6564:0:0"
                  },
                  "scope": 944,
                  "src": "6424:305:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 426,
                    "nodeType": "Block",
                    "src": "6913:40:0",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 422,
                            "name": "_owners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 31,
                            "src": "6930:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 424,
                          "indexExpression": {
                            "id": 423,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 417,
                            "src": "6938:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6930:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 421,
                        "id": 425,
                        "nodeType": "Return",
                        "src": "6923:23:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 415,
                    "nodeType": "StructuredDocumentation",
                    "src": "6735:98:0",
                    "text": " @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"
                  },
                  "id": 427,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_ownerOf",
                  "nameLocation": "6847:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 418,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 417,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "6864:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 427,
                        "src": "6856:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 416,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6856:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6855:17:0"
                  },
                  "returnParameters": {
                    "id": 421,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 420,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 427,
                        "src": "6904:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 419,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6904:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6903:9:0"
                  },
                  "scope": 944,
                  "src": "6838:115:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 444,
                    "nodeType": "Block",
                    "src": "7327:55:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 442,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 436,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 430,
                                "src": "7353:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 435,
                              "name": "_ownerOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 427,
                              "src": "7344:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                "typeString": "function (uint256) view returns (address)"
                              }
                            },
                            "id": 437,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7344:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 440,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7373:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 439,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7365:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 438,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7365:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 441,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7365:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "7344:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 434,
                        "id": 443,
                        "nodeType": "Return",
                        "src": "7337:38:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 428,
                    "nodeType": "StructuredDocumentation",
                    "src": "6959:292:0",
                    "text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."
                  },
                  "id": 445,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_exists",
                  "nameLocation": "7265:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 431,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 430,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "7281:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 445,
                        "src": "7273:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 429,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7273:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7272:17:0"
                  },
                  "returnParameters": {
                    "id": 434,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 433,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 445,
                        "src": "7321:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 432,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7321:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7320:6:0"
                  },
                  "scope": 944,
                  "src": "7256:126:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 478,
                    "nodeType": "Block",
                    "src": "7639:162:0",
                    "statements": [
                      {
                        "assignments": [456],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 456,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "7657:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 478,
                            "src": "7649:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 455,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7649:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 461,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 459,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 450,
                              "src": "7680:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 457,
                              "name": "ERC721",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 944,
                              "src": "7665:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
                                "typeString": "type(contract ERC721)"
                              }
                            },
                            "id": 458,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 145,
                            "src": "7665:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 460,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7665:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7649:39:0"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 475,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 464,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 462,
                                    "name": "spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 448,
                                    "src": "7706:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "id": 463,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 456,
                                    "src": "7717:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "7706:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "||",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 466,
                                      "name": "owner",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 456,
                                      "src": "7743:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 467,
                                      "name": "spender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 448,
                                      "src": "7750:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 465,
                                    "name": "isApprovedForAll",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 309,
                                    "src": "7726:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                                      "typeString": "function (address,address) view returns (bool)"
                                    }
                                  },
                                  "id": 468,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7726:32:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "7706:52:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 474,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 471,
                                      "name": "tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 450,
                                      "src": "7774:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 470,
                                    "name": "getApproved",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 274,
                                    "src": "7762:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                      "typeString": "function (uint256) view returns (address)"
                                    }
                                  },
                                  "id": 472,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7762:20:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 473,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 448,
                                  "src": "7786:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "7762:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "7706:87:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 476,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "7705:89:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 454,
                        "id": 477,
                        "nodeType": "Return",
                        "src": "7698:96:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 446,
                    "nodeType": "StructuredDocumentation",
                    "src": "7388:147:0",
                    "text": " @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."
                  },
                  "id": 479,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_isApprovedOrOwner",
                  "nameLocation": "7549:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 451,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 448,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "7576:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 479,
                        "src": "7568:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 447,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7568:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 450,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "7593:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 479,
                        "src": "7585:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 449,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7585:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7567:34:0"
                  },
                  "returnParameters": {
                    "id": 454,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 453,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 479,
                        "src": "7633:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 452,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7633:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7632:6:0"
                  },
                  "scope": 944,
                  "src": "7540:261:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 493,
                    "nodeType": "Block",
                    "src": "8196:43:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 488,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 482,
                              "src": "8216:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 489,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 484,
                              "src": "8220:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "",
                              "id": 490,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8229:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "id": 487,
                            "name": "_safeMint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [494, 523],
                            "referencedDeclaration": 523,
                            "src": "8206:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (address,uint256,bytes memory)"
                            }
                          },
                          "id": 491,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8206:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 492,
                        "nodeType": "ExpressionStatement",
                        "src": "8206:26:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 480,
                    "nodeType": "StructuredDocumentation",
                    "src": "7807:319:0",
                    "text": " @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
                  },
                  "id": 494,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_safeMint",
                  "nameLocation": "8140:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 485,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 482,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "8158:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 494,
                        "src": "8150:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 481,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8150:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 484,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "8170:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 494,
                        "src": "8162:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 483,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8162:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8149:29:0"
                  },
                  "returnParameters": {
                    "id": 486,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8196:0:0"
                  },
                  "scope": 944,
                  "src": "8131:108:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 522,
                    "nodeType": "Block",
                    "src": "8574:195:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 505,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 497,
                              "src": "8590:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 506,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 499,
                              "src": "8594:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 504,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 600,
                            "src": "8584:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 507,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8584:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 508,
                        "nodeType": "ExpressionStatement",
                        "src": "8584:18:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 513,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8664:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 512,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "8656:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 511,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "8656:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 514,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8656:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 515,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 497,
                                  "src": "8668:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 516,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 499,
                                  "src": "8672:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 517,
                                  "name": "data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 501,
                                  "src": "8681:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 510,
                                "name": "_checkOnERC721Received",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 884,
                                "src": "8633:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                                  "typeString": "function (address,address,uint256,bytes memory) returns (bool)"
                                }
                              },
                              "id": 518,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8633:53:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                              "id": 519,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8700:52:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              },
                              "value": "ERC721: transfer to non ERC721Receiver implementer"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              }
                            ],
                            "id": 509,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "8612:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 520,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8612:150:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 521,
                        "nodeType": "ExpressionStatement",
                        "src": "8612:150:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 495,
                    "nodeType": "StructuredDocumentation",
                    "src": "8245:210:0",
                    "text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
                  },
                  "id": 523,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_safeMint",
                  "nameLocation": "8469:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 502,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 497,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "8496:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 523,
                        "src": "8488:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 496,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8488:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 499,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "8516:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 523,
                        "src": "8508:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 498,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8508:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 501,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "8546:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 523,
                        "src": "8533:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 500,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8533:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8478:78:0"
                  },
                  "returnParameters": {
                    "id": 503,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8574:0:0"
                  },
                  "scope": 944,
                  "src": "8460:309:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 599,
                    "nodeType": "Block",
                    "src": "9152:859:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 537,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 532,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 526,
                                "src": "9170:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 535,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "9184:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 534,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "9176:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 533,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "9176:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 536,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9176:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "9170:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                              "id": 538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9188:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                                "typeString": "literal_string \"ERC721: mint to the zero address\""
                              },
                              "value": "ERC721: mint to the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                                "typeString": "literal_string \"ERC721: mint to the zero address\""
                              }
                            ],
                            "id": 531,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "9162:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 539,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9162:61:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 540,
                        "nodeType": "ExpressionStatement",
                        "src": "9162:61:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 545,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "9241:17:0",
                              "subExpression": {
                                "arguments": [
                                  {
                                    "id": 543,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 528,
                                    "src": "9250:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 542,
                                  "name": "_exists",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 445,
                                  "src": "9242:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (uint256) view returns (bool)"
                                  }
                                },
                                "id": 544,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9242:16:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                              "id": 546,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9260:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                                "typeString": "literal_string \"ERC721: token already minted\""
                              },
                              "value": "ERC721: token already minted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                                "typeString": "literal_string \"ERC721: token already minted\""
                              }
                            ],
                            "id": 541,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "9233:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 547,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9233:58:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 548,
                        "nodeType": "ExpressionStatement",
                        "src": "9233:58:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 552,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9331:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 551,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9323:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 550,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9323:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 553,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9323:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 554,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 526,
                              "src": "9335:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 555,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 528,
                              "src": "9339:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "31",
                              "id": 556,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9348:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              }
                            ],
                            "id": 549,
                            "name": "_beforeTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 930,
                            "src": "9302:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 557,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9302:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 558,
                        "nodeType": "ExpressionStatement",
                        "src": "9302:48:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 563,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "9445:17:0",
                              "subExpression": {
                                "arguments": [
                                  {
                                    "id": 561,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 528,
                                    "src": "9454:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 560,
                                  "name": "_exists",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 445,
                                  "src": "9446:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (uint256) view returns (bool)"
                                  }
                                },
                                "id": 562,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9446:16:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                              "id": 564,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9464:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                                "typeString": "literal_string \"ERC721: token already minted\""
                              },
                              "value": "ERC721: token already minted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                                "typeString": "literal_string \"ERC721: token already minted\""
                              }
                            ],
                            "id": 559,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "9437:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 565,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9437:58:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 566,
                        "nodeType": "ExpressionStatement",
                        "src": "9437:58:0"
                      },
                      {
                        "id": 573,
                        "nodeType": "UncheckedBlock",
                        "src": "9506:360:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 571,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 567,
                                  "name": "_balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 35,
                                  "src": "9837:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 569,
                                "indexExpression": {
                                  "id": 568,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 526,
                                  "src": "9847:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "9837:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "+=",
                              "rightHandSide": {
                                "hexValue": "31",
                                "id": 570,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9854:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "9837:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 572,
                            "nodeType": "ExpressionStatement",
                            "src": "9837:18:0"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "id": 578,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 574,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 31,
                              "src": "9876:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 576,
                            "indexExpression": {
                              "id": 575,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 528,
                              "src": "9884:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9876:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 577,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 526,
                            "src": "9895:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "9876:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 579,
                        "nodeType": "ExpressionStatement",
                        "src": "9876:21:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 583,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9930:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 582,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9922:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 581,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9922:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 584,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9922:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 585,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 526,
                              "src": "9934:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 586,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 528,
                              "src": "9938:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 580,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 959,
                            "src": "9913:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 587,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9913:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 588,
                        "nodeType": "EmitStatement",
                        "src": "9908:38:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 592,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9985:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 591,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9977:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 590,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9977:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 593,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9977:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 594,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 526,
                              "src": "9989:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 595,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 528,
                              "src": "9993:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "31",
                              "id": 596,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10002:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              }
                            ],
                            "id": 589,
                            "name": "_afterTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 943,
                            "src": "9957:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 597,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9957:47:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 598,
                        "nodeType": "ExpressionStatement",
                        "src": "9957:47:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 524,
                    "nodeType": "StructuredDocumentation",
                    "src": "8775:311:0",
                    "text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
                  },
                  "id": 600,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_mint",
                  "nameLocation": "9100:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 529,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 526,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "9114:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 600,
                        "src": "9106:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 525,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9106:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 528,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "9126:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 600,
                        "src": "9118:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 527,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9118:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9105:29:0"
                  },
                  "returnParameters": {
                    "id": 530,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9152:0:0"
                  },
                  "scope": 944,
                  "src": "9091:920:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 666,
                    "nodeType": "Block",
                    "src": "10386:713:0",
                    "statements": [
                      {
                        "assignments": [607],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 607,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "10404:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 666,
                            "src": "10396:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 606,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10396:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 612,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 610,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 603,
                              "src": "10427:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 608,
                              "name": "ERC721",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 944,
                              "src": "10412:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
                                "typeString": "type(contract ERC721)"
                              }
                            },
                            "id": 609,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 145,
                            "src": "10412:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 611,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10412:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10396:39:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 614,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 607,
                              "src": "10467:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 617,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10482:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 616,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10474:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 615,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "10474:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 618,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10474:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 619,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 603,
                              "src": "10486:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "31",
                              "id": 620,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10495:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              }
                            ],
                            "id": 613,
                            "name": "_beforeTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 930,
                            "src": "10446:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 621,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10446:51:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 622,
                        "nodeType": "ExpressionStatement",
                        "src": "10446:51:0"
                      },
                      {
                        "expression": {
                          "id": 628,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 623,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 607,
                            "src": "10599:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 626,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 603,
                                "src": "10622:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 624,
                                "name": "ERC721",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 944,
                                "src": "10607:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
                                  "typeString": "type(contract ERC721)"
                                }
                              },
                              "id": 625,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "ownerOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 145,
                              "src": "10607:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                "typeString": "function (uint256) view returns (address)"
                              }
                            },
                            "id": 627,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10607:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "10599:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 629,
                        "nodeType": "ExpressionStatement",
                        "src": "10599:31:0"
                      },
                      {
                        "expression": {
                          "id": 633,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "10668:31:0",
                          "subExpression": {
                            "baseExpression": {
                              "id": 630,
                              "name": "_tokenApprovals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39,
                              "src": "10675:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 632,
                            "indexExpression": {
                              "id": 631,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 603,
                              "src": "10691:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10675:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 634,
                        "nodeType": "ExpressionStatement",
                        "src": "10668:31:0"
                      },
                      {
                        "id": 641,
                        "nodeType": "UncheckedBlock",
                        "src": "10710:237:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 639,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 635,
                                  "name": "_balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 35,
                                  "src": "10915:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 637,
                                "indexExpression": {
                                  "id": 636,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 607,
                                  "src": "10925:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "10915:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "hexValue": "31",
                                "id": 638,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10935:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "10915:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 640,
                            "nodeType": "ExpressionStatement",
                            "src": "10915:21:0"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "id": 645,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "10956:23:0",
                          "subExpression": {
                            "baseExpression": {
                              "id": 642,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 31,
                              "src": "10963:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 644,
                            "indexExpression": {
                              "id": 643,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 603,
                              "src": "10971:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10963:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 646,
                        "nodeType": "ExpressionStatement",
                        "src": "10956:23:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 648,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 607,
                              "src": "11004:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 651,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11019:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 650,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "11011:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 649,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "11011:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 652,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11011:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 653,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 603,
                              "src": "11023:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 647,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 959,
                            "src": "10995:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 654,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10995:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 655,
                        "nodeType": "EmitStatement",
                        "src": "10990:41:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 657,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 607,
                              "src": "11062:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 660,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11077:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 659,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "11069:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 658,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "11069:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 661,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11069:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 662,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 603,
                              "src": "11081:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "31",
                              "id": 663,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11090:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              }
                            ],
                            "id": 656,
                            "name": "_afterTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 943,
                            "src": "11042:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 664,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11042:50:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 665,
                        "nodeType": "ExpressionStatement",
                        "src": "11042:50:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 601,
                    "nodeType": "StructuredDocumentation",
                    "src": "10017:315:0",
                    "text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
                  },
                  "id": 667,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_burn",
                  "nameLocation": "10346:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 604,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 603,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "10360:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 667,
                        "src": "10352:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 602,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10352:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10351:17:0"
                  },
                  "returnParameters": {
                    "id": 605,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10386:0:0"
                  },
                  "scope": 944,
                  "src": "10337:762:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 751,
                    "nodeType": "Block",
                    "src": "11532:1124:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 680,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 674,
                                    "src": "11565:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 678,
                                    "name": "ERC721",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 944,
                                    "src": "11550:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
                                      "typeString": "type(contract ERC721)"
                                    }
                                  },
                                  "id": 679,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "ownerOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 145,
                                  "src": "11550:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                    "typeString": "function (uint256) view returns (address)"
                                  }
                                },
                                "id": 681,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "11550:23:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 682,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 670,
                                "src": "11577:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "11550:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
                              "id": 684,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11583:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
                                "typeString": "literal_string \"ERC721: transfer from incorrect owner\""
                              },
                              "value": "ERC721: transfer from incorrect owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
                                "typeString": "literal_string \"ERC721: transfer from incorrect owner\""
                              }
                            ],
                            "id": 677,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "11542:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11542:81:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 686,
                        "nodeType": "ExpressionStatement",
                        "src": "11542:81:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 693,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 688,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 672,
                                "src": "11641:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 691,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "11655:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 690,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "11647:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 689,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "11647:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 692,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "11647:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "11641:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
                              "id": 694,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11659:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                                "typeString": "literal_string \"ERC721: transfer to the zero address\""
                              },
                              "value": "ERC721: transfer to the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                                "typeString": "literal_string \"ERC721: transfer to the zero address\""
                              }
                            ],
                            "id": 687,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "11633:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 695,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11633:65:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 696,
                        "nodeType": "ExpressionStatement",
                        "src": "11633:65:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 698,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 670,
                              "src": "11730:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 699,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 672,
                              "src": "11736:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 700,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 674,
                              "src": "11740:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "31",
                              "id": 701,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11749:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              }
                            ],
                            "id": 697,
                            "name": "_beforeTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 930,
                            "src": "11709:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 702,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11709:42:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 703,
                        "nodeType": "ExpressionStatement",
                        "src": "11709:42:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 710,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 707,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 674,
                                    "src": "11866:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 705,
                                    "name": "ERC721",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 944,
                                    "src": "11851:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
                                      "typeString": "type(contract ERC721)"
                                    }
                                  },
                                  "id": 706,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "ownerOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 145,
                                  "src": "11851:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                    "typeString": "function (uint256) view returns (address)"
                                  }
                                },
                                "id": 708,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "11851:23:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 709,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 670,
                                "src": "11878:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "11851:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
                              "id": 711,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11884:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
                                "typeString": "literal_string \"ERC721: transfer from incorrect owner\""
                              },
                              "value": "ERC721: transfer from incorrect owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
                                "typeString": "literal_string \"ERC721: transfer from incorrect owner\""
                              }
                            ],
                            "id": 704,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "11843:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 712,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11843:81:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 713,
                        "nodeType": "ExpressionStatement",
                        "src": "11843:81:0"
                      },
                      {
                        "expression": {
                          "id": 717,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "11986:31:0",
                          "subExpression": {
                            "baseExpression": {
                              "id": 714,
                              "name": "_tokenApprovals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39,
                              "src": "11993:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 716,
                            "indexExpression": {
                              "id": 715,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 674,
                              "src": "12009:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11993:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 718,
                        "nodeType": "ExpressionStatement",
                        "src": "11986:31:0"
                      },
                      {
                        "id": 731,
                        "nodeType": "UncheckedBlock",
                        "src": "12028:496:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 723,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 719,
                                  "name": "_balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 35,
                                  "src": "12461:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 721,
                                "indexExpression": {
                                  "id": 720,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 670,
                                  "src": "12471:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "12461:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "hexValue": "31",
                                "id": 722,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12480:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "12461:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 724,
                            "nodeType": "ExpressionStatement",
                            "src": "12461:20:0"
                          },
                          {
                            "expression": {
                              "id": 729,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 725,
                                  "name": "_balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 35,
                                  "src": "12495:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 727,
                                "indexExpression": {
                                  "id": 726,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 672,
                                  "src": "12505:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "12495:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "+=",
                              "rightHandSide": {
                                "hexValue": "31",
                                "id": 728,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12512:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "12495:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 730,
                            "nodeType": "ExpressionStatement",
                            "src": "12495:18:0"
                          }
                        ]
                      },
                      {
                        "expression": {
                          "id": 736,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 732,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 31,
                              "src": "12533:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 734,
                            "indexExpression": {
                              "id": 733,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 674,
                              "src": "12541:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "12533:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 735,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 672,
                            "src": "12552:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "12533:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 737,
                        "nodeType": "ExpressionStatement",
                        "src": "12533:21:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 739,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 670,
                              "src": "12579:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 740,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 672,
                              "src": "12585:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 741,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 674,
                              "src": "12589:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 738,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 959,
                            "src": "12570:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 742,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12570:27:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 743,
                        "nodeType": "EmitStatement",
                        "src": "12565:32:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 745,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 670,
                              "src": "12628:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 746,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 672,
                              "src": "12634:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 747,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 674,
                              "src": "12638:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "31",
                              "id": 748,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12647:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              }
                            ],
                            "id": 744,
                            "name": "_afterTokenTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 943,
                            "src": "12608:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 749,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12608:41:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 750,
                        "nodeType": "ExpressionStatement",
                        "src": "12608:41:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 668,
                    "nodeType": "StructuredDocumentation",
                    "src": "11105:313:0",
                    "text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
                  },
                  "id": 752,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transfer",
                  "nameLocation": "11432:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 675,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 670,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "11459:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 752,
                        "src": "11451:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 669,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11451:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 672,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "11481:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 752,
                        "src": "11473:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 671,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11473:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 674,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "11501:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 752,
                        "src": "11493:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 673,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11493:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11441:73:0"
                  },
                  "returnParameters": {
                    "id": 676,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11532:0:0"
                  },
                  "scope": 944,
                  "src": "11423:1233:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 775,
                    "nodeType": "Block",
                    "src": "12832:107:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 760,
                              "name": "_tokenApprovals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39,
                              "src": "12842:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 762,
                            "indexExpression": {
                              "id": 761,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 757,
                              "src": "12858:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "12842:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 763,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 755,
                            "src": "12869:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "12842:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 765,
                        "nodeType": "ExpressionStatement",
                        "src": "12842:29:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 769,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 757,
                                  "src": "12910:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 767,
                                  "name": "ERC721",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 944,
                                  "src": "12895:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ERC721_$944_$",
                                    "typeString": "type(contract ERC721)"
                                  }
                                },
                                "id": 768,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "ownerOf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 145,
                                "src": "12895:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                  "typeString": "function (uint256) view returns (address)"
                                }
                              },
                              "id": 770,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12895:23:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 771,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 755,
                              "src": "12920:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 772,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 757,
                              "src": "12924:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 766,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 968,
                            "src": "12886:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12886:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 774,
                        "nodeType": "EmitStatement",
                        "src": "12881:51:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 753,
                    "nodeType": "StructuredDocumentation",
                    "src": "12662:101:0",
                    "text": " @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."
                  },
                  "id": 776,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_approve",
                  "nameLocation": "12777:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 758,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 755,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "12794:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 776,
                        "src": "12786:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 754,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12786:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 757,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "12806:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 776,
                        "src": "12798:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 756,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12798:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12785:29:0"
                  },
                  "returnParameters": {
                    "id": 759,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12832:0:0"
                  },
                  "scope": 944,
                  "src": "12768:171:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 807,
                    "nodeType": "Block",
                    "src": "13198:184:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 789,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 787,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 779,
                                "src": "13216:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 788,
                                "name": "operator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 781,
                                "src": "13225:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "13216:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
                              "id": 790,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "13235:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                                "typeString": "literal_string \"ERC721: approve to caller\""
                              },
                              "value": "ERC721: approve to caller"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                                "typeString": "literal_string \"ERC721: approve to caller\""
                              }
                            ],
                            "id": 786,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "13208:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 791,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13208:55:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 792,
                        "nodeType": "ExpressionStatement",
                        "src": "13208:55:0"
                      },
                      {
                        "expression": {
                          "id": 799,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 793,
                                "name": "_operatorApprovals",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 45,
                                "src": "13273:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                  "typeString": "mapping(address => mapping(address => bool))"
                                }
                              },
                              "id": 796,
                              "indexExpression": {
                                "id": 794,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 779,
                                "src": "13292:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "13273:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 797,
                            "indexExpression": {
                              "id": 795,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 781,
                              "src": "13299:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "13273:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 798,
                            "name": "approved",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 783,
                            "src": "13311:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "13273:46:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 800,
                        "nodeType": "ExpressionStatement",
                        "src": "13273:46:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 802,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 779,
                              "src": "13349:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 803,
                              "name": "operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 781,
                              "src": "13356:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 804,
                              "name": "approved",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 783,
                              "src": "13366:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 801,
                            "name": "ApprovalForAll",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 977,
                            "src": "13334:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
                              "typeString": "function (address,address,bool)"
                            }
                          },
                          "id": 805,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13334:41:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 806,
                        "nodeType": "EmitStatement",
                        "src": "13329:46:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 777,
                    "nodeType": "StructuredDocumentation",
                    "src": "12945:125:0",
                    "text": " @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."
                  },
                  "id": 808,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_setApprovalForAll",
                  "nameLocation": "13084:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 784,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 779,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "13120:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "13112:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 778,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13112:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 781,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "13143:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "13135:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 780,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13135:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 783,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "13166:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "13161:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 782,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "13161:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13102:78:0"
                  },
                  "returnParameters": {
                    "id": 785,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13198:0:0"
                  },
                  "scope": 944,
                  "src": "13075:307:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 821,
                    "nodeType": "Block",
                    "src": "13529:70:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 816,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 811,
                                  "src": "13555:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 815,
                                "name": "_exists",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 445,
                                "src": "13547:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (uint256) view returns (bool)"
                                }
                              },
                              "id": 817,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "13547:16:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
                              "id": 818,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "13565:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
                                "typeString": "literal_string \"ERC721: invalid token ID\""
                              },
                              "value": "ERC721: invalid token ID"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
                                "typeString": "literal_string \"ERC721: invalid token ID\""
                              }
                            ],
                            "id": 814,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "13539:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 819,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13539:53:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 820,
                        "nodeType": "ExpressionStatement",
                        "src": "13539:53:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 809,
                    "nodeType": "StructuredDocumentation",
                    "src": "13388:73:0",
                    "text": " @dev Reverts if the `tokenId` has not been minted yet."
                  },
                  "id": 822,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_requireMinted",
                  "nameLocation": "13475:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 812,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 811,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "13498:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 822,
                        "src": "13490:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 810,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13490:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13489:17:0"
                  },
                  "returnParameters": {
                    "id": 813,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13529:0:0"
                  },
                  "scope": 944,
                  "src": "13466:133:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 883,
                    "nodeType": "Block",
                    "src": "14306:676:0",
                    "statements": [
                      {
                        "condition": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 836,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 827,
                              "src": "14320:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 837,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "isContract",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1123,
                            "src": "14320:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 838,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14320:15:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 881,
                          "nodeType": "Block",
                          "src": "14940:36:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 879,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "14961:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 835,
                              "id": 880,
                              "nodeType": "Return",
                              "src": "14954:11:0"
                            }
                          ]
                        },
                        "id": 882,
                        "nodeType": "IfStatement",
                        "src": "14316:660:0",
                        "trueBody": {
                          "id": 878,
                          "nodeType": "Block",
                          "src": "14337:597:0",
                          "statements": [
                            {
                              "clauses": [
                                {
                                  "block": {
                                    "id": 858,
                                    "nodeType": "Block",
                                    "src": "14451:91:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "commonType": {
                                            "typeIdentifier": "t_bytes4",
                                            "typeString": "bytes4"
                                          },
                                          "id": 856,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 852,
                                            "name": "retval",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 850,
                                            "src": "14476:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes4",
                                              "typeString": "bytes4"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "==",
                                          "rightExpression": {
                                            "expression": {
                                              "expression": {
                                                "id": 853,
                                                "name": "IERC721Receiver",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1078,
                                                "src": "14486:15:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1078_$",
                                                  "typeString": "type(contract IERC721Receiver)"
                                                }
                                              },
                                              "id": 854,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "memberName": "onERC721Received",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1077,
                                              "src": "14486:32:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
                                                "typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
                                              }
                                            },
                                            "id": 855,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "memberName": "selector",
                                            "nodeType": "MemberAccess",
                                            "src": "14486:41:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes4",
                                              "typeString": "bytes4"
                                            }
                                          },
                                          "src": "14476:51:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "functionReturnParameters": 835,
                                        "id": 857,
                                        "nodeType": "Return",
                                        "src": "14469:58:0"
                                      }
                                    ]
                                  },
                                  "errorName": "",
                                  "id": 859,
                                  "nodeType": "TryCatchClause",
                                  "parameters": {
                                    "id": 851,
                                    "nodeType": "ParameterList",
                                    "parameters": [
                                      {
                                        "constant": false,
                                        "id": 850,
                                        "mutability": "mutable",
                                        "name": "retval",
                                        "nameLocation": "14443:6:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 859,
                                        "src": "14436:13:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes4",
                                          "typeString": "bytes4"
                                        },
                                        "typeName": {
                                          "id": 849,
                                          "name": "bytes4",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "14436:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes4",
                                            "typeString": "bytes4"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "src": "14435:15:0"
                                  },
                                  "src": "14427:115:0"
                                },
                                {
                                  "block": {
                                    "id": 875,
                                    "nodeType": "Block",
                                    "src": "14571:353:0",
                                    "statements": [
                                      {
                                        "condition": {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 866,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "expression": {
                                              "id": 863,
                                              "name": "reason",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 861,
                                              "src": "14593:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            },
                                            "id": 864,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "length",
                                            "nodeType": "MemberAccess",
                                            "src": "14593:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "==",
                                          "rightExpression": {
                                            "hexValue": "30",
                                            "id": 865,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "14610:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_0_by_1",
                                              "typeString": "int_const 0"
                                            },
                                            "value": "0"
                                          },
                                          "src": "14593:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "falseBody": {
                                          "id": 873,
                                          "nodeType": "Block",
                                          "src": "14720:190:0",
                                          "statements": [
                                            {
                                              "AST": {
                                                "nodeType": "YulBlock",
                                                "src": "14806:86:0",
                                                "statements": [
                                                  {
                                                    "expression": {
                                                      "arguments": [
                                                        {
                                                          "arguments": [
                                                            {
                                                              "kind": "number",
                                                              "nodeType": "YulLiteral",
                                                              "src": "14843:2:0",
                                                              "type": "",
                                                              "value": "32"
                                                            },
                                                            {
                                                              "name": "reason",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "14847:6:0"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "add",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "14839:3:0"
                                                          },
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "14839:15:0"
                                                        },
                                                        {
                                                          "arguments": [
                                                            {
                                                              "name": "reason",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "14862:6:0"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "mload",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "14856:5:0"
                                                          },
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "14856:13:0"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "revert",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "14832:6:0"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "14832:38:0"
                                                    },
                                                    "nodeType": "YulExpressionStatement",
                                                    "src": "14832:38:0"
                                                  }
                                                ]
                                              },
                                              "documentation": "@solidity memory-safe-assembly",
                                              "evmVersion": "london",
                                              "externalReferences": [
                                                {
                                                  "declaration": 861,
                                                  "isOffset": false,
                                                  "isSlot": false,
                                                  "src": "14847:6:0",
                                                  "valueSize": 1
                                                },
                                                {
                                                  "declaration": 861,
                                                  "isOffset": false,
                                                  "isSlot": false,
                                                  "src": "14862:6:0",
                                                  "valueSize": 1
                                                }
                                              ],
                                              "id": 872,
                                              "nodeType": "InlineAssembly",
                                              "src": "14797:95:0"
                                            }
                                          ]
                                        },
                                        "id": 874,
                                        "nodeType": "IfStatement",
                                        "src": "14589:321:0",
                                        "trueBody": {
                                          "id": 871,
                                          "nodeType": "Block",
                                          "src": "14613:101:0",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                                                    "id": 868,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "string",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "14642:52:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                                      "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                                                    },
                                                    "value": "ERC721: transfer to non ERC721Receiver implementer"
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                                      "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                                                    }
                                                  ],
                                                  "id": 867,
                                                  "name": "revert",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [
                                                    -19, -19
                                                  ],
                                                  "referencedDeclaration": -19,
                                                  "src": "14635:6:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                                    "typeString": "function (string memory) pure"
                                                  }
                                                },
                                                "id": 869,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "14635:60:0",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_tuple$__$",
                                                  "typeString": "tuple()"
                                                }
                                              },
                                              "id": 870,
                                              "nodeType": "ExpressionStatement",
                                              "src": "14635:60:0"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "errorName": "",
                                  "id": 876,
                                  "nodeType": "TryCatchClause",
                                  "parameters": {
                                    "id": 862,
                                    "nodeType": "ParameterList",
                                    "parameters": [
                                      {
                                        "constant": false,
                                        "id": 861,
                                        "mutability": "mutable",
                                        "name": "reason",
                                        "nameLocation": "14563:6:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 876,
                                        "src": "14550:19:0",
                                        "stateVariable": false,
                                        "storageLocation": "memory",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes"
                                        },
                                        "typeName": {
                                          "id": 860,
                                          "name": "bytes",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "14550:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_storage_ptr",
                                            "typeString": "bytes"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "src": "14549:21:0"
                                  },
                                  "src": "14543:381:0"
                                }
                              ],
                              "externalCall": {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 843,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1494,
                                      "src": "14392:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 844,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "14392:12:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 845,
                                    "name": "from",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 825,
                                    "src": "14406:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 846,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 829,
                                    "src": "14412:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 847,
                                    "name": "data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 831,
                                    "src": "14421:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 840,
                                        "name": "to",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 827,
                                        "src": "14371:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 839,
                                      "name": "IERC721Receiver",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1078,
                                      "src": "14355:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1078_$",
                                        "typeString": "type(contract IERC721Receiver)"
                                      }
                                    },
                                    "id": 841,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "14355:19:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC721Receiver_$1078",
                                      "typeString": "contract IERC721Receiver"
                                    }
                                  },
                                  "id": 842,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "onERC721Received",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1077,
                                  "src": "14355:36:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
                                    "typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
                                  }
                                },
                                "id": 848,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14355:71:0",
                                "tryCall": true,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              "id": 877,
                              "nodeType": "TryStatement",
                              "src": "14351:573:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 823,
                    "nodeType": "StructuredDocumentation",
                    "src": "13605:541:0",
                    "text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
                  },
                  "id": 884,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_checkOnERC721Received",
                  "nameLocation": "14160:22:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 832,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 825,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "14200:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 884,
                        "src": "14192:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 824,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14192:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 827,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "14222:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 884,
                        "src": "14214:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 826,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14214:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 829,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "14242:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 884,
                        "src": "14234:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 828,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14234:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 831,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "14272:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 884,
                        "src": "14259:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 830,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "14259:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14182:100:0"
                  },
                  "returnParameters": {
                    "id": 835,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 834,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 884,
                        "src": "14300:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 833,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "14300:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14299:6:0"
                  },
                  "scope": 944,
                  "src": "14151:831:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 929,
                    "nodeType": "Block",
                    "src": "15856:238:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 898,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 896,
                            "name": "batchSize",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 893,
                            "src": "15870:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15882:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "15870:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 928,
                        "nodeType": "IfStatement",
                        "src": "15866:222:0",
                        "trueBody": {
                          "id": 927,
                          "nodeType": "Block",
                          "src": "15885:203:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 904,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 899,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 887,
                                  "src": "15903:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 902,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "15919:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 901,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "15911:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 900,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "15911:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 903,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "15911:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "15903:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 912,
                              "nodeType": "IfStatement",
                              "src": "15899:85:0",
                              "trueBody": {
                                "id": 911,
                                "nodeType": "Block",
                                "src": "15923:61:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 909,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 905,
                                          "name": "_balances",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 35,
                                          "src": "15941:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                            "typeString": "mapping(address => uint256)"
                                          }
                                        },
                                        "id": 907,
                                        "indexExpression": {
                                          "id": 906,
                                          "name": "from",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 887,
                                          "src": "15951:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "15941:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "-=",
                                      "rightHandSide": {
                                        "id": 908,
                                        "name": "batchSize",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 893,
                                        "src": "15960:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "15941:28:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 910,
                                    "nodeType": "ExpressionStatement",
                                    "src": "15941:28:0"
                                  }
                                ]
                              }
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 918,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 913,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 889,
                                  "src": "16001:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 916,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "16015:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 915,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "16007:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 914,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "16007:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 917,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "16007:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "16001:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 926,
                              "nodeType": "IfStatement",
                              "src": "15997:81:0",
                              "trueBody": {
                                "id": 925,
                                "nodeType": "Block",
                                "src": "16019:59:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 923,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 919,
                                          "name": "_balances",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 35,
                                          "src": "16037:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                            "typeString": "mapping(address => uint256)"
                                          }
                                        },
                                        "id": 921,
                                        "indexExpression": {
                                          "id": 920,
                                          "name": "to",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 889,
                                          "src": "16047:2:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "16037:13:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "+=",
                                      "rightHandSide": {
                                        "id": 922,
                                        "name": "batchSize",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 893,
                                        "src": "16054:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "16037:26:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 924,
                                    "nodeType": "ExpressionStatement",
                                    "src": "16037:26:0"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 885,
                    "nodeType": "StructuredDocumentation",
                    "src": "14988:705:0",
                    "text": " @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
                  },
                  "id": 930,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_beforeTokenTransfer",
                  "nameLocation": "15707:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 894,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 887,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "15745:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 930,
                        "src": "15737:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 886,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "15737:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 889,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "15767:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 930,
                        "src": "15759:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 888,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "15759:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 891,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 930,
                        "src": "15779:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 890,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15779:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 893,
                        "mutability": "mutable",
                        "name": "batchSize",
                        "nameLocation": "15823:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 930,
                        "src": "15815:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 892,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15815:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15727:111:0"
                  },
                  "returnParameters": {
                    "id": 895,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15856:0:0"
                  },
                  "scope": 944,
                  "src": "15698:396:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 942,
                    "nodeType": "Block",
                    "src": "16951:2:0",
                    "statements": []
                  },
                  "documentation": {
                    "id": 931,
                    "nodeType": "StructuredDocumentation",
                    "src": "16100:695:0",
                    "text": " @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
                  },
                  "id": 943,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_afterTokenTransfer",
                  "nameLocation": "16809:19:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 940,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 933,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "16846:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 943,
                        "src": "16838:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 932,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "16838:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 935,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "16868:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 943,
                        "src": "16860:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 934,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "16860:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 937,
                        "mutability": "mutable",
                        "name": "firstTokenId",
                        "nameLocation": "16888:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 943,
                        "src": "16880:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 936,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "16880:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 939,
                        "mutability": "mutable",
                        "name": "batchSize",
                        "nameLocation": "16918:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 943,
                        "src": "16910:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 938,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "16910:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16828:105:0"
                  },
                  "returnParameters": {
                    "id": 941,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16951:0:0"
                  },
                  "scope": 944,
                  "src": "16800:153:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 945,
              "src": "628:16327:0",
              "usedErrors": []
            }
          ],
          "src": "107:16849:0"
        },
        "id": 0
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
          "exportedSymbols": { "IERC165": [1789], "IERC721": [1060] },
          "id": 1061,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 946,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "108:23:1"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
              "file": "../../utils/introspection/IERC165.sol",
              "id": 947,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1061,
              "sourceUnit": 1790,
              "src": "133:47:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 949,
                    "name": "IERC165",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1789,
                    "src": "271:7:1"
                  },
                  "id": 950,
                  "nodeType": "InheritanceSpecifier",
                  "src": "271:7:1"
                }
              ],
              "canonicalName": "IERC721",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 948,
                "nodeType": "StructuredDocumentation",
                "src": "182:67:1",
                "text": " @dev Required interface of an ERC721 compliant contract."
              },
              "fullyImplemented": false,
              "id": 1060,
              "linearizedBaseContracts": [1060, 1789],
              "name": "IERC721",
              "nameLocation": "260:7:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 951,
                    "nodeType": "StructuredDocumentation",
                    "src": "285:88:1",
                    "text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
                  },
                  "id": 959,
                  "name": "Transfer",
                  "nameLocation": "384:8:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 958,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 953,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "409:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 959,
                        "src": "393:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 952,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "393:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 955,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "431:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 959,
                        "src": "415:18:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 954,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "415:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 957,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "451:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 959,
                        "src": "435:23:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 956,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "435:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "392:67:1"
                  },
                  "src": "378:82:1"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 960,
                    "nodeType": "StructuredDocumentation",
                    "src": "466:94:1",
                    "text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
                  },
                  "id": 968,
                  "name": "Approval",
                  "nameLocation": "571:8:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 967,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 962,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "596:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 968,
                        "src": "580:21:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 961,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "580:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 964,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "619:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 968,
                        "src": "603:24:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 963,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "603:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 966,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "645:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 968,
                        "src": "629:23:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 965,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "629:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "579:74:1"
                  },
                  "src": "565:89:1"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 969,
                    "nodeType": "StructuredDocumentation",
                    "src": "660:117:1",
                    "text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
                  },
                  "id": 977,
                  "name": "ApprovalForAll",
                  "nameLocation": "788:14:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 976,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 971,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "819:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 977,
                        "src": "803:21:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 970,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "803:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 973,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "842:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 977,
                        "src": "826:24:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 972,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "826:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 975,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "857:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 977,
                        "src": "852:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 974,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "852:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "802:64:1"
                  },
                  "src": "782:85:1"
                },
                {
                  "documentation": {
                    "id": 978,
                    "nodeType": "StructuredDocumentation",
                    "src": "873:76:1",
                    "text": " @dev Returns the number of tokens in ``owner``'s account."
                  },
                  "functionSelector": "70a08231",
                  "id": 985,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "963:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 981,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 980,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "981:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 985,
                        "src": "973:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 979,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "973:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "972:15:1"
                  },
                  "returnParameters": {
                    "id": 984,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 983,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "1019:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 985,
                        "src": "1011:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 982,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1011:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1010:17:1"
                  },
                  "scope": 1060,
                  "src": "954:74:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 986,
                    "nodeType": "StructuredDocumentation",
                    "src": "1034:131:1",
                    "text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
                  },
                  "functionSelector": "6352211e",
                  "id": 993,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ownerOf",
                  "nameLocation": "1179:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 989,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 988,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1195:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 993,
                        "src": "1187:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 987,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1187:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1186:17:1"
                  },
                  "returnParameters": {
                    "id": 992,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 991,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1235:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 993,
                        "src": "1227:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 990,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1227:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1226:15:1"
                  },
                  "scope": 1060,
                  "src": "1170:72:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 994,
                    "nodeType": "StructuredDocumentation",
                    "src": "1248:556:1",
                    "text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "b88d4fde",
                  "id": 1005,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "1818:16:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1003,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 996,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "1852:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "1844:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 995,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1844:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 998,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1874:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "1866:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 997,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1866:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1000,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1894:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "1886:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 999,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1886:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1002,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "1926:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1005,
                        "src": "1911:19:1",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1001,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1911:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1834:102:1"
                  },
                  "returnParameters": {
                    "id": 1004,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1945:0:1"
                  },
                  "scope": 1060,
                  "src": "1809:137:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1006,
                    "nodeType": "StructuredDocumentation",
                    "src": "1952:687:1",
                    "text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "42842e0e",
                  "id": 1015,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "2653:16:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1013,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1008,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2687:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1015,
                        "src": "2679:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1007,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2679:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1010,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2709:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1015,
                        "src": "2701:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1009,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2701:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1012,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2729:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1015,
                        "src": "2721:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1011,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2721:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2669:73:1"
                  },
                  "returnParameters": {
                    "id": 1014,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2751:0:1"
                  },
                  "scope": 1060,
                  "src": "2644:108:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1016,
                    "nodeType": "StructuredDocumentation",
                    "src": "2758:732:1",
                    "text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 1025,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "3504:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1023,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1018,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "3534:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "3526:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1017,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3526:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1020,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3556:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "3548:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1019,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3548:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1022,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3576:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "3568:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1021,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3568:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3516:73:1"
                  },
                  "returnParameters": {
                    "id": 1024,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3598:0:1"
                  },
                  "scope": 1060,
                  "src": "3495:104:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1026,
                    "nodeType": "StructuredDocumentation",
                    "src": "3605:452:1",
                    "text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 1033,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "4071:7:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1031,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1028,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "4087:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1033,
                        "src": "4079:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1027,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4079:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1030,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4099:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1033,
                        "src": "4091:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1029,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4091:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4078:29:1"
                  },
                  "returnParameters": {
                    "id": 1032,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4116:0:1"
                  },
                  "scope": 1060,
                  "src": "4062:55:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1034,
                    "nodeType": "StructuredDocumentation",
                    "src": "4123:309:1",
                    "text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
                  },
                  "functionSelector": "a22cb465",
                  "id": 1041,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setApprovalForAll",
                  "nameLocation": "4446:17:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1039,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1036,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4472:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1041,
                        "src": "4464:16:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1035,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4464:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1038,
                        "mutability": "mutable",
                        "name": "_approved",
                        "nameLocation": "4487:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1041,
                        "src": "4482:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1037,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4482:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4463:34:1"
                  },
                  "returnParameters": {
                    "id": 1040,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4506:0:1"
                  },
                  "scope": 1060,
                  "src": "4437:70:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1042,
                    "nodeType": "StructuredDocumentation",
                    "src": "4513:139:1",
                    "text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
                  },
                  "functionSelector": "081812fc",
                  "id": 1049,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getApproved",
                  "nameLocation": "4666:11:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1045,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1044,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4686:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1049,
                        "src": "4678:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1043,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4678:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4677:17:1"
                  },
                  "returnParameters": {
                    "id": 1048,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1047,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4726:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1049,
                        "src": "4718:16:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1046,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4718:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4717:18:1"
                  },
                  "scope": 1060,
                  "src": "4657:79:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1050,
                    "nodeType": "StructuredDocumentation",
                    "src": "4742:138:1",
                    "text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
                  },
                  "functionSelector": "e985e9c5",
                  "id": 1059,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isApprovedForAll",
                  "nameLocation": "4894:16:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1055,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1052,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "4919:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1059,
                        "src": "4911:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1051,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4911:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1054,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "4934:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1059,
                        "src": "4926:16:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1053,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4926:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4910:33:1"
                  },
                  "returnParameters": {
                    "id": 1058,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1057,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1059,
                        "src": "4967:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1056,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4967:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4966:6:1"
                  },
                  "scope": 1060,
                  "src": "4885:88:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1061,
              "src": "250:4725:1",
              "usedErrors": []
            }
          ],
          "src": "108:4868:1"
        },
        "id": 1
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
          "exportedSymbols": { "IERC721Receiver": [1078] },
          "id": 1079,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1062,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "116:23:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC721Receiver",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1063,
                "nodeType": "StructuredDocumentation",
                "src": "141:152:2",
                "text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
              },
              "fullyImplemented": false,
              "id": 1078,
              "linearizedBaseContracts": [1078],
              "name": "IERC721Receiver",
              "nameLocation": "304:15:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1064,
                    "nodeType": "StructuredDocumentation",
                    "src": "326:493:2",
                    "text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
                  },
                  "functionSelector": "150b7a02",
                  "id": 1077,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "onERC721Received",
                  "nameLocation": "833:16:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1073,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1066,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "867:8:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1077,
                        "src": "859:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1065,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "859:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1068,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "893:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1077,
                        "src": "885:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1067,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "885:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1070,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "915:7:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1077,
                        "src": "907:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1069,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "907:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1072,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "947:4:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1077,
                        "src": "932:19:2",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1071,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "932:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "849:108:2"
                  },
                  "returnParameters": {
                    "id": 1076,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1075,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1077,
                        "src": "976:6:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1074,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "976:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "975:8:2"
                  },
                  "scope": 1078,
                  "src": "824:160:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1079,
              "src": "294:692:2",
              "usedErrors": []
            }
          ],
          "src": "116:871:2"
        },
        "id": 2
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
          "exportedSymbols": {
            "IERC165": [1789],
            "IERC721": [1060],
            "IERC721Metadata": [1105]
          },
          "id": 1106,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1080,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "112:23:3"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
              "file": "../IERC721.sol",
              "id": 1081,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1106,
              "sourceUnit": 1061,
              "src": "137:24:3",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1083,
                    "name": "IERC721",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1060,
                    "src": "326:7:3"
                  },
                  "id": 1084,
                  "nodeType": "InheritanceSpecifier",
                  "src": "326:7:3"
                }
              ],
              "canonicalName": "IERC721Metadata",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1082,
                "nodeType": "StructuredDocumentation",
                "src": "163:133:3",
                "text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
              },
              "fullyImplemented": false,
              "id": 1105,
              "linearizedBaseContracts": [1105, 1060, 1789],
              "name": "IERC721Metadata",
              "nameLocation": "307:15:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1085,
                    "nodeType": "StructuredDocumentation",
                    "src": "340:58:3",
                    "text": " @dev Returns the token collection name."
                  },
                  "functionSelector": "06fdde03",
                  "id": 1090,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "name",
                  "nameLocation": "412:4:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1086,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "416:2:3"
                  },
                  "returnParameters": {
                    "id": 1089,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1088,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1090,
                        "src": "442:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1087,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "442:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "441:15:3"
                  },
                  "scope": 1105,
                  "src": "403:54:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1091,
                    "nodeType": "StructuredDocumentation",
                    "src": "463:60:3",
                    "text": " @dev Returns the token collection symbol."
                  },
                  "functionSelector": "95d89b41",
                  "id": 1096,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "symbol",
                  "nameLocation": "537:6:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1092,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "543:2:3"
                  },
                  "returnParameters": {
                    "id": 1095,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1094,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1096,
                        "src": "569:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1093,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "569:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "568:15:3"
                  },
                  "scope": 1105,
                  "src": "528:56:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1097,
                    "nodeType": "StructuredDocumentation",
                    "src": "590:90:3",
                    "text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
                  },
                  "functionSelector": "c87b56dd",
                  "id": 1104,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenURI",
                  "nameLocation": "694:8:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1100,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1099,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "711:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1104,
                        "src": "703:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1098,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "703:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "702:17:3"
                  },
                  "returnParameters": {
                    "id": 1103,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1102,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1104,
                        "src": "743:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1101,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "743:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "742:15:3"
                  },
                  "scope": 1105,
                  "src": "685:73:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1106,
              "src": "297:463:3",
              "usedErrors": []
            }
          ],
          "src": "112:649:3"
        },
        "id": 3
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Address.sol",
          "exportedSymbols": { "Address": [1435] },
          "id": 1436,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1107,
              "literals": ["solidity", "^", "0.8", ".1"],
              "nodeType": "PragmaDirective",
              "src": "101:23:4"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Address",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1108,
                "nodeType": "StructuredDocumentation",
                "src": "126:67:4",
                "text": " @dev Collection of functions related to the address type"
              },
              "fullyImplemented": true,
              "id": 1435,
              "linearizedBaseContracts": [1435],
              "name": "Address",
              "nameLocation": "202:7:4",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1122,
                    "nodeType": "Block",
                    "src": "1241:254:4",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1120,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "expression": {
                                "id": 1116,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1111,
                                "src": "1465:7:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1117,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "code",
                              "nodeType": "MemberAccess",
                              "src": "1465:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1118,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "1465:19:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1487:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1465:23:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1115,
                        "id": 1121,
                        "nodeType": "Return",
                        "src": "1458:30:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1109,
                    "nodeType": "StructuredDocumentation",
                    "src": "216:954:4",
                    "text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
                  },
                  "id": 1123,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isContract",
                  "nameLocation": "1184:10:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1112,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1111,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "1203:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1123,
                        "src": "1195:15:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1110,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1195:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1194:17:4"
                  },
                  "returnParameters": {
                    "id": 1115,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1114,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1123,
                        "src": "1235:4:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1113,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1235:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1234:6:4"
                  },
                  "scope": 1435,
                  "src": "1175:320:4",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1156,
                    "nodeType": "Block",
                    "src": "2483:241:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1138,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1134,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "2509:4:4",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$1435",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$1435",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 1133,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2501:7:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1132,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2501:7:4",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1135,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2501:13:4",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 1136,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "2501:21:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1137,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1128,
                                "src": "2526:6:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2501:31:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                              "id": 1139,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2534:31:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              },
                              "value": "Address: insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              }
                            ],
                            "id": 1131,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2493:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2493:73:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1141,
                        "nodeType": "ExpressionStatement",
                        "src": "2493:73:4"
                      },
                      {
                        "assignments": [1143, null],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1143,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "2583:7:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1156,
                            "src": "2578:12:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1142,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "2578:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 1150,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 1148,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2626:2:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 1144,
                                "name": "recipient",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1126,
                                "src": "2596:9:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 1145,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "2596:14:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1147,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": ["value"],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1146,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1128,
                                "src": "2618:6:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "2596:29:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1149,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2596:33:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2577:52:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1152,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1143,
                              "src": "2647:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                              "id": 1153,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2656:60:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              },
                              "value": "Address: unable to send value, recipient may have reverted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              }
                            ],
                            "id": 1151,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2639:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1154,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2639:78:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1155,
                        "nodeType": "ExpressionStatement",
                        "src": "2639:78:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1124,
                    "nodeType": "StructuredDocumentation",
                    "src": "1501:906:4",
                    "text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
                  },
                  "id": 1157,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sendValue",
                  "nameLocation": "2421:9:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1129,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1126,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "2447:9:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1157,
                        "src": "2431:25:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 1125,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2431:15:4",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1128,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2466:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1157,
                        "src": "2458:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1127,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2458:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2430:43:4"
                  },
                  "returnParameters": {
                    "id": 1130,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2483:0:4"
                  },
                  "scope": 1435,
                  "src": "2412:312:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1174,
                    "nodeType": "Block",
                    "src": "3555:96:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1168,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1160,
                              "src": "3594:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1169,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1162,
                              "src": "3602:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 1170,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3608:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 1171,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3611:32:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              },
                              "value": "Address: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              }
                            ],
                            "id": 1167,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1215, 1259],
                            "referencedDeclaration": 1259,
                            "src": "3572:21:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3572:72:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1166,
                        "id": 1173,
                        "nodeType": "Return",
                        "src": "3565:79:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1158,
                    "nodeType": "StructuredDocumentation",
                    "src": "2730:731:4",
                    "text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
                  },
                  "id": 1175,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "3475:12:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1163,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1160,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "3496:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1175,
                        "src": "3488:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1159,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3488:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1162,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3517:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1175,
                        "src": "3504:17:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1161,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3504:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3487:35:4"
                  },
                  "returnParameters": {
                    "id": 1166,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1165,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1175,
                        "src": "3541:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1164,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3541:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3540:14:4"
                  },
                  "scope": 1435,
                  "src": "3466:185:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1194,
                    "nodeType": "Block",
                    "src": "4020:76:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1188,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1178,
                              "src": "4059:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1189,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1180,
                              "src": "4067:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 1190,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4073:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "id": 1191,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1182,
                              "src": "4076:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1187,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1215, 1259],
                            "referencedDeclaration": 1259,
                            "src": "4037:21:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1192,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4037:52:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1186,
                        "id": 1193,
                        "nodeType": "Return",
                        "src": "4030:59:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1176,
                    "nodeType": "StructuredDocumentation",
                    "src": "3657:211:4",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 1195,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "3882:12:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1183,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1178,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "3912:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1195,
                        "src": "3904:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1177,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3904:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1180,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3941:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1195,
                        "src": "3928:17:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1179,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3928:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1182,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "3969:12:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1195,
                        "src": "3955:26:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1181,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3955:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3894:93:4"
                  },
                  "returnParameters": {
                    "id": 1186,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1185,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1195,
                        "src": "4006:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1184,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4006:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4005:14:4"
                  },
                  "scope": 1435,
                  "src": "3873:223:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1214,
                    "nodeType": "Block",
                    "src": "4601:111:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1208,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1198,
                              "src": "4640:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1209,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1200,
                              "src": "4648:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1210,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1202,
                              "src": "4654:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
                              "id": 1211,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4661:43:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              },
                              "value": "Address: low-level call with value failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              }
                            ],
                            "id": 1207,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1215, 1259],
                            "referencedDeclaration": 1259,
                            "src": "4618:21:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4618:87:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1206,
                        "id": 1213,
                        "nodeType": "Return",
                        "src": "4611:94:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1196,
                    "nodeType": "StructuredDocumentation",
                    "src": "4102:351:4",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
                  },
                  "id": 1215,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "4467:21:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1203,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1198,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "4506:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1215,
                        "src": "4498:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1197,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4498:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1200,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "4535:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1215,
                        "src": "4522:17:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1199,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4522:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1202,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4557:5:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1215,
                        "src": "4549:13:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1201,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4549:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4488:80:4"
                  },
                  "returnParameters": {
                    "id": 1206,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1205,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1215,
                        "src": "4587:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1204,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4587:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4586:14:4"
                  },
                  "scope": 1435,
                  "src": "4458:254:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1258,
                    "nodeType": "Block",
                    "src": "5139:267:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1236,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1232,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "5165:4:4",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$1435",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$1435",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 1231,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "5157:7:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1230,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "5157:7:4",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1233,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5157:13:4",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 1234,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "5157:21:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1235,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1222,
                                "src": "5182:5:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5157:30:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
                              "id": 1237,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5189:40:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              },
                              "value": "Address: insufficient balance for call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              }
                            ],
                            "id": 1229,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "5149:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1238,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5149:81:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1239,
                        "nodeType": "ExpressionStatement",
                        "src": "5149:81:4"
                      },
                      {
                        "assignments": [1241, 1243],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1241,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "5246:7:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1258,
                            "src": "5241:12:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1240,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "5241:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1243,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "5268:10:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1258,
                            "src": "5255:23:4",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1242,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5255:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1250,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1248,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1220,
                              "src": "5308:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 1244,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1218,
                                "src": "5282:6:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1245,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "5282:11:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1247,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": ["value"],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1246,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1222,
                                "src": "5301:5:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "5282:25:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1249,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5282:31:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5240:73:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1252,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1218,
                              "src": "5357:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1253,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1241,
                              "src": "5365:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 1254,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1243,
                              "src": "5374:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1255,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1224,
                              "src": "5386:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1251,
                            "name": "verifyCallResultFromTarget",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1390,
                            "src": "5330:26:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5330:69:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1228,
                        "id": 1257,
                        "nodeType": "Return",
                        "src": "5323:76:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1216,
                    "nodeType": "StructuredDocumentation",
                    "src": "4718:237:4",
                    "text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 1259,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "4969:21:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1225,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1218,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5008:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1259,
                        "src": "5000:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1217,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5000:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1220,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5037:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1259,
                        "src": "5024:17:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1219,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5024:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1222,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "5059:5:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1259,
                        "src": "5051:13:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1221,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5051:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1224,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "5088:12:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1259,
                        "src": "5074:26:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1223,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5074:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4990:116:4"
                  },
                  "returnParameters": {
                    "id": 1228,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1227,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1259,
                        "src": "5125:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1226,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5125:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5124:14:4"
                  },
                  "scope": 1435,
                  "src": "4960:446:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1275,
                    "nodeType": "Block",
                    "src": "5683:97:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1270,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1262,
                              "src": "5719:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1271,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1264,
                              "src": "5727:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
                              "id": 1272,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5733:39:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              },
                              "value": "Address: low-level static call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              }
                            ],
                            "id": 1269,
                            "name": "functionStaticCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1276, 1305],
                            "referencedDeclaration": 1305,
                            "src": "5700:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1273,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5700:73:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1268,
                        "id": 1274,
                        "nodeType": "Return",
                        "src": "5693:80:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1260,
                    "nodeType": "StructuredDocumentation",
                    "src": "5412:166:4",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 1276,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "5592:18:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1265,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1262,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5619:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1276,
                        "src": "5611:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1261,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5611:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1264,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5640:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1276,
                        "src": "5627:17:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1263,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5627:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5610:35:4"
                  },
                  "returnParameters": {
                    "id": 1268,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1267,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1276,
                        "src": "5669:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1266,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5669:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5668:14:4"
                  },
                  "scope": 1435,
                  "src": "5583:197:4",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1304,
                    "nodeType": "Block",
                    "src": "6122:168:4",
                    "statements": [
                      {
                        "assignments": [1289, 1291],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1289,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "6138:7:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1304,
                            "src": "6133:12:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1288,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "6133:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1291,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "6160:10:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1304,
                            "src": "6147:23:4",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1290,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "6147:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1296,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1294,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1281,
                              "src": "6192:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 1292,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1279,
                              "src": "6174:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1293,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "6174:17:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 1295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6174:23:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6132:65:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1298,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1279,
                              "src": "6241:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1299,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1289,
                              "src": "6249:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 1300,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1291,
                              "src": "6258:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1301,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1283,
                              "src": "6270:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1297,
                            "name": "verifyCallResultFromTarget",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1390,
                            "src": "6214:26:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6214:69:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1287,
                        "id": 1303,
                        "nodeType": "Return",
                        "src": "6207:76:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1277,
                    "nodeType": "StructuredDocumentation",
                    "src": "5786:173:4",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 1305,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "5973:18:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1279,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6009:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1305,
                        "src": "6001:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1278,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6001:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1281,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6038:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1305,
                        "src": "6025:17:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1280,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6025:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1283,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "6066:12:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1305,
                        "src": "6052:26:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1282,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6052:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5991:93:4"
                  },
                  "returnParameters": {
                    "id": 1287,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1286,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1305,
                        "src": "6108:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1285,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6108:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6107:14:4"
                  },
                  "scope": 1435,
                  "src": "5964:326:4",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1321,
                    "nodeType": "Block",
                    "src": "6566:101:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1316,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1308,
                              "src": "6604:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1317,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1310,
                              "src": "6612:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
                              "id": 1318,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6618:41:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              },
                              "value": "Address: low-level delegate call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              }
                            ],
                            "id": 1315,
                            "name": "functionDelegateCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1322, 1351],
                            "referencedDeclaration": 1351,
                            "src": "6583:20:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1319,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6583:77:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1314,
                        "id": 1320,
                        "nodeType": "Return",
                        "src": "6576:84:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1306,
                    "nodeType": "StructuredDocumentation",
                    "src": "6296:168:4",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 1322,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "6478:20:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1311,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1308,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6507:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1322,
                        "src": "6499:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1307,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6499:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1310,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6528:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1322,
                        "src": "6515:17:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1309,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6515:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6498:35:4"
                  },
                  "returnParameters": {
                    "id": 1314,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1313,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1322,
                        "src": "6552:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1312,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6552:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6551:14:4"
                  },
                  "scope": 1435,
                  "src": "6469:198:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1350,
                    "nodeType": "Block",
                    "src": "7008:170:4",
                    "statements": [
                      {
                        "assignments": [1335, 1337],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1335,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "7024:7:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1350,
                            "src": "7019:12:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1334,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "7019:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1337,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "7046:10:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1350,
                            "src": "7033:23:4",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1336,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "7033:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1342,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1340,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1327,
                              "src": "7080:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 1338,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1325,
                              "src": "7060:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1339,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "delegatecall",
                            "nodeType": "MemberAccess",
                            "src": "7060:19:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) returns (bool,bytes memory)"
                            }
                          },
                          "id": 1341,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7060:25:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7018:67:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1344,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1325,
                              "src": "7129:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1345,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1335,
                              "src": "7137:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 1346,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1337,
                              "src": "7146:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1347,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1329,
                              "src": "7158:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1343,
                            "name": "verifyCallResultFromTarget",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1390,
                            "src": "7102:26:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7102:69:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 1333,
                        "id": 1349,
                        "nodeType": "Return",
                        "src": "7095:76:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1323,
                    "nodeType": "StructuredDocumentation",
                    "src": "6673:175:4",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 1351,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "6862:20:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1330,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1325,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6900:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1351,
                        "src": "6892:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1324,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6892:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1327,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6929:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1351,
                        "src": "6916:17:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1326,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6916:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1329,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "6957:12:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1351,
                        "src": "6943:26:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1328,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6943:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6882:93:4"
                  },
                  "returnParameters": {
                    "id": 1333,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1332,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1351,
                        "src": "6994:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1331,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6994:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6993:14:4"
                  },
                  "scope": 1435,
                  "src": "6853:325:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1389,
                    "nodeType": "Block",
                    "src": "7660:434:4",
                    "statements": [
                      {
                        "condition": {
                          "id": 1365,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1356,
                          "src": "7674:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1387,
                          "nodeType": "Block",
                          "src": "8030:58:4",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1383,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1358,
                                    "src": "8052:10:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "id": 1384,
                                    "name": "errorMessage",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1360,
                                    "src": "8064:12:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    },
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "id": 1382,
                                  "name": "_revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1434,
                                  "src": "8044:7:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bytes memory,string memory) pure"
                                  }
                                },
                                "id": 1385,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8044:33:4",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1386,
                              "nodeType": "ExpressionStatement",
                              "src": "8044:33:4"
                            }
                          ]
                        },
                        "id": 1388,
                        "nodeType": "IfStatement",
                        "src": "7670:418:4",
                        "trueBody": {
                          "id": 1381,
                          "nodeType": "Block",
                          "src": "7683:341:4",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1369,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1366,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1358,
                                    "src": "7701:10:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 1367,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "7701:17:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1368,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7722:1:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "7701:22:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1378,
                              "nodeType": "IfStatement",
                              "src": "7697:286:4",
                              "trueBody": {
                                "id": 1377,
                                "nodeType": "Block",
                                "src": "7725:258:4",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "id": 1372,
                                              "name": "target",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1354,
                                              "src": "7927:6:4",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "id": 1371,
                                            "name": "isContract",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1123,
                                            "src": "7916:10:4",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                              "typeString": "function (address) view returns (bool)"
                                            }
                                          },
                                          "id": 1373,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "7916:18:4",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        {
                                          "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                          "id": 1374,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "7936:31:4",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                            "typeString": "literal_string \"Address: call to non-contract\""
                                          },
                                          "value": "Address: call to non-contract"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          },
                                          {
                                            "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                            "typeString": "literal_string \"Address: call to non-contract\""
                                          }
                                        ],
                                        "id": 1370,
                                        "name": "require",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [-18, -18],
                                        "referencedDeclaration": -18,
                                        "src": "7908:7:4",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (bool,string memory) pure"
                                        }
                                      },
                                      "id": 1375,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "7908:60:4",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1376,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7908:60:4"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "id": 1379,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1358,
                                "src": "8003:10:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 1364,
                              "id": 1380,
                              "nodeType": "Return",
                              "src": "7996:17:4"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1352,
                    "nodeType": "StructuredDocumentation",
                    "src": "7184:277:4",
                    "text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
                  },
                  "id": 1390,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "verifyCallResultFromTarget",
                  "nameLocation": "7475:26:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1361,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1354,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "7519:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1390,
                        "src": "7511:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1353,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7511:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1356,
                        "mutability": "mutable",
                        "name": "success",
                        "nameLocation": "7540:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1390,
                        "src": "7535:12:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1355,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7535:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1358,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "7570:10:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1390,
                        "src": "7557:23:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1357,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7557:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1360,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "7604:12:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1390,
                        "src": "7590:26:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1359,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7590:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7501:121:4"
                  },
                  "returnParameters": {
                    "id": 1364,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1363,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1390,
                        "src": "7646:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1362,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7646:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7645:14:4"
                  },
                  "scope": 1435,
                  "src": "7466:628:4",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1413,
                    "nodeType": "Block",
                    "src": "8475:135:4",
                    "statements": [
                      {
                        "condition": {
                          "id": 1402,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1393,
                          "src": "8489:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1411,
                          "nodeType": "Block",
                          "src": "8546:58:4",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1407,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1395,
                                    "src": "8568:10:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "id": 1408,
                                    "name": "errorMessage",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1397,
                                    "src": "8580:12:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    },
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "id": 1406,
                                  "name": "_revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1434,
                                  "src": "8560:7:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bytes memory,string memory) pure"
                                  }
                                },
                                "id": 1409,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8560:33:4",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1410,
                              "nodeType": "ExpressionStatement",
                              "src": "8560:33:4"
                            }
                          ]
                        },
                        "id": 1412,
                        "nodeType": "IfStatement",
                        "src": "8485:119:4",
                        "trueBody": {
                          "id": 1405,
                          "nodeType": "Block",
                          "src": "8498:42:4",
                          "statements": [
                            {
                              "expression": {
                                "id": 1403,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1395,
                                "src": "8519:10:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 1401,
                              "id": 1404,
                              "nodeType": "Return",
                              "src": "8512:17:4"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1391,
                    "nodeType": "StructuredDocumentation",
                    "src": "8100:210:4",
                    "text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
                  },
                  "id": 1414,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "verifyCallResult",
                  "nameLocation": "8324:16:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1398,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1393,
                        "mutability": "mutable",
                        "name": "success",
                        "nameLocation": "8355:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1414,
                        "src": "8350:12:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1392,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "8350:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1395,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "8385:10:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1414,
                        "src": "8372:23:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1394,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8372:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1397,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "8419:12:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1414,
                        "src": "8405:26:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1396,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "8405:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8340:97:4"
                  },
                  "returnParameters": {
                    "id": 1401,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1400,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1414,
                        "src": "8461:12:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1399,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8461:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8460:14:4"
                  },
                  "scope": 1435,
                  "src": "8315:295:4",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1433,
                    "nodeType": "Block",
                    "src": "8699:457:4",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1424,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1421,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1416,
                              "src": "8775:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1422,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "8775:17:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1423,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8795:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "8775:21:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1431,
                          "nodeType": "Block",
                          "src": "9105:45:4",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1428,
                                    "name": "errorMessage",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1418,
                                    "src": "9126:12:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "id": 1427,
                                  "name": "revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [-19, -19],
                                  "referencedDeclaration": -19,
                                  "src": "9119:6:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (string memory) pure"
                                  }
                                },
                                "id": 1429,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9119:20:4",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1430,
                              "nodeType": "ExpressionStatement",
                              "src": "9119:20:4"
                            }
                          ]
                        },
                        "id": 1432,
                        "nodeType": "IfStatement",
                        "src": "8771:379:4",
                        "trueBody": {
                          "id": 1426,
                          "nodeType": "Block",
                          "src": "8798:301:4",
                          "statements": [
                            {
                              "AST": {
                                "nodeType": "YulBlock",
                                "src": "8956:133:4",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8974:40:4",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "returndata",
                                          "nodeType": "YulIdentifier",
                                          "src": "9003:10:4"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "8997:5:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8997:17:4"
                                    },
                                    "variables": [
                                      {
                                        "name": "returndata_size",
                                        "nodeType": "YulTypedName",
                                        "src": "8978:15:4",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "9042:2:4",
                                              "type": "",
                                              "value": "32"
                                            },
                                            {
                                              "name": "returndata",
                                              "nodeType": "YulIdentifier",
                                              "src": "9046:10:4"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "9038:3:4"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "9038:19:4"
                                        },
                                        {
                                          "name": "returndata_size",
                                          "nodeType": "YulIdentifier",
                                          "src": "9059:15:4"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "9031:6:4"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9031:44:4"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9031:44:4"
                                  }
                                ]
                              },
                              "documentation": "@solidity memory-safe-assembly",
                              "evmVersion": "london",
                              "externalReferences": [
                                {
                                  "declaration": 1416,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "9003:10:4",
                                  "valueSize": 1
                                },
                                {
                                  "declaration": 1416,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "9046:10:4",
                                  "valueSize": 1
                                }
                              ],
                              "id": 1425,
                              "nodeType": "InlineAssembly",
                              "src": "8947:142:4"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 1434,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_revert",
                  "nameLocation": "8625:7:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1419,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1416,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "8646:10:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1434,
                        "src": "8633:23:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1415,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8633:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1418,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "8672:12:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1434,
                        "src": "8658:26:4",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1417,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "8658:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8632:53:4"
                  },
                  "returnParameters": {
                    "id": 1420,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8699:0:4"
                  },
                  "scope": 1435,
                  "src": "8616:540:4",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 1436,
              "src": "194:8964:4",
              "usedErrors": []
            }
          ],
          "src": "101:9058:4"
        },
        "id": 4
      },
      "@openzeppelin/contracts/utils/Base64.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Base64.sol",
          "exportedSymbols": { "Base64": [1482] },
          "id": 1483,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1437,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "100:23:5"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Base64",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1438,
                "nodeType": "StructuredDocumentation",
                "src": "125:105:5",
                "text": " @dev Provides a set of functions to operate with Base64 strings.\n _Available since v4.5._"
              },
              "fullyImplemented": true,
              "id": 1482,
              "linearizedBaseContracts": [1482],
              "name": "Base64",
              "nameLocation": "239:6:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "documentation": {
                    "id": 1439,
                    "nodeType": "StructuredDocumentation",
                    "src": "252:54:5",
                    "text": " @dev Base64 Encoding/Decoding Table"
                  },
                  "id": 1442,
                  "mutability": "constant",
                  "name": "_TABLE",
                  "nameLocation": "336:6:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1482,
                  "src": "311:100:5",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1440,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "311:6:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": {
                    "hexValue": "4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f",
                    "id": 1441,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "345:66:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce",
                      "typeString": "literal_string \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\""
                    },
                    "value": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
                  },
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1480,
                    "nodeType": "Block",
                    "src": "578:2953:5",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1453,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1450,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1445,
                              "src": "795:4:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1451,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "795:11:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1452,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "810:1:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "795:16:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "documentation": " Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol",
                        "id": 1456,
                        "nodeType": "IfStatement",
                        "src": "791:31:5",
                        "trueBody": {
                          "expression": {
                            "hexValue": "",
                            "id": 1454,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "820:2:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          },
                          "functionReturnParameters": 1449,
                          "id": 1455,
                          "nodeType": "Return",
                          "src": "813:9:5"
                        }
                      },
                      {
                        "assignments": [1458],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1458,
                            "mutability": "mutable",
                            "name": "table",
                            "nameLocation": "886:5:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1480,
                            "src": "872:19:5",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 1457,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "872:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1460,
                        "initialValue": {
                          "id": 1459,
                          "name": "_TABLE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1442,
                          "src": "894:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "872:28:5"
                      },
                      {
                        "assignments": [1462],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1462,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "1317:6:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1480,
                            "src": "1303:20:5",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 1461,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "1303:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1476,
                        "initialValue": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1474,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "34",
                                "id": 1465,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1337:1:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_4_by_1",
                                  "typeString": "int_const 4"
                                },
                                "value": "4"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1472,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1469,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "expression": {
                                              "id": 1466,
                                              "name": "data",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1445,
                                              "src": "1343:4:5",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes_memory_ptr",
                                                "typeString": "bytes memory"
                                              }
                                            },
                                            "id": 1467,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "length",
                                            "nodeType": "MemberAccess",
                                            "src": "1343:11:5",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "+",
                                          "rightExpression": {
                                            "hexValue": "32",
                                            "id": 1468,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "1357:1:5",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_2_by_1",
                                              "typeString": "int_const 2"
                                            },
                                            "value": "2"
                                          },
                                          "src": "1343:15:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 1470,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "1342:17:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "/",
                                    "rightExpression": {
                                      "hexValue": "33",
                                      "id": 1471,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1362:1:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_3_by_1",
                                        "typeString": "int_const 3"
                                      },
                                      "value": "3"
                                    },
                                    "src": "1342:21:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 1473,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "1341:23:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1337:27:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1464,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "1326:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            },
                            "typeName": {
                              "id": 1463,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "1330:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            }
                          },
                          "id": 1475,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1326:39:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1303:62:5"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1428:2073:5",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1513:29:5",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "table",
                                    "nodeType": "YulIdentifier",
                                    "src": "1533:5:5"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1540:1:5",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1529:3:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1529:13:5"
                              },
                              "variables": [
                                {
                                  "name": "tablePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1517:8:5",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1612:32:5",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "result",
                                    "nodeType": "YulIdentifier",
                                    "src": "1633:6:5"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1641:2:5",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1629:3:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1629:15:5"
                              },
                              "variables": [
                                {
                                  "name": "resultPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1616:9:5",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1857:1257:5",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1910:26:5",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dataPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1925:7:5"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1934:1:5",
                                          "type": "",
                                          "value": "3"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1921:3:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1921:15:5"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dataPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1910:7:5"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1953:27:5",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dataPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1972:7:5"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1966:5:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1966:14:5"
                                    },
                                    "variables": [
                                      {
                                        "name": "input",
                                        "nodeType": "YulTypedName",
                                        "src": "1957:5:5",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2564:9:5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tablePtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2585:8:5"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "kind": "number",
                                                          "nodeType": "YulLiteral",
                                                          "src": "2603:2:5",
                                                          "type": "",
                                                          "value": "18"
                                                        },
                                                        {
                                                          "name": "input",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2607:5:5"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "shr",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2599:3:5"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "2599:14:5"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2615:4:5",
                                                      "type": "",
                                                      "value": "0x3F"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2595:3:5"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2595:25:5"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2581:3:5"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2581:40:5"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "2575:5:5"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2575:47:5"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "2556:7:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2556:67:5"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2556:67:5"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2640:30:5",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2657:9:5"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2668:1:5",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2653:3:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2653:17:5"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2640:9:5"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2707:9:5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tablePtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2728:8:5"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "kind": "number",
                                                          "nodeType": "YulLiteral",
                                                          "src": "2746:2:5",
                                                          "type": "",
                                                          "value": "12"
                                                        },
                                                        {
                                                          "name": "input",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2750:5:5"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "shr",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2742:3:5"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "2742:14:5"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2758:4:5",
                                                      "type": "",
                                                      "value": "0x3F"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2738:3:5"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2738:25:5"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2724:3:5"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2724:40:5"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "2718:5:5"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2718:47:5"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "2699:7:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2699:67:5"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2699:67:5"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2783:30:5",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2800:9:5"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2811:1:5",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2796:3:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2796:17:5"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2783:9:5"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2850:9:5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tablePtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2871:8:5"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "kind": "number",
                                                          "nodeType": "YulLiteral",
                                                          "src": "2889:1:5",
                                                          "type": "",
                                                          "value": "6"
                                                        },
                                                        {
                                                          "name": "input",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2892:5:5"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "shr",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2885:3:5"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "2885:13:5"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2900:4:5",
                                                      "type": "",
                                                      "value": "0x3F"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2881:3:5"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2881:24:5"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2867:3:5"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2867:39:5"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "2861:5:5"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2861:46:5"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "2842:7:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2842:66:5"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2842:66:5"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2925:30:5",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2942:9:5"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2953:1:5",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2938:3:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2938:17:5"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2925:9:5"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2992:9:5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tablePtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3013:8:5"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "input",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "3027:5:5"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "3034:4:5",
                                                      "type": "",
                                                      "value": "0x3F"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3023:3:5"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "3023:16:5"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "3009:3:5"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3009:31:5"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "3003:5:5"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3003:38:5"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "2984:7:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2984:58:5"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2984:58:5"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3059:30:5",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "resultPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "3076:9:5"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3087:1:5",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3072:3:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3072:17:5"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "resultPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "3059:9:5"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "dataPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1823:7:5"
                                  },
                                  {
                                    "name": "endPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1832:6:5"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1820:2:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1820:19:5"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "1840:16:5",
                                "statements": []
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "1715:104:5",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1733:19:5",
                                    "value": {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "1748:4:5"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "1737:7:5",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1769:36:5",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "data",
                                          "nodeType": "YulIdentifier",
                                          "src": "1787:4:5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "data",
                                              "nodeType": "YulIdentifier",
                                              "src": "1799:4:5"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "1793:5:5"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1793:11:5"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1783:3:5"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1783:22:5"
                                    },
                                    "variables": [
                                      {
                                        "name": "endPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "1773:6:5",
                                        "type": ""
                                      }
                                    ]
                                  }
                                ]
                              },
                              "src": "1711:1403:5"
                            },
                            {
                              "cases": [
                                {
                                  "body": {
                                    "nodeType": "YulBlock",
                                    "src": "3294:113:5",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "resultPtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3324:9:5"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3335:1:5",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "3320:3:5"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3320:17:5"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3339:4:5",
                                              "type": "",
                                              "value": "0x3d"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore8",
                                            "nodeType": "YulIdentifier",
                                            "src": "3312:7:5"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3312:32:5"
                                        },
                                        "nodeType": "YulExpressionStatement",
                                        "src": "3312:32:5"
                                      },
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "resultPtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3373:9:5"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3384:1:5",
                                                  "type": "",
                                                  "value": "2"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "3369:3:5"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3369:17:5"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3388:4:5",
                                              "type": "",
                                              "value": "0x3d"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore8",
                                            "nodeType": "YulIdentifier",
                                            "src": "3361:7:5"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3361:32:5"
                                        },
                                        "nodeType": "YulExpressionStatement",
                                        "src": "3361:32:5"
                                      }
                                    ]
                                  },
                                  "nodeType": "YulCase",
                                  "src": "3287:120:5",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3292:1:5",
                                    "type": "",
                                    "value": "1"
                                  }
                                },
                                {
                                  "body": {
                                    "nodeType": "YulBlock",
                                    "src": "3427:64:5",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "resultPtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3457:9:5"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3468:1:5",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "3453:3:5"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3453:17:5"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3472:4:5",
                                              "type": "",
                                              "value": "0x3d"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore8",
                                            "nodeType": "YulIdentifier",
                                            "src": "3445:7:5"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3445:32:5"
                                        },
                                        "nodeType": "YulExpressionStatement",
                                        "src": "3445:32:5"
                                      }
                                    ]
                                  },
                                  "nodeType": "YulCase",
                                  "src": "3420:71:5",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3425:1:5",
                                    "type": "",
                                    "value": "2"
                                  }
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "3265:4:5"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "3259:5:5"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3259:11:5"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3272:1:5",
                                    "type": "",
                                    "value": "3"
                                  }
                                ],
                                "functionName": {
                                  "name": "mod",
                                  "nodeType": "YulIdentifier",
                                  "src": "3255:3:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3255:19:5"
                              },
                              "nodeType": "YulSwitch",
                              "src": "3248:243:5"
                            }
                          ]
                        },
                        "documentation": "@solidity memory-safe-assembly",
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 1445,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1748:4:5",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1445,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1787:4:5",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1445,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1799:4:5",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1445,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3265:4:5",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1462,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1633:6:5",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1458,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1533:5:5",
                            "valueSize": 1
                          }
                        ],
                        "id": 1477,
                        "nodeType": "InlineAssembly",
                        "src": "1419:2082:5"
                      },
                      {
                        "expression": {
                          "id": 1478,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1462,
                          "src": "3518:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 1449,
                        "id": 1479,
                        "nodeType": "Return",
                        "src": "3511:13:5"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1443,
                    "nodeType": "StructuredDocumentation",
                    "src": "418:82:5",
                    "text": " @dev Converts a `bytes` to its Bytes64 `string` representation."
                  },
                  "id": 1481,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "encode",
                  "nameLocation": "514:6:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1446,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1445,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "534:4:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1481,
                        "src": "521:17:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1444,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "521:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "520:19:5"
                  },
                  "returnParameters": {
                    "id": 1449,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1448,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1481,
                        "src": "563:13:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1447,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "563:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "562:15:5"
                  },
                  "scope": 1482,
                  "src": "505:3026:5",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1483,
              "src": "231:3302:5",
              "usedErrors": []
            }
          ],
          "src": "100:3434:5"
        },
        "id": 5
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
          "exportedSymbols": { "Context": [1504] },
          "id": 1505,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1484,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "86:23:6"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Context",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 1485,
                "nodeType": "StructuredDocumentation",
                "src": "111:496:6",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 1504,
              "linearizedBaseContracts": [1504],
              "name": "Context",
              "nameLocation": "626:7:6",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1493,
                    "nodeType": "Block",
                    "src": "702:34:6",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1490,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "719:3:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1491,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "719:10:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 1489,
                        "id": 1492,
                        "nodeType": "Return",
                        "src": "712:17:6"
                      }
                    ]
                  },
                  "id": 1494,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "649:10:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1486,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "659:2:6"
                  },
                  "returnParameters": {
                    "id": 1489,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1488,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1494,
                        "src": "693:7:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1487,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "693:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "692:9:6"
                  },
                  "scope": 1504,
                  "src": "640:96:6",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1502,
                    "nodeType": "Block",
                    "src": "809:32:6",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1499,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "826:3:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "826:8:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 1498,
                        "id": 1501,
                        "nodeType": "Return",
                        "src": "819:15:6"
                      }
                    ]
                  },
                  "id": 1503,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "751:8:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1495,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "759:2:6"
                  },
                  "returnParameters": {
                    "id": 1498,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1497,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1503,
                        "src": "793:14:6",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1496,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "793:5:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "792:16:6"
                  },
                  "scope": 1504,
                  "src": "742:99:6",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 1505,
              "src": "608:235:6",
              "usedErrors": []
            }
          ],
          "src": "86:758:6"
        },
        "id": 6
      },
      "@openzeppelin/contracts/utils/Counters.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
          "exportedSymbols": { "Counters": [1578] },
          "id": 1579,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1506,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "87:23:7"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Counters",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1507,
                "nodeType": "StructuredDocumentation",
                "src": "112:311:7",
                "text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
              },
              "fullyImplemented": true,
              "id": 1578,
              "linearizedBaseContracts": [1578],
              "name": "Counters",
              "nameLocation": "432:8:7",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "Counters.Counter",
                  "id": 1510,
                  "members": [
                    {
                      "constant": false,
                      "id": 1509,
                      "mutability": "mutable",
                      "name": "_value",
                      "nameLocation": "794:6:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1510,
                      "src": "786:14:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1508,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "786:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Counter",
                  "nameLocation": "454:7:7",
                  "nodeType": "StructDefinition",
                  "scope": 1578,
                  "src": "447:374:7",
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1521,
                    "nodeType": "Block",
                    "src": "901:38:7",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1518,
                            "name": "counter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1513,
                            "src": "918:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                              "typeString": "struct Counters.Counter storage pointer"
                            }
                          },
                          "id": 1519,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1509,
                          "src": "918:14:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1517,
                        "id": 1520,
                        "nodeType": "Return",
                        "src": "911:21:7"
                      }
                    ]
                  },
                  "id": 1522,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "current",
                  "nameLocation": "836:7:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1514,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1513,
                        "mutability": "mutable",
                        "name": "counter",
                        "nameLocation": "860:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1522,
                        "src": "844:23:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                          "typeString": "struct Counters.Counter"
                        },
                        "typeName": {
                          "id": 1512,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1511,
                            "name": "Counter",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1510,
                            "src": "844:7:7"
                          },
                          "referencedDeclaration": 1510,
                          "src": "844:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                            "typeString": "struct Counters.Counter"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "843:25:7"
                  },
                  "returnParameters": {
                    "id": 1517,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1516,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1522,
                        "src": "892:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1515,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "892:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "891:9:7"
                  },
                  "scope": 1578,
                  "src": "827:112:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1535,
                    "nodeType": "Block",
                    "src": "998:70:7",
                    "statements": [
                      {
                        "id": 1534,
                        "nodeType": "UncheckedBlock",
                        "src": "1008:54:7",
                        "statements": [
                          {
                            "expression": {
                              "id": 1532,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 1528,
                                  "name": "counter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1525,
                                  "src": "1032:7:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                                    "typeString": "struct Counters.Counter storage pointer"
                                  }
                                },
                                "id": 1530,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberName": "_value",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1509,
                                "src": "1032:14:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "+=",
                              "rightHandSide": {
                                "hexValue": "31",
                                "id": 1531,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1050:1:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "1032:19:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1533,
                            "nodeType": "ExpressionStatement",
                            "src": "1032:19:7"
                          }
                        ]
                      }
                    ]
                  },
                  "id": 1536,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "increment",
                  "nameLocation": "954:9:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1526,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1525,
                        "mutability": "mutable",
                        "name": "counter",
                        "nameLocation": "980:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1536,
                        "src": "964:23:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                          "typeString": "struct Counters.Counter"
                        },
                        "typeName": {
                          "id": 1524,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1523,
                            "name": "Counter",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1510,
                            "src": "964:7:7"
                          },
                          "referencedDeclaration": 1510,
                          "src": "964:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                            "typeString": "struct Counters.Counter"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "963:25:7"
                  },
                  "returnParameters": {
                    "id": 1527,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "998:0:7"
                  },
                  "scope": 1578,
                  "src": "945:123:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1563,
                    "nodeType": "Block",
                    "src": "1127:176:7",
                    "statements": [
                      {
                        "assignments": [1543],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1543,
                            "mutability": "mutable",
                            "name": "value",
                            "nameLocation": "1145:5:7",
                            "nodeType": "VariableDeclaration",
                            "scope": 1563,
                            "src": "1137:13:7",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1542,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1137:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1546,
                        "initialValue": {
                          "expression": {
                            "id": 1544,
                            "name": "counter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1539,
                            "src": "1153:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                              "typeString": "struct Counters.Counter storage pointer"
                            }
                          },
                          "id": 1545,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1509,
                          "src": "1153:14:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1137:30:7"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1550,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1548,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1543,
                                "src": "1185:5:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1549,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1193:1:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "1185:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
                              "id": 1551,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1196:29:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
                                "typeString": "literal_string \"Counter: decrement overflow\""
                              },
                              "value": "Counter: decrement overflow"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
                                "typeString": "literal_string \"Counter: decrement overflow\""
                              }
                            ],
                            "id": 1547,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "1177:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1552,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1177:49:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1553,
                        "nodeType": "ExpressionStatement",
                        "src": "1177:49:7"
                      },
                      {
                        "id": 1562,
                        "nodeType": "UncheckedBlock",
                        "src": "1236:61:7",
                        "statements": [
                          {
                            "expression": {
                              "id": 1560,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "expression": {
                                  "id": 1554,
                                  "name": "counter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1539,
                                  "src": "1260:7:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                                    "typeString": "struct Counters.Counter storage pointer"
                                  }
                                },
                                "id": 1556,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberName": "_value",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1509,
                                "src": "1260:14:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1559,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1557,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1543,
                                  "src": "1277:5:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1558,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1285:1:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "1277:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1260:26:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1561,
                            "nodeType": "ExpressionStatement",
                            "src": "1260:26:7"
                          }
                        ]
                      }
                    ]
                  },
                  "id": 1564,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decrement",
                  "nameLocation": "1083:9:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1540,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1539,
                        "mutability": "mutable",
                        "name": "counter",
                        "nameLocation": "1109:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1564,
                        "src": "1093:23:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                          "typeString": "struct Counters.Counter"
                        },
                        "typeName": {
                          "id": 1538,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1537,
                            "name": "Counter",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1510,
                            "src": "1093:7:7"
                          },
                          "referencedDeclaration": 1510,
                          "src": "1093:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                            "typeString": "struct Counters.Counter"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1092:25:7"
                  },
                  "returnParameters": {
                    "id": 1541,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1127:0:7"
                  },
                  "scope": 1578,
                  "src": "1074:229:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1576,
                    "nodeType": "Block",
                    "src": "1358:35:7",
                    "statements": [
                      {
                        "expression": {
                          "id": 1574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1570,
                              "name": "counter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1567,
                              "src": "1368:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                                "typeString": "struct Counters.Counter storage pointer"
                              }
                            },
                            "id": 1572,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "_value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1509,
                            "src": "1368:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 1573,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1385:1:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1368:18:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1575,
                        "nodeType": "ExpressionStatement",
                        "src": "1368:18:7"
                      }
                    ]
                  },
                  "id": 1577,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "reset",
                  "nameLocation": "1318:5:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1568,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1567,
                        "mutability": "mutable",
                        "name": "counter",
                        "nameLocation": "1340:7:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 1577,
                        "src": "1324:23:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                          "typeString": "struct Counters.Counter"
                        },
                        "typeName": {
                          "id": 1566,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1565,
                            "name": "Counter",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1510,
                            "src": "1324:7:7"
                          },
                          "referencedDeclaration": 1510,
                          "src": "1324:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                            "typeString": "struct Counters.Counter"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1323:25:7"
                  },
                  "returnParameters": {
                    "id": 1569,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1358:0:7"
                  },
                  "scope": 1578,
                  "src": "1309:84:7",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1579,
              "src": "424:971:7",
              "usedErrors": []
            }
          ],
          "src": "87:1309:7"
        },
        "id": 7
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
          "exportedSymbols": { "Math": [2654], "Strings": [1753] },
          "id": 1754,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1580,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "101:23:8"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
              "file": "./math/Math.sol",
              "id": 1581,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1754,
              "sourceUnit": 2655,
              "src": "126:25:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Strings",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1582,
                "nodeType": "StructuredDocumentation",
                "src": "153:34:8",
                "text": " @dev String operations."
              },
              "fullyImplemented": true,
              "id": 1753,
              "linearizedBaseContracts": [1753],
              "name": "Strings",
              "nameLocation": "196:7:8",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 1585,
                  "mutability": "constant",
                  "name": "_SYMBOLS",
                  "nameLocation": "235:8:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 1753,
                  "src": "210:54:8",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes16",
                    "typeString": "bytes16"
                  },
                  "typeName": {
                    "id": 1583,
                    "name": "bytes16",
                    "nodeType": "ElementaryTypeName",
                    "src": "210:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes16",
                      "typeString": "bytes16"
                    }
                  },
                  "value": {
                    "hexValue": "30313233343536373839616263646566",
                    "id": 1584,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "246:18:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
                      "typeString": "literal_string \"0123456789abcdef\""
                    },
                    "value": "0123456789abcdef"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 1588,
                  "mutability": "constant",
                  "name": "_ADDRESS_LENGTH",
                  "nameLocation": "293:15:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 1753,
                  "src": "270:43:8",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 1586,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "270:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "3230",
                    "id": 1587,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "311:2:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_20_by_1",
                      "typeString": "int_const 20"
                    },
                    "value": "20"
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 1635,
                    "nodeType": "Block",
                    "src": "486:625:8",
                    "statements": [
                      {
                        "id": 1634,
                        "nodeType": "UncheckedBlock",
                        "src": "496:609:8",
                        "statements": [
                          {
                            "assignments": [1597],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1597,
                                "mutability": "mutable",
                                "name": "length",
                                "nameLocation": "528:6:8",
                                "nodeType": "VariableDeclaration",
                                "scope": 1634,
                                "src": "520:14:8",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1596,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "520:7:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1604,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1603,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 1600,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1591,
                                    "src": "548:5:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1598,
                                    "name": "Math",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2654,
                                    "src": "537:4:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_Math_$2654_$",
                                      "typeString": "type(library Math)"
                                    }
                                  },
                                  "id": 1599,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "log10",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 2491,
                                  "src": "537:10:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 1601,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "537:17:8",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 1602,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "557:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "537:21:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "520:38:8"
                          },
                          {
                            "assignments": [1606],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1606,
                                "mutability": "mutable",
                                "name": "buffer",
                                "nameLocation": "586:6:8",
                                "nodeType": "VariableDeclaration",
                                "scope": 1634,
                                "src": "572:20:8",
                                "stateVariable": false,
                                "storageLocation": "memory",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string"
                                },
                                "typeName": {
                                  "id": 1605,
                                  "name": "string",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "572:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage_ptr",
                                    "typeString": "string"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1611,
                            "initialValue": {
                              "arguments": [
                                {
                                  "id": 1609,
                                  "name": "length",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1597,
                                  "src": "606:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1608,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "NewExpression",
                                "src": "595:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                  "typeString": "function (uint256) pure returns (string memory)"
                                },
                                "typeName": {
                                  "id": 1607,
                                  "name": "string",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "599:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage_ptr",
                                    "typeString": "string"
                                  }
                                }
                              },
                              "id": 1610,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "595:18:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "572:41:8"
                          },
                          {
                            "assignments": [1613],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1613,
                                "mutability": "mutable",
                                "name": "ptr",
                                "nameLocation": "635:3:8",
                                "nodeType": "VariableDeclaration",
                                "scope": 1634,
                                "src": "627:11:8",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1612,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "627:7:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1614,
                            "nodeType": "VariableDeclarationStatement",
                            "src": "627:11:8"
                          },
                          {
                            "AST": {
                              "nodeType": "YulBlock",
                              "src": "708:67:8",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "726:35:8",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "buffer",
                                        "nodeType": "YulIdentifier",
                                        "src": "737:6:8"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "749:2:8",
                                            "type": "",
                                            "value": "32"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "753:6:8"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "745:3:8"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "745:15:8"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "733:3:8"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "733:28:8"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "ptr",
                                      "nodeType": "YulIdentifier",
                                      "src": "726:3:8"
                                    }
                                  ]
                                }
                              ]
                            },
                            "documentation": "@solidity memory-safe-assembly",
                            "evmVersion": "london",
                            "externalReferences": [
                              {
                                "declaration": 1606,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "737:6:8",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1597,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "753:6:8",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1613,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "726:3:8",
                                "valueSize": 1
                              }
                            ],
                            "id": 1615,
                            "nodeType": "InlineAssembly",
                            "src": "699:76:8"
                          },
                          {
                            "body": {
                              "id": 1630,
                              "nodeType": "Block",
                              "src": "801:267:8",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 1618,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "--",
                                    "prefix": false,
                                    "src": "819:5:8",
                                    "subExpression": {
                                      "id": 1617,
                                      "name": "ptr",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1613,
                                      "src": "819:3:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1619,
                                  "nodeType": "ExpressionStatement",
                                  "src": "819:5:8"
                                },
                                {
                                  "AST": {
                                    "nodeType": "YulBlock",
                                    "src": "902:84:8",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "name": "ptr",
                                              "nodeType": "YulIdentifier",
                                              "src": "932:3:8"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "value",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "946:5:8"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "953:2:8",
                                                      "type": "",
                                                      "value": "10"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "mod",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "942:3:8"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "942:14:8"
                                                },
                                                {
                                                  "name": "_SYMBOLS",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "958:8:8"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "byte",
                                                "nodeType": "YulIdentifier",
                                                "src": "937:4:8"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "937:30:8"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore8",
                                            "nodeType": "YulIdentifier",
                                            "src": "924:7:8"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "924:44:8"
                                        },
                                        "nodeType": "YulExpressionStatement",
                                        "src": "924:44:8"
                                      }
                                    ]
                                  },
                                  "documentation": "@solidity memory-safe-assembly",
                                  "evmVersion": "london",
                                  "externalReferences": [
                                    {
                                      "declaration": 1585,
                                      "isOffset": false,
                                      "isSlot": false,
                                      "src": "958:8:8",
                                      "valueSize": 1
                                    },
                                    {
                                      "declaration": 1613,
                                      "isOffset": false,
                                      "isSlot": false,
                                      "src": "932:3:8",
                                      "valueSize": 1
                                    },
                                    {
                                      "declaration": 1591,
                                      "isOffset": false,
                                      "isSlot": false,
                                      "src": "946:5:8",
                                      "valueSize": 1
                                    }
                                  ],
                                  "id": 1620,
                                  "nodeType": "InlineAssembly",
                                  "src": "893:93:8"
                                },
                                {
                                  "expression": {
                                    "id": 1623,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 1621,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1591,
                                      "src": "1003:5:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "/=",
                                    "rightHandSide": {
                                      "hexValue": "3130",
                                      "id": 1622,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1012:2:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_10_by_1",
                                        "typeString": "int_const 10"
                                      },
                                      "value": "10"
                                    },
                                    "src": "1003:11:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1624,
                                  "nodeType": "ExpressionStatement",
                                  "src": "1003:11:8"
                                },
                                {
                                  "condition": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1627,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1625,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1591,
                                      "src": "1036:5:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 1626,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1045:1:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "1036:10:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 1629,
                                  "nodeType": "IfStatement",
                                  "src": "1032:21:8",
                                  "trueBody": {
                                    "id": 1628,
                                    "nodeType": "Break",
                                    "src": "1048:5:8"
                                  }
                                }
                              ]
                            },
                            "condition": {
                              "hexValue": "74727565",
                              "id": 1616,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "795:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            "id": 1631,
                            "nodeType": "WhileStatement",
                            "src": "788:280:8"
                          },
                          {
                            "expression": {
                              "id": 1632,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1606,
                              "src": "1088:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "functionReturnParameters": 1595,
                            "id": 1633,
                            "nodeType": "Return",
                            "src": "1081:13:8"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1589,
                    "nodeType": "StructuredDocumentation",
                    "src": "320:90:8",
                    "text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
                  },
                  "id": 1636,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toString",
                  "nameLocation": "424:8:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1592,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1591,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "441:5:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1636,
                        "src": "433:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1590,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "433:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "432:15:8"
                  },
                  "returnParameters": {
                    "id": 1595,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1594,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1636,
                        "src": "471:13:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1593,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "471:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "470:15:8"
                  },
                  "scope": 1753,
                  "src": "415:696:8",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1655,
                    "nodeType": "Block",
                    "src": "1290:100:8",
                    "statements": [
                      {
                        "id": 1654,
                        "nodeType": "UncheckedBlock",
                        "src": "1300:84:8",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1645,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1639,
                                  "src": "1343:5:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1651,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "arguments": [
                                      {
                                        "id": 1648,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1639,
                                        "src": "1362:5:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "id": 1646,
                                        "name": "Math",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2654,
                                        "src": "1350:4:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_Math_$2654_$",
                                          "typeString": "type(library Math)"
                                        }
                                      },
                                      "id": 1647,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "log256",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 2614,
                                      "src": "1350:11:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                        "typeString": "function (uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 1649,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "1350:18:8",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "hexValue": "31",
                                    "id": 1650,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1371:1:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "1350:22:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1644,
                                "name": "toHexString",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [1656, 1732, 1752],
                                "referencedDeclaration": 1732,
                                "src": "1331:11:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
                                  "typeString": "function (uint256,uint256) pure returns (string memory)"
                                }
                              },
                              "id": 1652,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1331:42:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "functionReturnParameters": 1643,
                            "id": 1653,
                            "nodeType": "Return",
                            "src": "1324:49:8"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1637,
                    "nodeType": "StructuredDocumentation",
                    "src": "1117:94:8",
                    "text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
                  },
                  "id": 1656,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toHexString",
                  "nameLocation": "1225:11:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1640,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1639,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1245:5:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1656,
                        "src": "1237:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1638,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1237:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1236:15:8"
                  },
                  "returnParameters": {
                    "id": 1643,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1642,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1656,
                        "src": "1275:13:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1641,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1275:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1274:15:8"
                  },
                  "scope": 1753,
                  "src": "1216:174:8",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1731,
                    "nodeType": "Block",
                    "src": "1603:347:8",
                    "statements": [
                      {
                        "assignments": [1667],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1667,
                            "mutability": "mutable",
                            "name": "buffer",
                            "nameLocation": "1626:6:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 1731,
                            "src": "1613:19:8",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 1666,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "1613:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1676,
                        "initialValue": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1674,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1672,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "32",
                                  "id": 1670,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1645:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 1671,
                                  "name": "length",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1661,
                                  "src": "1649:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1645:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "hexValue": "32",
                                "id": 1673,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1658:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              },
                              "src": "1645:14:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1669,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "1635:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 1668,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "1639:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 1675,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1635:25:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1613:47:8"
                      },
                      {
                        "expression": {
                          "id": 1681,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1677,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1667,
                              "src": "1670:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1679,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1678,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1677:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1670:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 1680,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1682:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                              "typeString": "literal_string \"0\""
                            },
                            "value": "0"
                          },
                          "src": "1670:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "id": 1682,
                        "nodeType": "ExpressionStatement",
                        "src": "1670:15:8"
                      },
                      {
                        "expression": {
                          "id": 1687,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1683,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1667,
                              "src": "1695:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1685,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 1684,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1702:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1695:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "78",
                            "id": 1686,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1707:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
                              "typeString": "literal_string \"x\""
                            },
                            "value": "x"
                          },
                          "src": "1695:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "id": 1688,
                        "nodeType": "ExpressionStatement",
                        "src": "1695:15:8"
                      },
                      {
                        "body": {
                          "id": 1717,
                          "nodeType": "Block",
                          "src": "1765:83:8",
                          "statements": [
                            {
                              "expression": {
                                "id": 1711,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1703,
                                    "name": "buffer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1667,
                                    "src": "1779:6:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 1705,
                                  "indexExpression": {
                                    "id": 1704,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1690,
                                    "src": "1786:1:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "1779:9:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1706,
                                    "name": "_SYMBOLS",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1585,
                                    "src": "1791:8:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes16",
                                      "typeString": "bytes16"
                                    }
                                  },
                                  "id": 1710,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1709,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1707,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1659,
                                      "src": "1800:5:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "&",
                                    "rightExpression": {
                                      "hexValue": "307866",
                                      "id": 1708,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1808:3:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_15_by_1",
                                        "typeString": "int_const 15"
                                      },
                                      "value": "0xf"
                                    },
                                    "src": "1800:11:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1791:21:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "src": "1779:33:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "id": 1712,
                              "nodeType": "ExpressionStatement",
                              "src": "1779:33:8"
                            },
                            {
                              "expression": {
                                "id": 1715,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1713,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1659,
                                  "src": "1826:5:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": ">>=",
                                "rightHandSide": {
                                  "hexValue": "34",
                                  "id": 1714,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1836:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_4_by_1",
                                    "typeString": "int_const 4"
                                  },
                                  "value": "4"
                                },
                                "src": "1826:11:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1716,
                              "nodeType": "ExpressionStatement",
                              "src": "1826:11:8"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1699,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1697,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1690,
                            "src": "1753:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 1698,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1757:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "1753:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1718,
                        "initializationExpression": {
                          "assignments": [1690],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1690,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "1733:1:8",
                              "nodeType": "VariableDeclaration",
                              "scope": 1718,
                              "src": "1725:9:8",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1689,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1725:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1696,
                          "initialValue": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1695,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1693,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "32",
                                "id": 1691,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1737:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "id": 1692,
                                "name": "length",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1661,
                                "src": "1741:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1737:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 1694,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1750:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "1737:14:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1725:26:8"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1701,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "--",
                            "prefix": true,
                            "src": "1760:3:8",
                            "subExpression": {
                              "id": 1700,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1690,
                              "src": "1762:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1702,
                          "nodeType": "ExpressionStatement",
                          "src": "1760:3:8"
                        },
                        "nodeType": "ForStatement",
                        "src": "1720:128:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1722,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1720,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1659,
                                "src": "1865:5:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1721,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1874:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "1865:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
                              "id": 1723,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1877:34:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
                                "typeString": "literal_string \"Strings: hex length insufficient\""
                              },
                              "value": "Strings: hex length insufficient"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
                                "typeString": "literal_string \"Strings: hex length insufficient\""
                              }
                            ],
                            "id": 1719,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "1857:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1724,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1857:55:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1725,
                        "nodeType": "ExpressionStatement",
                        "src": "1857:55:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1728,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1667,
                              "src": "1936:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1727,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1929:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 1726,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "1929:6:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1729,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1929:14:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 1665,
                        "id": 1730,
                        "nodeType": "Return",
                        "src": "1922:21:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1657,
                    "nodeType": "StructuredDocumentation",
                    "src": "1396:112:8",
                    "text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
                  },
                  "id": 1732,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toHexString",
                  "nameLocation": "1522:11:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1662,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1659,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1542:5:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1732,
                        "src": "1534:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1658,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1534:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1661,
                        "mutability": "mutable",
                        "name": "length",
                        "nameLocation": "1557:6:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1732,
                        "src": "1549:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1660,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1549:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1533:31:8"
                  },
                  "returnParameters": {
                    "id": 1665,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1664,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1732,
                        "src": "1588:13:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1663,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1588:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1587:15:8"
                  },
                  "scope": 1753,
                  "src": "1513:437:8",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1751,
                    "nodeType": "Block",
                    "src": "2175:76:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1745,
                                      "name": "addr",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1735,
                                      "src": "2220:4:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 1744,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2212:7:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint160_$",
                                      "typeString": "type(uint160)"
                                    },
                                    "typeName": {
                                      "id": 1743,
                                      "name": "uint160",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2212:7:8",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1746,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2212:13:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint160",
                                    "typeString": "uint160"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint160",
                                    "typeString": "uint160"
                                  }
                                ],
                                "id": 1742,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2204:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint256_$",
                                  "typeString": "type(uint256)"
                                },
                                "typeName": {
                                  "id": 1741,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2204:7:8",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1747,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2204:22:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1748,
                              "name": "_ADDRESS_LENGTH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1588,
                              "src": "2228:15:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            ],
                            "id": 1740,
                            "name": "toHexString",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1656, 1732, 1752],
                            "referencedDeclaration": 1732,
                            "src": "2192:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256,uint256) pure returns (string memory)"
                            }
                          },
                          "id": 1749,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2192:52:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 1739,
                        "id": 1750,
                        "nodeType": "Return",
                        "src": "2185:59:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1733,
                    "nodeType": "StructuredDocumentation",
                    "src": "1956:141:8",
                    "text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
                  },
                  "id": 1752,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toHexString",
                  "nameLocation": "2111:11:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1736,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1735,
                        "mutability": "mutable",
                        "name": "addr",
                        "nameLocation": "2131:4:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 1752,
                        "src": "2123:12:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1734,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2123:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2122:14:8"
                  },
                  "returnParameters": {
                    "id": 1739,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1738,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1752,
                        "src": "2160:13:8",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1737,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2160:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2159:15:8"
                  },
                  "scope": 1753,
                  "src": "2102:149:8",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1754,
              "src": "188:2065:8",
              "usedErrors": []
            }
          ],
          "src": "101:2153:8"
        },
        "id": 8
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
          "exportedSymbols": { "ERC165": [1777], "IERC165": [1789] },
          "id": 1778,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1755,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "99:23:9"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
              "file": "./IERC165.sol",
              "id": 1756,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1778,
              "sourceUnit": 1790,
              "src": "124:23:9",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1758,
                    "name": "IERC165",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1789,
                    "src": "754:7:9"
                  },
                  "id": 1759,
                  "nodeType": "InheritanceSpecifier",
                  "src": "754:7:9"
                }
              ],
              "canonicalName": "ERC165",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 1757,
                "nodeType": "StructuredDocumentation",
                "src": "149:576:9",
                "text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
              },
              "fullyImplemented": true,
              "id": 1777,
              "linearizedBaseContracts": [1777, 1789],
              "name": "ERC165",
              "nameLocation": "744:6:9",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "baseFunctions": [1788],
                  "body": {
                    "id": 1775,
                    "nodeType": "Block",
                    "src": "920:64:9",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 1773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1768,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1762,
                            "src": "937:11:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1770,
                                  "name": "IERC165",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1789,
                                  "src": "957:7:9",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$1789_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$1789_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                ],
                                "id": 1769,
                                "name": "type",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -27,
                                "src": "952:4:9",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 1771,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "952:13:9",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$1789",
                                "typeString": "type(contract IERC165)"
                              }
                            },
                            "id": 1772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "interfaceId",
                            "nodeType": "MemberAccess",
                            "src": "952:25:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "937:40:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1767,
                        "id": 1774,
                        "nodeType": "Return",
                        "src": "930:47:9"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1760,
                    "nodeType": "StructuredDocumentation",
                    "src": "768:56:9",
                    "text": " @dev See {IERC165-supportsInterface}."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 1776,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "838:17:9",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1764,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "896:8:9"
                  },
                  "parameters": {
                    "id": 1763,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1762,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "863:11:9",
                        "nodeType": "VariableDeclaration",
                        "scope": 1776,
                        "src": "856:18:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1761,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "856:6:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "855:20:9"
                  },
                  "returnParameters": {
                    "id": 1767,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1766,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1776,
                        "src": "914:4:9",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1765,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "914:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "913:6:9"
                  },
                  "scope": 1777,
                  "src": "829:155:9",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                }
              ],
              "scope": 1778,
              "src": "726:260:9",
              "usedErrors": []
            }
          ],
          "src": "99:888:9"
        },
        "id": 9
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
          "exportedSymbols": { "IERC165": [1789] },
          "id": 1790,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1779,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "100:23:10"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC165",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1780,
                "nodeType": "StructuredDocumentation",
                "src": "125:279:10",
                "text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
              },
              "fullyImplemented": false,
              "id": 1789,
              "linearizedBaseContracts": [1789],
              "name": "IERC165",
              "nameLocation": "415:7:10",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1781,
                    "nodeType": "StructuredDocumentation",
                    "src": "429:340:10",
                    "text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 1788,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "783:17:10",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1784,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1783,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "808:11:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 1788,
                        "src": "801:18:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 1782,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "801:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "800:20:10"
                  },
                  "returnParameters": {
                    "id": 1787,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1786,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1788,
                        "src": "844:4:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1785,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "844:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "843:6:10"
                  },
                  "scope": 1789,
                  "src": "774:76:10",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1790,
              "src": "405:447:10",
              "usedErrors": []
            }
          ],
          "src": "100:753:10"
        },
        "id": 10
      },
      "@openzeppelin/contracts/utils/math/Math.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
          "exportedSymbols": { "Math": [2654] },
          "id": 2655,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1791,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "103:23:11"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Math",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1792,
                "nodeType": "StructuredDocumentation",
                "src": "128:73:11",
                "text": " @dev Standard math utilities missing in the Solidity language."
              },
              "fullyImplemented": true,
              "id": 2654,
              "linearizedBaseContracts": [2654],
              "name": "Math",
              "nameLocation": "210:4:11",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "Math.Rounding",
                  "id": 1796,
                  "members": [
                    {
                      "id": 1793,
                      "name": "Down",
                      "nameLocation": "245:4:11",
                      "nodeType": "EnumValue",
                      "src": "245:4:11"
                    },
                    {
                      "id": 1794,
                      "name": "Up",
                      "nameLocation": "287:2:11",
                      "nodeType": "EnumValue",
                      "src": "287:2:11"
                    },
                    {
                      "id": 1795,
                      "name": "Zero",
                      "nameLocation": "318:4:11",
                      "nodeType": "EnumValue",
                      "src": "318:4:11"
                    }
                  ],
                  "name": "Rounding",
                  "nameLocation": "226:8:11",
                  "nodeType": "EnumDefinition",
                  "src": "221:122:11"
                },
                {
                  "body": {
                    "id": 1813,
                    "nodeType": "Block",
                    "src": "480:37:11",
                    "statements": [
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1808,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1806,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1799,
                              "src": "497:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 1807,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1801,
                              "src": "501:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "497:5:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "id": 1810,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1801,
                            "src": "509:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1811,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "497:13:11",
                          "trueExpression": {
                            "id": 1809,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1799,
                            "src": "505:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1805,
                        "id": 1812,
                        "nodeType": "Return",
                        "src": "490:20:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1797,
                    "nodeType": "StructuredDocumentation",
                    "src": "349:59:11",
                    "text": " @dev Returns the largest of two numbers."
                  },
                  "id": 1814,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "max",
                  "nameLocation": "422:3:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1802,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1799,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "434:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 1814,
                        "src": "426:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1798,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "426:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1801,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "445:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 1814,
                        "src": "437:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1800,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "437:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "425:22:11"
                  },
                  "returnParameters": {
                    "id": 1805,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1804,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1814,
                        "src": "471:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1803,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "471:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "470:9:11"
                  },
                  "scope": 2654,
                  "src": "413:104:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1831,
                    "nodeType": "Block",
                    "src": "655:37:11",
                    "statements": [
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1826,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1824,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1817,
                              "src": "672:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "id": 1825,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1819,
                              "src": "676:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "672:5:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "id": 1828,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1819,
                            "src": "684:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1829,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "672:13:11",
                          "trueExpression": {
                            "id": 1827,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1817,
                            "src": "680:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1823,
                        "id": 1830,
                        "nodeType": "Return",
                        "src": "665:20:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1815,
                    "nodeType": "StructuredDocumentation",
                    "src": "523:60:11",
                    "text": " @dev Returns the smallest of two numbers."
                  },
                  "id": 1832,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "min",
                  "nameLocation": "597:3:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1820,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1817,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "609:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 1832,
                        "src": "601:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1816,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "601:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1819,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "620:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 1832,
                        "src": "612:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1818,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "612:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "600:22:11"
                  },
                  "returnParameters": {
                    "id": 1823,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1822,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1832,
                        "src": "646:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1821,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "646:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "645:9:11"
                  },
                  "scope": 2654,
                  "src": "588:104:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1854,
                    "nodeType": "Block",
                    "src": "876:82:11",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1852,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1844,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1842,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1835,
                                  "src": "931:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&",
                                "rightExpression": {
                                  "id": 1843,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1837,
                                  "src": "935:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "931:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1845,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "930:7:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1851,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1848,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1846,
                                    "name": "a",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1835,
                                    "src": "941:1:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "^",
                                  "rightExpression": {
                                    "id": 1847,
                                    "name": "b",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1837,
                                    "src": "945:1:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "941:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1849,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "940:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "32",
                              "id": 1850,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "950:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "src": "940:11:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "930:21:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1841,
                        "id": 1853,
                        "nodeType": "Return",
                        "src": "923:28:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1833,
                    "nodeType": "StructuredDocumentation",
                    "src": "698:102:11",
                    "text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
                  },
                  "id": 1855,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "average",
                  "nameLocation": "814:7:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1838,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1835,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "830:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 1855,
                        "src": "822:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1834,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "822:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1837,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "841:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 1855,
                        "src": "833:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1836,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "833:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "821:22:11"
                  },
                  "returnParameters": {
                    "id": 1841,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1840,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1855,
                        "src": "867:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1839,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "867:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "866:9:11"
                  },
                  "scope": 2654,
                  "src": "805:153:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1879,
                    "nodeType": "Block",
                    "src": "1228:123:11",
                    "statements": [
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1867,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1865,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1858,
                              "src": "1316:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1866,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1321:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "1316:6:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1876,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1874,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1871,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1869,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1858,
                                      "src": "1330:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1870,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1334:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "1330:5:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 1872,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "1329:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 1873,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1860,
                                "src": "1339:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1329:11:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 1875,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1343:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "1329:15:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1877,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "1316:28:11",
                          "trueExpression": {
                            "hexValue": "30",
                            "id": 1868,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1325:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1864,
                        "id": 1878,
                        "nodeType": "Return",
                        "src": "1309:35:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1856,
                    "nodeType": "StructuredDocumentation",
                    "src": "964:188:11",
                    "text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
                  },
                  "id": 1880,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ceilDiv",
                  "nameLocation": "1166:7:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1861,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1858,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "1182:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 1880,
                        "src": "1174:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1857,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1174:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1860,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "1193:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 1880,
                        "src": "1185:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1859,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1185:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1173:22:11"
                  },
                  "returnParameters": {
                    "id": 1864,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1863,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1880,
                        "src": "1219:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1862,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1219:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1218:9:11"
                  },
                  "scope": 2654,
                  "src": "1157:194:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2001,
                    "nodeType": "Block",
                    "src": "1795:3797:11",
                    "statements": [
                      {
                        "id": 2000,
                        "nodeType": "UncheckedBlock",
                        "src": "1805:3781:11",
                        "statements": [
                          {
                            "assignments": [1893],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1893,
                                "mutability": "mutable",
                                "name": "prod0",
                                "nameLocation": "2134:5:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2000,
                                "src": "2126:13:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1892,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2126:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1894,
                            "nodeType": "VariableDeclarationStatement",
                            "src": "2126:13:11"
                          },
                          {
                            "assignments": [1896],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1896,
                                "mutability": "mutable",
                                "name": "prod1",
                                "nameLocation": "2206:5:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2000,
                                "src": "2198:13:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1895,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2198:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1897,
                            "nodeType": "VariableDeclarationStatement",
                            "src": "2198:13:11"
                          },
                          {
                            "AST": {
                              "nodeType": "YulBlock",
                              "src": "2278:157:11",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "2296:30:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "2313:1:11"
                                      },
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "2316:1:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2323:1:11",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2319:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2319:6:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mulmod",
                                      "nodeType": "YulIdentifier",
                                      "src": "2306:6:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2306:20:11"
                                  },
                                  "variables": [
                                    {
                                      "name": "mm",
                                      "nodeType": "YulTypedName",
                                      "src": "2300:2:11",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2343:18:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "2356:1:11"
                                      },
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "2359:1:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "2352:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2352:9:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "prod0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2343:5:11"
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2378:43:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "mm",
                                            "nodeType": "YulIdentifier",
                                            "src": "2395:2:11"
                                          },
                                          {
                                            "name": "prod0",
                                            "nodeType": "YulIdentifier",
                                            "src": "2399:5:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "2391:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2391:14:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "mm",
                                            "nodeType": "YulIdentifier",
                                            "src": "2410:2:11"
                                          },
                                          {
                                            "name": "prod0",
                                            "nodeType": "YulIdentifier",
                                            "src": "2414:5:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nodeType": "YulIdentifier",
                                          "src": "2407:2:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2407:13:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2387:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2387:34:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "prod1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2378:5:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            "evmVersion": "london",
                            "externalReferences": [
                              {
                                "declaration": 1893,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "2343:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1893,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "2399:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1893,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "2414:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1896,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "2378:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1883,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "2313:1:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1883,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "2356:1:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1885,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "2316:1:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1885,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "2359:1:11",
                                "valueSize": 1
                              }
                            ],
                            "id": 1898,
                            "nodeType": "InlineAssembly",
                            "src": "2269:166:11"
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1901,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1899,
                                "name": "prod1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1896,
                                "src": "2516:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1900,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2525:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2516:10:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 1907,
                            "nodeType": "IfStatement",
                            "src": "2512:75:11",
                            "trueBody": {
                              "id": 1906,
                              "nodeType": "Block",
                              "src": "2528:59:11",
                              "statements": [
                                {
                                  "expression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1904,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1902,
                                      "name": "prod0",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1893,
                                      "src": "2553:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "/",
                                    "rightExpression": {
                                      "id": 1903,
                                      "name": "denominator",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1887,
                                      "src": "2561:11:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "2553:19:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "functionReturnParameters": 1891,
                                  "id": 1905,
                                  "nodeType": "Return",
                                  "src": "2546:26:11"
                                }
                              ]
                            }
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1911,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1909,
                                    "name": "denominator",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1887,
                                    "src": "2697:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "id": 1910,
                                    "name": "prod1",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1896,
                                    "src": "2711:5:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "2697:19:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                ],
                                "id": 1908,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [-18, -18],
                                "referencedDeclaration": -18,
                                "src": "2689:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                  "typeString": "function (bool) pure"
                                }
                              },
                              "id": 1912,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2689:28:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1913,
                            "nodeType": "ExpressionStatement",
                            "src": "2689:28:11"
                          },
                          {
                            "assignments": [1915],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1915,
                                "mutability": "mutable",
                                "name": "remainder",
                                "nameLocation": "2981:9:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2000,
                                "src": "2973:17:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1914,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2973:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1916,
                            "nodeType": "VariableDeclarationStatement",
                            "src": "2973:17:11"
                          },
                          {
                            "AST": {
                              "nodeType": "YulBlock",
                              "src": "3013:291:11",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "3082:38:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "3102:1:11"
                                      },
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "3105:1:11"
                                      },
                                      {
                                        "name": "denominator",
                                        "nodeType": "YulIdentifier",
                                        "src": "3108:11:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mulmod",
                                      "nodeType": "YulIdentifier",
                                      "src": "3095:6:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3095:25:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "remainder",
                                      "nodeType": "YulIdentifier",
                                      "src": "3082:9:11"
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "3202:41:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "prod1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3215:5:11"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "remainder",
                                            "nodeType": "YulIdentifier",
                                            "src": "3225:9:11"
                                          },
                                          {
                                            "name": "prod0",
                                            "nodeType": "YulIdentifier",
                                            "src": "3236:5:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "gt",
                                          "nodeType": "YulIdentifier",
                                          "src": "3222:2:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3222:20:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3211:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3211:32:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "prod1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3202:5:11"
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "3260:30:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "prod0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3273:5:11"
                                      },
                                      {
                                        "name": "remainder",
                                        "nodeType": "YulIdentifier",
                                        "src": "3280:9:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3269:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3269:21:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "prod0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3260:5:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            "evmVersion": "london",
                            "externalReferences": [
                              {
                                "declaration": 1887,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3108:11:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1893,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3236:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1893,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3260:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1893,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3273:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1896,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3202:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1896,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3215:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1915,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3082:9:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1915,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3225:9:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1915,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3280:9:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1883,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3102:1:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1885,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3105:1:11",
                                "valueSize": 1
                              }
                            ],
                            "id": 1917,
                            "nodeType": "InlineAssembly",
                            "src": "3004:300:11"
                          },
                          {
                            "assignments": [1919],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1919,
                                "mutability": "mutable",
                                "name": "twos",
                                "nameLocation": "3619:4:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2000,
                                "src": "3611:12:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1918,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3611:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1927,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1926,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1920,
                                "name": "denominator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1887,
                                "src": "3626:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1924,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1922,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "~",
                                      "prefix": true,
                                      "src": "3641:12:11",
                                      "subExpression": {
                                        "id": 1921,
                                        "name": "denominator",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1887,
                                        "src": "3642:11:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1923,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "3656:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "3641:16:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 1925,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "3640:18:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3626:32:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "3611:47:11"
                          },
                          {
                            "AST": {
                              "nodeType": "YulBlock",
                              "src": "3681:362:11",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "3746:37:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "denominator",
                                        "nodeType": "YulIdentifier",
                                        "src": "3765:11:11"
                                      },
                                      {
                                        "name": "twos",
                                        "nodeType": "YulIdentifier",
                                        "src": "3778:4:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "3761:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3761:22:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "denominator",
                                      "nodeType": "YulIdentifier",
                                      "src": "3746:11:11"
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "3850:25:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "prod0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3863:5:11"
                                      },
                                      {
                                        "name": "twos",
                                        "nodeType": "YulIdentifier",
                                        "src": "3870:4:11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "3859:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3859:16:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "prod0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3850:5:11"
                                    }
                                  ]
                                },
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "3990:39:11",
                                  "value": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4010:1:11",
                                                "type": "",
                                                "value": "0"
                                              },
                                              {
                                                "name": "twos",
                                                "nodeType": "YulIdentifier",
                                                "src": "4013:4:11"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "4006:3:11"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4006:12:11"
                                          },
                                          {
                                            "name": "twos",
                                            "nodeType": "YulIdentifier",
                                            "src": "4020:4:11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "4002:3:11"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4002:23:11"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4027:1:11",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3998:3:11"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3998:31:11"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "twos",
                                      "nodeType": "YulIdentifier",
                                      "src": "3990:4:11"
                                    }
                                  ]
                                }
                              ]
                            },
                            "evmVersion": "london",
                            "externalReferences": [
                              {
                                "declaration": 1887,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3746:11:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1887,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3765:11:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1893,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3850:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1893,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3863:5:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1919,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3778:4:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1919,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3870:4:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1919,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "3990:4:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1919,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "4013:4:11",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1919,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "4020:4:11",
                                "valueSize": 1
                              }
                            ],
                            "id": 1928,
                            "nodeType": "InlineAssembly",
                            "src": "3672:371:11"
                          },
                          {
                            "expression": {
                              "id": 1933,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 1929,
                                "name": "prod0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1893,
                                "src": "4109:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "|=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1932,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1930,
                                  "name": "prod1",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1896,
                                  "src": "4118:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 1931,
                                  "name": "twos",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1919,
                                  "src": "4126:4:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4118:12:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4109:21:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1934,
                            "nodeType": "ExpressionStatement",
                            "src": "4109:21:11"
                          },
                          {
                            "assignments": [1936],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1936,
                                "mutability": "mutable",
                                "name": "inverse",
                                "nameLocation": "4456:7:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2000,
                                "src": "4448:15:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1935,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4448:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1943,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1942,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1939,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "hexValue": "33",
                                      "id": 1937,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4467:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_3_by_1",
                                        "typeString": "int_const 3"
                                      },
                                      "value": "3"
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 1938,
                                      "name": "denominator",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1887,
                                      "src": "4471:11:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "4467:15:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 1940,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "4466:17:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "^",
                              "rightExpression": {
                                "hexValue": "32",
                                "id": 1941,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4486:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              },
                              "src": "4466:21:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "4448:39:11"
                          },
                          {
                            "expression": {
                              "id": 1950,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 1944,
                                "name": "inverse",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1936,
                                "src": "4704:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "*=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1949,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "32",
                                  "id": 1945,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4715:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1948,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1946,
                                    "name": "denominator",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1887,
                                    "src": "4719:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 1947,
                                    "name": "inverse",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1936,
                                    "src": "4733:7:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4719:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4715:25:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4704:36:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1951,
                            "nodeType": "ExpressionStatement",
                            "src": "4704:36:11"
                          },
                          {
                            "expression": {
                              "id": 1958,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 1952,
                                "name": "inverse",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1936,
                                "src": "4773:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "*=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1957,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "32",
                                  "id": 1953,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4784:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1956,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1954,
                                    "name": "denominator",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1887,
                                    "src": "4788:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 1955,
                                    "name": "inverse",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1936,
                                    "src": "4802:7:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4788:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4784:25:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4773:36:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1959,
                            "nodeType": "ExpressionStatement",
                            "src": "4773:36:11"
                          },
                          {
                            "expression": {
                              "id": 1966,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 1960,
                                "name": "inverse",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1936,
                                "src": "4843:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "*=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1965,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "32",
                                  "id": 1961,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4854:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1964,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1962,
                                    "name": "denominator",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1887,
                                    "src": "4858:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 1963,
                                    "name": "inverse",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1936,
                                    "src": "4872:7:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4858:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4854:25:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4843:36:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1967,
                            "nodeType": "ExpressionStatement",
                            "src": "4843:36:11"
                          },
                          {
                            "expression": {
                              "id": 1974,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 1968,
                                "name": "inverse",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1936,
                                "src": "4913:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "*=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1973,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "32",
                                  "id": 1969,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4924:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1972,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1970,
                                    "name": "denominator",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1887,
                                    "src": "4928:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 1971,
                                    "name": "inverse",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1936,
                                    "src": "4942:7:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4928:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4924:25:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4913:36:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1975,
                            "nodeType": "ExpressionStatement",
                            "src": "4913:36:11"
                          },
                          {
                            "expression": {
                              "id": 1982,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 1976,
                                "name": "inverse",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1936,
                                "src": "4983:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "*=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1981,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "32",
                                  "id": 1977,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4994:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1980,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1978,
                                    "name": "denominator",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1887,
                                    "src": "4998:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 1979,
                                    "name": "inverse",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1936,
                                    "src": "5012:7:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4998:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4994:25:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4983:36:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1983,
                            "nodeType": "ExpressionStatement",
                            "src": "4983:36:11"
                          },
                          {
                            "expression": {
                              "id": 1990,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 1984,
                                "name": "inverse",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1936,
                                "src": "5054:7:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "*=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1989,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "32",
                                  "id": 1985,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5065:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1988,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1986,
                                    "name": "denominator",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1887,
                                    "src": "5069:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 1987,
                                    "name": "inverse",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1936,
                                    "src": "5083:7:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "5069:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5065:25:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5054:36:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1991,
                            "nodeType": "ExpressionStatement",
                            "src": "5054:36:11"
                          },
                          {
                            "expression": {
                              "id": 1996,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 1992,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1890,
                                "src": "5524:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1995,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1993,
                                  "name": "prod0",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1893,
                                  "src": "5533:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 1994,
                                  "name": "inverse",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1936,
                                  "src": "5541:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5533:15:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5524:24:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1997,
                            "nodeType": "ExpressionStatement",
                            "src": "5524:24:11"
                          },
                          {
                            "expression": {
                              "id": 1998,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1890,
                              "src": "5569:6:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 1891,
                            "id": 1999,
                            "nodeType": "Return",
                            "src": "5562:13:11"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1881,
                    "nodeType": "StructuredDocumentation",
                    "src": "1357:305:11",
                    "text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
                  },
                  "id": 2002,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mulDiv",
                  "nameLocation": "1676:6:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1888,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1883,
                        "mutability": "mutable",
                        "name": "x",
                        "nameLocation": "1700:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2002,
                        "src": "1692:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1882,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1692:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1885,
                        "mutability": "mutable",
                        "name": "y",
                        "nameLocation": "1719:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2002,
                        "src": "1711:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1884,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1711:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1887,
                        "mutability": "mutable",
                        "name": "denominator",
                        "nameLocation": "1738:11:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2002,
                        "src": "1730:19:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1886,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1730:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1682:73:11"
                  },
                  "returnParameters": {
                    "id": 1891,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1890,
                        "mutability": "mutable",
                        "name": "result",
                        "nameLocation": "1787:6:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2002,
                        "src": "1779:14:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1889,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1779:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1778:16:11"
                  },
                  "scope": 2654,
                  "src": "1667:3925:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2045,
                    "nodeType": "Block",
                    "src": "5872:189:11",
                    "statements": [
                      {
                        "assignments": [2018],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2018,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "5890:6:11",
                            "nodeType": "VariableDeclaration",
                            "scope": 2045,
                            "src": "5882:14:11",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2017,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5882:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2024,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2020,
                              "name": "x",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2005,
                              "src": "5906:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2021,
                              "name": "y",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2007,
                              "src": "5909:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2022,
                              "name": "denominator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2009,
                              "src": "5912:11:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2019,
                            "name": "mulDiv",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [2002, 2046],
                            "referencedDeclaration": 2002,
                            "src": "5899:6:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2023,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5899:25:11",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5882:42:11"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_enum$_Rounding_$1796",
                              "typeString": "enum Math.Rounding"
                            },
                            "id": 2028,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 2025,
                              "name": "rounding",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2012,
                              "src": "5938:8:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Rounding_$1796",
                                "typeString": "enum Math.Rounding"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "expression": {
                                "id": 2026,
                                "name": "Rounding",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1796,
                                "src": "5950:8:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Rounding_$1796_$",
                                  "typeString": "type(enum Math.Rounding)"
                                }
                              },
                              "id": 2027,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "Up",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1794,
                              "src": "5950:11:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Rounding_$1796",
                                "typeString": "enum Math.Rounding"
                              }
                            },
                            "src": "5938:23:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2035,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "id": 2030,
                                  "name": "x",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2005,
                                  "src": "5972:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 2031,
                                  "name": "y",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2007,
                                  "src": "5975:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 2032,
                                  "name": "denominator",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2009,
                                  "src": "5978:11:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2029,
                                "name": "mulmod",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -16,
                                "src": "5965:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2033,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5965:25:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2034,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5993:1:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "5965:29:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "5938:56:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2042,
                        "nodeType": "IfStatement",
                        "src": "5934:98:11",
                        "trueBody": {
                          "id": 2041,
                          "nodeType": "Block",
                          "src": "5996:36:11",
                          "statements": [
                            {
                              "expression": {
                                "id": 2039,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 2037,
                                  "name": "result",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2018,
                                  "src": "6010:6:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "hexValue": "31",
                                  "id": 2038,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6020:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "6010:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2040,
                              "nodeType": "ExpressionStatement",
                              "src": "6010:11:11"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 2043,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2018,
                          "src": "6048:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2016,
                        "id": 2044,
                        "nodeType": "Return",
                        "src": "6041:13:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2003,
                    "nodeType": "StructuredDocumentation",
                    "src": "5598:121:11",
                    "text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
                  },
                  "id": 2046,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mulDiv",
                  "nameLocation": "5733:6:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2013,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2005,
                        "mutability": "mutable",
                        "name": "x",
                        "nameLocation": "5757:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2046,
                        "src": "5749:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2004,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5749:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2007,
                        "mutability": "mutable",
                        "name": "y",
                        "nameLocation": "5776:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2046,
                        "src": "5768:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2006,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5768:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2009,
                        "mutability": "mutable",
                        "name": "denominator",
                        "nameLocation": "5795:11:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2046,
                        "src": "5787:19:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2008,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5787:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2012,
                        "mutability": "mutable",
                        "name": "rounding",
                        "nameLocation": "5825:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2046,
                        "src": "5816:17:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Rounding_$1796",
                          "typeString": "enum Math.Rounding"
                        },
                        "typeName": {
                          "id": 2011,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2010,
                            "name": "Rounding",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1796,
                            "src": "5816:8:11"
                          },
                          "referencedDeclaration": 1796,
                          "src": "5816:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Rounding_$1796",
                            "typeString": "enum Math.Rounding"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5739:100:11"
                  },
                  "returnParameters": {
                    "id": 2016,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2015,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2046,
                        "src": "5863:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2014,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5863:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5862:9:11"
                  },
                  "scope": 2654,
                  "src": "5724:337:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2157,
                    "nodeType": "Block",
                    "src": "6337:1585:11",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2056,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2054,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2049,
                            "src": "6351:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2055,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6356:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "6351:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2060,
                        "nodeType": "IfStatement",
                        "src": "6347:45:11",
                        "trueBody": {
                          "id": 2059,
                          "nodeType": "Block",
                          "src": "6359:33:11",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 2057,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6380:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 2053,
                              "id": 2058,
                              "nodeType": "Return",
                              "src": "6373:8:11"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [2062],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2062,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "7079:6:11",
                            "nodeType": "VariableDeclaration",
                            "scope": 2157,
                            "src": "7071:14:11",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2061,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "7071:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2071,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2070,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "31",
                            "id": 2063,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7088:1:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<<",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2068,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 2065,
                                      "name": "a",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2049,
                                      "src": "7099:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2064,
                                    "name": "log2",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [2326, 2362],
                                    "referencedDeclaration": 2326,
                                    "src": "7094:4:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2066,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7094:7:11",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2067,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7105:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "7094:12:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 2069,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "7093:14:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7088:19:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7071:36:11"
                      },
                      {
                        "id": 2156,
                        "nodeType": "UncheckedBlock",
                        "src": "7508:408:11",
                        "statements": [
                          {
                            "expression": {
                              "id": 2081,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 2072,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2062,
                                "src": "7532:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2080,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2077,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2073,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2062,
                                        "src": "7542:6:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2076,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2074,
                                          "name": "a",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2049,
                                          "src": "7551:1:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "id": 2075,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2062,
                                          "src": "7555:6:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7551:10:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7542:19:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2078,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7541:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2079,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7566:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "7541:26:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7532:35:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2082,
                            "nodeType": "ExpressionStatement",
                            "src": "7532:35:11"
                          },
                          {
                            "expression": {
                              "id": 2092,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 2083,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2062,
                                "src": "7581:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2091,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2088,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2084,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2062,
                                        "src": "7591:6:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2087,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2085,
                                          "name": "a",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2049,
                                          "src": "7600:1:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "id": 2086,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2062,
                                          "src": "7604:6:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7600:10:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7591:19:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2089,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7590:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2090,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7615:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "7590:26:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7581:35:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2093,
                            "nodeType": "ExpressionStatement",
                            "src": "7581:35:11"
                          },
                          {
                            "expression": {
                              "id": 2103,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 2094,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2062,
                                "src": "7630:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2102,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2099,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2095,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2062,
                                        "src": "7640:6:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2098,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2096,
                                          "name": "a",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2049,
                                          "src": "7649:1:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "id": 2097,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2062,
                                          "src": "7653:6:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7649:10:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7640:19:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2100,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7639:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2101,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7664:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "7639:26:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7630:35:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2104,
                            "nodeType": "ExpressionStatement",
                            "src": "7630:35:11"
                          },
                          {
                            "expression": {
                              "id": 2114,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 2105,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2062,
                                "src": "7679:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2113,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2110,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2106,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2062,
                                        "src": "7689:6:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2109,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2107,
                                          "name": "a",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2049,
                                          "src": "7698:1:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "id": 2108,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2062,
                                          "src": "7702:6:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7698:10:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7689:19:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2111,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7688:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2112,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7713:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "7688:26:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7679:35:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2115,
                            "nodeType": "ExpressionStatement",
                            "src": "7679:35:11"
                          },
                          {
                            "expression": {
                              "id": 2125,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 2116,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2062,
                                "src": "7728:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2124,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2121,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2117,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2062,
                                        "src": "7738:6:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2120,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2118,
                                          "name": "a",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2049,
                                          "src": "7747:1:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "id": 2119,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2062,
                                          "src": "7751:6:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7747:10:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7738:19:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2122,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7737:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2123,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7762:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "7737:26:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7728:35:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2126,
                            "nodeType": "ExpressionStatement",
                            "src": "7728:35:11"
                          },
                          {
                            "expression": {
                              "id": 2136,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 2127,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2062,
                                "src": "7777:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2135,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2132,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2128,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2062,
                                        "src": "7787:6:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2131,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2129,
                                          "name": "a",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2049,
                                          "src": "7796:1:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "id": 2130,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2062,
                                          "src": "7800:6:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7796:10:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7787:19:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2133,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7786:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2134,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7811:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "7786:26:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7777:35:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2137,
                            "nodeType": "ExpressionStatement",
                            "src": "7777:35:11"
                          },
                          {
                            "expression": {
                              "id": 2147,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 2138,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2062,
                                "src": "7826:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2146,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2143,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2139,
                                        "name": "result",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2062,
                                        "src": "7836:6:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2142,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2140,
                                          "name": "a",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2049,
                                          "src": "7845:1:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "id": 2141,
                                          "name": "result",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2062,
                                          "src": "7849:6:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7845:10:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7836:19:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2144,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7835:21:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2145,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7860:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "7835:26:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7826:35:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2148,
                            "nodeType": "ExpressionStatement",
                            "src": "7826:35:11"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 2150,
                                  "name": "result",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2062,
                                  "src": "7886:6:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2153,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 2151,
                                    "name": "a",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2049,
                                    "src": "7894:1:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 2152,
                                    "name": "result",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2062,
                                    "src": "7898:6:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "7894:10:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2149,
                                "name": "min",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1832,
                                "src": "7882:3:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2154,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7882:23:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 2053,
                            "id": 2155,
                            "nodeType": "Return",
                            "src": "7875:30:11"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2047,
                    "nodeType": "StructuredDocumentation",
                    "src": "6067:208:11",
                    "text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
                  },
                  "id": 2158,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sqrt",
                  "nameLocation": "6289:4:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2050,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2049,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "6302:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2158,
                        "src": "6294:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2048,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6294:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6293:11:11"
                  },
                  "returnParameters": {
                    "id": 2053,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2052,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2158,
                        "src": "6328:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2051,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6328:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6327:9:11"
                  },
                  "scope": 2654,
                  "src": "6280:1642:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2193,
                    "nodeType": "Block",
                    "src": "8098:161:11",
                    "statements": [
                      {
                        "id": 2192,
                        "nodeType": "UncheckedBlock",
                        "src": "8108:145:11",
                        "statements": [
                          {
                            "assignments": [2170],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2170,
                                "mutability": "mutable",
                                "name": "result",
                                "nameLocation": "8140:6:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2192,
                                "src": "8132:14:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2169,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8132:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 2174,
                            "initialValue": {
                              "arguments": [
                                {
                                  "id": 2172,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2161,
                                  "src": "8154:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2171,
                                "name": "sqrt",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [2158, 2194],
                                "referencedDeclaration": 2158,
                                "src": "8149:4:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2173,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8149:7:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "8132:24:11"
                          },
                          {
                            "expression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2190,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2175,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2170,
                                "src": "8177:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "components": [
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 2185,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_enum$_Rounding_$1796",
                                          "typeString": "enum Math.Rounding"
                                        },
                                        "id": 2179,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2176,
                                          "name": "rounding",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2164,
                                          "src": "8187:8:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_Rounding_$1796",
                                            "typeString": "enum Math.Rounding"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 2177,
                                            "name": "Rounding",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1796,
                                            "src": "8199:8:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_enum$_Rounding_$1796_$",
                                              "typeString": "type(enum Math.Rounding)"
                                            }
                                          },
                                          "id": 2178,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "memberName": "Up",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1794,
                                          "src": "8199:11:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_Rounding_$1796",
                                            "typeString": "enum Math.Rounding"
                                          }
                                        },
                                        "src": "8187:23:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2184,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2182,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 2180,
                                            "name": "result",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2170,
                                            "src": "8214:6:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "id": 2181,
                                            "name": "result",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2170,
                                            "src": "8223:6:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "8214:15:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<",
                                        "rightExpression": {
                                          "id": 2183,
                                          "name": "a",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2161,
                                          "src": "8232:1:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "8214:19:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "8187:46:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseExpression": {
                                      "hexValue": "30",
                                      "id": 2187,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8240:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "id": 2188,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "Conditional",
                                    "src": "8187:54:11",
                                    "trueExpression": {
                                      "hexValue": "31",
                                      "id": 2186,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8236:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "id": 2189,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "8186:56:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "src": "8177:65:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 2168,
                            "id": 2191,
                            "nodeType": "Return",
                            "src": "8170:72:11"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2159,
                    "nodeType": "StructuredDocumentation",
                    "src": "7928:89:11",
                    "text": " @notice Calculates sqrt(a), following the selected rounding direction."
                  },
                  "id": 2194,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sqrt",
                  "nameLocation": "8031:4:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2165,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2161,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "8044:1:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2194,
                        "src": "8036:9:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2160,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8036:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2164,
                        "mutability": "mutable",
                        "name": "rounding",
                        "nameLocation": "8056:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2194,
                        "src": "8047:17:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Rounding_$1796",
                          "typeString": "enum Math.Rounding"
                        },
                        "typeName": {
                          "id": 2163,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2162,
                            "name": "Rounding",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1796,
                            "src": "8047:8:11"
                          },
                          "referencedDeclaration": 1796,
                          "src": "8047:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Rounding_$1796",
                            "typeString": "enum Math.Rounding"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8035:30:11"
                  },
                  "returnParameters": {
                    "id": 2168,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2167,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2194,
                        "src": "8089:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2166,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8089:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8088:9:11"
                  },
                  "scope": 2654,
                  "src": "8022:237:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2325,
                    "nodeType": "Block",
                    "src": "8444:922:11",
                    "statements": [
                      {
                        "assignments": [2203],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2203,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "8462:6:11",
                            "nodeType": "VariableDeclaration",
                            "scope": 2325,
                            "src": "8454:14:11",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2202,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8454:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2205,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 2204,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8471:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8454:18:11"
                      },
                      {
                        "id": 2322,
                        "nodeType": "UncheckedBlock",
                        "src": "8482:855:11",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2210,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2208,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2206,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2197,
                                  "src": "8510:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "313238",
                                  "id": 2207,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8519:3:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_128_by_1",
                                    "typeString": "int_const 128"
                                  },
                                  "value": "128"
                                },
                                "src": "8510:12:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2209,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8525:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "8510:16:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2220,
                            "nodeType": "IfStatement",
                            "src": "8506:99:11",
                            "trueBody": {
                              "id": 2219,
                              "nodeType": "Block",
                              "src": "8528:77:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2213,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2211,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2197,
                                      "src": "8546:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "313238",
                                      "id": 2212,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8556:3:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_128_by_1",
                                        "typeString": "int_const 128"
                                      },
                                      "value": "128"
                                    },
                                    "src": "8546:13:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2214,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8546:13:11"
                                },
                                {
                                  "expression": {
                                    "id": 2217,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2215,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2203,
                                      "src": "8577:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "313238",
                                      "id": 2216,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8587:3:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_128_by_1",
                                        "typeString": "int_const 128"
                                      },
                                      "value": "128"
                                    },
                                    "src": "8577:13:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2218,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8577:13:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2225,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2223,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2221,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2197,
                                  "src": "8622:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "3634",
                                  "id": 2222,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8631:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_64_by_1",
                                    "typeString": "int_const 64"
                                  },
                                  "value": "64"
                                },
                                "src": "8622:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2224,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8636:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "8622:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2235,
                            "nodeType": "IfStatement",
                            "src": "8618:96:11",
                            "trueBody": {
                              "id": 2234,
                              "nodeType": "Block",
                              "src": "8639:75:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2228,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2226,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2197,
                                      "src": "8657:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "3634",
                                      "id": 2227,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8667:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_64_by_1",
                                        "typeString": "int_const 64"
                                      },
                                      "value": "64"
                                    },
                                    "src": "8657:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2229,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8657:12:11"
                                },
                                {
                                  "expression": {
                                    "id": 2232,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2230,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2203,
                                      "src": "8687:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "3634",
                                      "id": 2231,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8697:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_64_by_1",
                                        "typeString": "int_const 64"
                                      },
                                      "value": "64"
                                    },
                                    "src": "8687:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2233,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8687:12:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2240,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2238,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2236,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2197,
                                  "src": "8731:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "3332",
                                  "id": 2237,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8740:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "8731:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2239,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8745:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "8731:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2250,
                            "nodeType": "IfStatement",
                            "src": "8727:96:11",
                            "trueBody": {
                              "id": 2249,
                              "nodeType": "Block",
                              "src": "8748:75:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2243,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2241,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2197,
                                      "src": "8766:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "3332",
                                      "id": 2242,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8776:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "32"
                                    },
                                    "src": "8766:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2244,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8766:12:11"
                                },
                                {
                                  "expression": {
                                    "id": 2247,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2245,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2203,
                                      "src": "8796:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "3332",
                                      "id": 2246,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8806:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "32"
                                    },
                                    "src": "8796:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2248,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8796:12:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2255,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2253,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2251,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2197,
                                  "src": "8840:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "3136",
                                  "id": 2252,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8849:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_16_by_1",
                                    "typeString": "int_const 16"
                                  },
                                  "value": "16"
                                },
                                "src": "8840:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2254,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8854:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "8840:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2265,
                            "nodeType": "IfStatement",
                            "src": "8836:96:11",
                            "trueBody": {
                              "id": 2264,
                              "nodeType": "Block",
                              "src": "8857:75:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2258,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2256,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2197,
                                      "src": "8875:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "3136",
                                      "id": 2257,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8885:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_16_by_1",
                                        "typeString": "int_const 16"
                                      },
                                      "value": "16"
                                    },
                                    "src": "8875:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2259,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8875:12:11"
                                },
                                {
                                  "expression": {
                                    "id": 2262,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2260,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2203,
                                      "src": "8905:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "3136",
                                      "id": 2261,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8915:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_16_by_1",
                                        "typeString": "int_const 16"
                                      },
                                      "value": "16"
                                    },
                                    "src": "8905:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2263,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8905:12:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2270,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2268,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2266,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2197,
                                  "src": "8949:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "38",
                                  "id": 2267,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8958:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_8_by_1",
                                    "typeString": "int_const 8"
                                  },
                                  "value": "8"
                                },
                                "src": "8949:10:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2269,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8962:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "8949:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2280,
                            "nodeType": "IfStatement",
                            "src": "8945:93:11",
                            "trueBody": {
                              "id": 2279,
                              "nodeType": "Block",
                              "src": "8965:73:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2273,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2271,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2197,
                                      "src": "8983:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "38",
                                      "id": 2272,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8993:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_8_by_1",
                                        "typeString": "int_const 8"
                                      },
                                      "value": "8"
                                    },
                                    "src": "8983:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2274,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8983:11:11"
                                },
                                {
                                  "expression": {
                                    "id": 2277,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2275,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2203,
                                      "src": "9012:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "38",
                                      "id": 2276,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9022:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_8_by_1",
                                        "typeString": "int_const 8"
                                      },
                                      "value": "8"
                                    },
                                    "src": "9012:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2278,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9012:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2285,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2283,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2281,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2197,
                                  "src": "9055:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "34",
                                  "id": 2282,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9064:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_4_by_1",
                                    "typeString": "int_const 4"
                                  },
                                  "value": "4"
                                },
                                "src": "9055:10:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2284,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9068:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "9055:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2295,
                            "nodeType": "IfStatement",
                            "src": "9051:93:11",
                            "trueBody": {
                              "id": 2294,
                              "nodeType": "Block",
                              "src": "9071:73:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2288,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2286,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2197,
                                      "src": "9089:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "34",
                                      "id": 2287,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9099:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_4_by_1",
                                        "typeString": "int_const 4"
                                      },
                                      "value": "4"
                                    },
                                    "src": "9089:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2289,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9089:11:11"
                                },
                                {
                                  "expression": {
                                    "id": 2292,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2290,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2203,
                                      "src": "9118:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "34",
                                      "id": 2291,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9128:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_4_by_1",
                                        "typeString": "int_const 4"
                                      },
                                      "value": "4"
                                    },
                                    "src": "9118:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2293,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9118:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2300,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2298,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2296,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2197,
                                  "src": "9161:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "32",
                                  "id": 2297,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9170:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "src": "9161:10:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2299,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9174:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "9161:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2310,
                            "nodeType": "IfStatement",
                            "src": "9157:93:11",
                            "trueBody": {
                              "id": 2309,
                              "nodeType": "Block",
                              "src": "9177:73:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2303,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2301,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2197,
                                      "src": "9195:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "32",
                                      "id": 2302,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9205:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "9195:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2304,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9195:11:11"
                                },
                                {
                                  "expression": {
                                    "id": 2307,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2305,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2203,
                                      "src": "9224:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "32",
                                      "id": 2306,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9234:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "9224:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2308,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9224:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2315,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2313,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2311,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2197,
                                  "src": "9267:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2312,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9276:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "9267:10:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2314,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9280:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "9267:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2321,
                            "nodeType": "IfStatement",
                            "src": "9263:64:11",
                            "trueBody": {
                              "id": 2320,
                              "nodeType": "Block",
                              "src": "9283:44:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2318,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2316,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2203,
                                      "src": "9301:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "31",
                                      "id": 2317,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9311:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "9301:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2319,
                                  "nodeType": "ExpressionStatement",
                                  "src": "9301:11:11"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "expression": {
                          "id": 2323,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2203,
                          "src": "9353:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2201,
                        "id": 2324,
                        "nodeType": "Return",
                        "src": "9346:13:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2195,
                    "nodeType": "StructuredDocumentation",
                    "src": "8265:113:11",
                    "text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
                  },
                  "id": 2326,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "log2",
                  "nameLocation": "8392:4:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2198,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2197,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "8405:5:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2326,
                        "src": "8397:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2196,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8397:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8396:15:11"
                  },
                  "returnParameters": {
                    "id": 2201,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2200,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2326,
                        "src": "8435:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2199,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8435:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8434:9:11"
                  },
                  "scope": 2654,
                  "src": "8383:983:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2361,
                    "nodeType": "Block",
                    "src": "9599:165:11",
                    "statements": [
                      {
                        "id": 2360,
                        "nodeType": "UncheckedBlock",
                        "src": "9609:149:11",
                        "statements": [
                          {
                            "assignments": [2338],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2338,
                                "mutability": "mutable",
                                "name": "result",
                                "nameLocation": "9641:6:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2360,
                                "src": "9633:14:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2337,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9633:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 2342,
                            "initialValue": {
                              "arguments": [
                                {
                                  "id": 2340,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2329,
                                  "src": "9655:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2339,
                                "name": "log2",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [2326, 2362],
                                "referencedDeclaration": 2326,
                                "src": "9650:4:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2341,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9650:11:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "9633:28:11"
                          },
                          {
                            "expression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2358,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2343,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2338,
                                "src": "9682:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "components": [
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 2353,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_enum$_Rounding_$1796",
                                          "typeString": "enum Math.Rounding"
                                        },
                                        "id": 2347,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2344,
                                          "name": "rounding",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2332,
                                          "src": "9692:8:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_Rounding_$1796",
                                            "typeString": "enum Math.Rounding"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 2345,
                                            "name": "Rounding",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1796,
                                            "src": "9704:8:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_enum$_Rounding_$1796_$",
                                              "typeString": "type(enum Math.Rounding)"
                                            }
                                          },
                                          "id": 2346,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "memberName": "Up",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1794,
                                          "src": "9704:11:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_Rounding_$1796",
                                            "typeString": "enum Math.Rounding"
                                          }
                                        },
                                        "src": "9692:23:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2352,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2350,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "hexValue": "31",
                                            "id": 2348,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "9719:1:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_1_by_1",
                                              "typeString": "int_const 1"
                                            },
                                            "value": "1"
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "<<",
                                          "rightExpression": {
                                            "id": 2349,
                                            "name": "result",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2338,
                                            "src": "9724:6:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "9719:11:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<",
                                        "rightExpression": {
                                          "id": 2351,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2329,
                                          "src": "9733:5:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "9719:19:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "9692:46:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseExpression": {
                                      "hexValue": "30",
                                      "id": 2355,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9745:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "id": 2356,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "Conditional",
                                    "src": "9692:54:11",
                                    "trueExpression": {
                                      "hexValue": "31",
                                      "id": 2354,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "9741:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "id": 2357,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "9691:56:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "src": "9682:65:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 2336,
                            "id": 2359,
                            "nodeType": "Return",
                            "src": "9675:72:11"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2327,
                    "nodeType": "StructuredDocumentation",
                    "src": "9372:142:11",
                    "text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
                  },
                  "id": 2362,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "log2",
                  "nameLocation": "9528:4:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2333,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2329,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "9541:5:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2362,
                        "src": "9533:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2328,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9533:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2332,
                        "mutability": "mutable",
                        "name": "rounding",
                        "nameLocation": "9557:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2362,
                        "src": "9548:17:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Rounding_$1796",
                          "typeString": "enum Math.Rounding"
                        },
                        "typeName": {
                          "id": 2331,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2330,
                            "name": "Rounding",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1796,
                            "src": "9548:8:11"
                          },
                          "referencedDeclaration": 1796,
                          "src": "9548:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Rounding_$1796",
                            "typeString": "enum Math.Rounding"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9532:34:11"
                  },
                  "returnParameters": {
                    "id": 2336,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2335,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2362,
                        "src": "9590:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2334,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9590:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9589:9:11"
                  },
                  "scope": 2654,
                  "src": "9519:245:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2490,
                    "nodeType": "Block",
                    "src": "9951:828:11",
                    "statements": [
                      {
                        "assignments": [2371],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2371,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "9969:6:11",
                            "nodeType": "VariableDeclaration",
                            "scope": 2490,
                            "src": "9961:14:11",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2370,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "9961:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2373,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 2372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "9978:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9961:18:11"
                      },
                      {
                        "id": 2487,
                        "nodeType": "UncheckedBlock",
                        "src": "9989:761:11",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2378,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2374,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2365,
                                "src": "10017:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
                                  "typeString": "int_const 1000...(57 digits omitted)...0000"
                                },
                                "id": 2377,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 2375,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10026:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "3634",
                                  "id": 2376,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10030:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_64_by_1",
                                    "typeString": "int_const 64"
                                  },
                                  "value": "64"
                                },
                                "src": "10026:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
                                  "typeString": "int_const 1000...(57 digits omitted)...0000"
                                }
                              },
                              "src": "10017:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2390,
                            "nodeType": "IfStatement",
                            "src": "10013:99:11",
                            "trueBody": {
                              "id": 2389,
                              "nodeType": "Block",
                              "src": "10034:78:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2383,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2379,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2365,
                                      "src": "10052:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "/=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
                                        "typeString": "int_const 1000...(57 digits omitted)...0000"
                                      },
                                      "id": 2382,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 2380,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10061:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "3634",
                                        "id": 2381,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10065:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_64_by_1",
                                          "typeString": "int_const 64"
                                        },
                                        "value": "64"
                                      },
                                      "src": "10061:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
                                        "typeString": "int_const 1000...(57 digits omitted)...0000"
                                      }
                                    },
                                    "src": "10052:15:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2384,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10052:15:11"
                                },
                                {
                                  "expression": {
                                    "id": 2387,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2385,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2371,
                                      "src": "10085:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "3634",
                                      "id": 2386,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10095:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_64_by_1",
                                        "typeString": "int_const 64"
                                      },
                                      "value": "64"
                                    },
                                    "src": "10085:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2388,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10085:12:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2395,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2391,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2365,
                                "src": "10129:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
                                  "typeString": "int_const 1000...(25 digits omitted)...0000"
                                },
                                "id": 2394,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 2392,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10138:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "3332",
                                  "id": 2393,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10142:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "10138:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
                                  "typeString": "int_const 1000...(25 digits omitted)...0000"
                                }
                              },
                              "src": "10129:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2407,
                            "nodeType": "IfStatement",
                            "src": "10125:99:11",
                            "trueBody": {
                              "id": 2406,
                              "nodeType": "Block",
                              "src": "10146:78:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2400,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2396,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2365,
                                      "src": "10164:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "/=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
                                        "typeString": "int_const 1000...(25 digits omitted)...0000"
                                      },
                                      "id": 2399,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 2397,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10173:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "3332",
                                        "id": 2398,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10177:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_32_by_1",
                                          "typeString": "int_const 32"
                                        },
                                        "value": "32"
                                      },
                                      "src": "10173:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
                                        "typeString": "int_const 1000...(25 digits omitted)...0000"
                                      }
                                    },
                                    "src": "10164:15:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2401,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10164:15:11"
                                },
                                {
                                  "expression": {
                                    "id": 2404,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2402,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2371,
                                      "src": "10197:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "3332",
                                      "id": 2403,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10207:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "32"
                                    },
                                    "src": "10197:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2405,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10197:12:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2412,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2408,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2365,
                                "src": "10241:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_10000000000000000_by_1",
                                  "typeString": "int_const 10000000000000000"
                                },
                                "id": 2411,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 2409,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10250:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "3136",
                                  "id": 2410,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10254:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_16_by_1",
                                    "typeString": "int_const 16"
                                  },
                                  "value": "16"
                                },
                                "src": "10250:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10000000000000000_by_1",
                                  "typeString": "int_const 10000000000000000"
                                }
                              },
                              "src": "10241:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2424,
                            "nodeType": "IfStatement",
                            "src": "10237:99:11",
                            "trueBody": {
                              "id": 2423,
                              "nodeType": "Block",
                              "src": "10258:78:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2417,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2413,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2365,
                                      "src": "10276:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "/=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_10000000000000000_by_1",
                                        "typeString": "int_const 10000000000000000"
                                      },
                                      "id": 2416,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 2414,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10285:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "3136",
                                        "id": 2415,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10289:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_16_by_1",
                                          "typeString": "int_const 16"
                                        },
                                        "value": "16"
                                      },
                                      "src": "10285:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_10000000000000000_by_1",
                                        "typeString": "int_const 10000000000000000"
                                      }
                                    },
                                    "src": "10276:15:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2418,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10276:15:11"
                                },
                                {
                                  "expression": {
                                    "id": 2421,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2419,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2371,
                                      "src": "10309:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "3136",
                                      "id": 2420,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10319:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_16_by_1",
                                        "typeString": "int_const 16"
                                      },
                                      "value": "16"
                                    },
                                    "src": "10309:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2422,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10309:12:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2429,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2425,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2365,
                                "src": "10353:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_100000000_by_1",
                                  "typeString": "int_const 100000000"
                                },
                                "id": 2428,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 2426,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10362:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "38",
                                  "id": 2427,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10366:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_8_by_1",
                                    "typeString": "int_const 8"
                                  },
                                  "value": "8"
                                },
                                "src": "10362:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_100000000_by_1",
                                  "typeString": "int_const 100000000"
                                }
                              },
                              "src": "10353:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2441,
                            "nodeType": "IfStatement",
                            "src": "10349:96:11",
                            "trueBody": {
                              "id": 2440,
                              "nodeType": "Block",
                              "src": "10369:76:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2434,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2430,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2365,
                                      "src": "10387:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "/=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_100000000_by_1",
                                        "typeString": "int_const 100000000"
                                      },
                                      "id": 2433,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 2431,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10396:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "38",
                                        "id": 2432,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10400:1:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_8_by_1",
                                          "typeString": "int_const 8"
                                        },
                                        "value": "8"
                                      },
                                      "src": "10396:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100000000_by_1",
                                        "typeString": "int_const 100000000"
                                      }
                                    },
                                    "src": "10387:14:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2435,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10387:14:11"
                                },
                                {
                                  "expression": {
                                    "id": 2438,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2436,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2371,
                                      "src": "10419:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "38",
                                      "id": 2437,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10429:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_8_by_1",
                                        "typeString": "int_const 8"
                                      },
                                      "value": "8"
                                    },
                                    "src": "10419:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2439,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10419:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2446,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2442,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2365,
                                "src": "10462:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_10000_by_1",
                                  "typeString": "int_const 10000"
                                },
                                "id": 2445,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 2443,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10471:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "34",
                                  "id": 2444,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10475:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_4_by_1",
                                    "typeString": "int_const 4"
                                  },
                                  "value": "4"
                                },
                                "src": "10471:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10000_by_1",
                                  "typeString": "int_const 10000"
                                }
                              },
                              "src": "10462:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2458,
                            "nodeType": "IfStatement",
                            "src": "10458:96:11",
                            "trueBody": {
                              "id": 2457,
                              "nodeType": "Block",
                              "src": "10478:76:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2451,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2447,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2365,
                                      "src": "10496:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "/=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_10000_by_1",
                                        "typeString": "int_const 10000"
                                      },
                                      "id": 2450,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 2448,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10505:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "34",
                                        "id": 2449,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10509:1:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_4_by_1",
                                          "typeString": "int_const 4"
                                        },
                                        "value": "4"
                                      },
                                      "src": "10505:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_10000_by_1",
                                        "typeString": "int_const 10000"
                                      }
                                    },
                                    "src": "10496:14:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2452,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10496:14:11"
                                },
                                {
                                  "expression": {
                                    "id": 2455,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2453,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2371,
                                      "src": "10528:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "34",
                                      "id": 2454,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10538:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_4_by_1",
                                        "typeString": "int_const 4"
                                      },
                                      "value": "4"
                                    },
                                    "src": "10528:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2456,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10528:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2463,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2459,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2365,
                                "src": "10571:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_100_by_1",
                                  "typeString": "int_const 100"
                                },
                                "id": 2462,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 2460,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10580:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "32",
                                  "id": 2461,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10584:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "src": "10580:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_100_by_1",
                                  "typeString": "int_const 100"
                                }
                              },
                              "src": "10571:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2475,
                            "nodeType": "IfStatement",
                            "src": "10567:96:11",
                            "trueBody": {
                              "id": 2474,
                              "nodeType": "Block",
                              "src": "10587:76:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2468,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2464,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2365,
                                      "src": "10605:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "/=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "id": 2467,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 2465,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10614:2:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "32",
                                        "id": 2466,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "10618:1:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "src": "10614:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      }
                                    },
                                    "src": "10605:14:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2469,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10605:14:11"
                                },
                                {
                                  "expression": {
                                    "id": 2472,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2470,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2371,
                                      "src": "10637:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "32",
                                      "id": 2471,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10647:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "10637:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2473,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10637:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2480,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2476,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2365,
                                "src": "10680:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "id": 2479,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 2477,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10689:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 2478,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10693:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "10689:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                }
                              },
                              "src": "10680:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2486,
                            "nodeType": "IfStatement",
                            "src": "10676:64:11",
                            "trueBody": {
                              "id": 2485,
                              "nodeType": "Block",
                              "src": "10696:44:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2483,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2481,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2371,
                                      "src": "10714:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "31",
                                      "id": 2482,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10724:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "10714:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2484,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10714:11:11"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "expression": {
                          "id": 2488,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2371,
                          "src": "10766:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2369,
                        "id": 2489,
                        "nodeType": "Return",
                        "src": "10759:13:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2363,
                    "nodeType": "StructuredDocumentation",
                    "src": "9770:114:11",
                    "text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
                  },
                  "id": 2491,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "log10",
                  "nameLocation": "9898:5:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2366,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2365,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "9912:5:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2491,
                        "src": "9904:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2364,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9904:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9903:15:11"
                  },
                  "returnParameters": {
                    "id": 2369,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2368,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2491,
                        "src": "9942:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2367,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9942:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9941:9:11"
                  },
                  "scope": 2654,
                  "src": "9889:890:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2526,
                    "nodeType": "Block",
                    "src": "11014:165:11",
                    "statements": [
                      {
                        "id": 2525,
                        "nodeType": "UncheckedBlock",
                        "src": "11024:149:11",
                        "statements": [
                          {
                            "assignments": [2503],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2503,
                                "mutability": "mutable",
                                "name": "result",
                                "nameLocation": "11056:6:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2525,
                                "src": "11048:14:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2502,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "11048:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 2507,
                            "initialValue": {
                              "arguments": [
                                {
                                  "id": 2505,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2494,
                                  "src": "11071:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2504,
                                "name": "log10",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [2491, 2527],
                                "referencedDeclaration": 2491,
                                "src": "11065:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2506,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11065:12:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "11048:29:11"
                          },
                          {
                            "expression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2523,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2508,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2503,
                                "src": "11098:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "components": [
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 2518,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_enum$_Rounding_$1796",
                                          "typeString": "enum Math.Rounding"
                                        },
                                        "id": 2512,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2509,
                                          "name": "rounding",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2497,
                                          "src": "11108:8:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_Rounding_$1796",
                                            "typeString": "enum Math.Rounding"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 2510,
                                            "name": "Rounding",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1796,
                                            "src": "11120:8:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_enum$_Rounding_$1796_$",
                                              "typeString": "type(enum Math.Rounding)"
                                            }
                                          },
                                          "id": 2511,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "memberName": "Up",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1794,
                                          "src": "11120:11:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_Rounding_$1796",
                                            "typeString": "enum Math.Rounding"
                                          }
                                        },
                                        "src": "11108:23:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2517,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2515,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "hexValue": "3130",
                                            "id": 2513,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "11135:2:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_10_by_1",
                                              "typeString": "int_const 10"
                                            },
                                            "value": "10"
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "**",
                                          "rightExpression": {
                                            "id": 2514,
                                            "name": "result",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2503,
                                            "src": "11139:6:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "11135:10:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<",
                                        "rightExpression": {
                                          "id": 2516,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2494,
                                          "src": "11148:5:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "11135:18:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "11108:45:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseExpression": {
                                      "hexValue": "30",
                                      "id": 2520,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11160:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "id": 2521,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "Conditional",
                                    "src": "11108:53:11",
                                    "trueExpression": {
                                      "hexValue": "31",
                                      "id": 2519,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11156:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "id": 2522,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "11107:55:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "src": "11098:64:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 2501,
                            "id": 2524,
                            "nodeType": "Return",
                            "src": "11091:71:11"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2492,
                    "nodeType": "StructuredDocumentation",
                    "src": "10785:143:11",
                    "text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
                  },
                  "id": 2527,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "log10",
                  "nameLocation": "10942:5:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2498,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2494,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "10956:5:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2527,
                        "src": "10948:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2493,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10948:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2497,
                        "mutability": "mutable",
                        "name": "rounding",
                        "nameLocation": "10972:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2527,
                        "src": "10963:17:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Rounding_$1796",
                          "typeString": "enum Math.Rounding"
                        },
                        "typeName": {
                          "id": 2496,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2495,
                            "name": "Rounding",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1796,
                            "src": "10963:8:11"
                          },
                          "referencedDeclaration": 1796,
                          "src": "10963:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Rounding_$1796",
                            "typeString": "enum Math.Rounding"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10947:34:11"
                  },
                  "returnParameters": {
                    "id": 2501,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2500,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2527,
                        "src": "11005:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2499,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11005:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11004:9:11"
                  },
                  "scope": 2654,
                  "src": "10933:246:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2613,
                    "nodeType": "Block",
                    "src": "11493:600:11",
                    "statements": [
                      {
                        "assignments": [2536],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2536,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "11511:6:11",
                            "nodeType": "VariableDeclaration",
                            "scope": 2613,
                            "src": "11503:14:11",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2535,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "11503:7:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2538,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 2537,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11520:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11503:18:11"
                      },
                      {
                        "id": 2610,
                        "nodeType": "UncheckedBlock",
                        "src": "11531:533:11",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2543,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2541,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2539,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2530,
                                  "src": "11559:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "313238",
                                  "id": 2540,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11568:3:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_128_by_1",
                                    "typeString": "int_const 128"
                                  },
                                  "value": "128"
                                },
                                "src": "11559:12:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2542,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11574:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "11559:16:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2553,
                            "nodeType": "IfStatement",
                            "src": "11555:98:11",
                            "trueBody": {
                              "id": 2552,
                              "nodeType": "Block",
                              "src": "11577:76:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2546,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2544,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2530,
                                      "src": "11595:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "313238",
                                      "id": 2545,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11605:3:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_128_by_1",
                                        "typeString": "int_const 128"
                                      },
                                      "value": "128"
                                    },
                                    "src": "11595:13:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2547,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11595:13:11"
                                },
                                {
                                  "expression": {
                                    "id": 2550,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2548,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2536,
                                      "src": "11626:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "3136",
                                      "id": 2549,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11636:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_16_by_1",
                                        "typeString": "int_const 16"
                                      },
                                      "value": "16"
                                    },
                                    "src": "11626:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2551,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11626:12:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2558,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2556,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2554,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2530,
                                  "src": "11670:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "3634",
                                  "id": 2555,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11679:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_64_by_1",
                                    "typeString": "int_const 64"
                                  },
                                  "value": "64"
                                },
                                "src": "11670:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2557,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11684:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "11670:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2568,
                            "nodeType": "IfStatement",
                            "src": "11666:95:11",
                            "trueBody": {
                              "id": 2567,
                              "nodeType": "Block",
                              "src": "11687:74:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2561,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2559,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2530,
                                      "src": "11705:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "3634",
                                      "id": 2560,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11715:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_64_by_1",
                                        "typeString": "int_const 64"
                                      },
                                      "value": "64"
                                    },
                                    "src": "11705:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2562,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11705:12:11"
                                },
                                {
                                  "expression": {
                                    "id": 2565,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2563,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2536,
                                      "src": "11735:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "38",
                                      "id": 2564,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11745:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_8_by_1",
                                        "typeString": "int_const 8"
                                      },
                                      "value": "8"
                                    },
                                    "src": "11735:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2566,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11735:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2573,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2571,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2569,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2530,
                                  "src": "11778:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "3332",
                                  "id": 2570,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11787:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "11778:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11792:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "11778:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2583,
                            "nodeType": "IfStatement",
                            "src": "11774:95:11",
                            "trueBody": {
                              "id": 2582,
                              "nodeType": "Block",
                              "src": "11795:74:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2576,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2574,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2530,
                                      "src": "11813:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "3332",
                                      "id": 2575,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11823:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "32"
                                    },
                                    "src": "11813:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2577,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11813:12:11"
                                },
                                {
                                  "expression": {
                                    "id": 2580,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2578,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2536,
                                      "src": "11843:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "34",
                                      "id": 2579,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11853:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_4_by_1",
                                        "typeString": "int_const 4"
                                      },
                                      "value": "4"
                                    },
                                    "src": "11843:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2581,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11843:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2588,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2586,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2584,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2530,
                                  "src": "11886:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "3136",
                                  "id": 2585,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11895:2:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_16_by_1",
                                    "typeString": "int_const 16"
                                  },
                                  "value": "16"
                                },
                                "src": "11886:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2587,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11900:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "11886:15:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2598,
                            "nodeType": "IfStatement",
                            "src": "11882:95:11",
                            "trueBody": {
                              "id": 2597,
                              "nodeType": "Block",
                              "src": "11903:74:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2591,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2589,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2530,
                                      "src": "11921:5:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": ">>=",
                                    "rightHandSide": {
                                      "hexValue": "3136",
                                      "id": 2590,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11931:2:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_16_by_1",
                                        "typeString": "int_const 16"
                                      },
                                      "value": "16"
                                    },
                                    "src": "11921:12:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2592,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11921:12:11"
                                },
                                {
                                  "expression": {
                                    "id": 2595,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2593,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2536,
                                      "src": "11951:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "32",
                                      "id": 2594,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11961:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "src": "11951:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2596,
                                  "nodeType": "ExpressionStatement",
                                  "src": "11951:11:11"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2603,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2601,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2599,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2530,
                                  "src": "11994:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">>",
                                "rightExpression": {
                                  "hexValue": "38",
                                  "id": 2600,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "12003:1:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_8_by_1",
                                    "typeString": "int_const 8"
                                  },
                                  "value": "8"
                                },
                                "src": "11994:10:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2602,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12007:1:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "11994:14:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2609,
                            "nodeType": "IfStatement",
                            "src": "11990:64:11",
                            "trueBody": {
                              "id": 2608,
                              "nodeType": "Block",
                              "src": "12010:44:11",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 2606,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 2604,
                                      "name": "result",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2536,
                                      "src": "12028:6:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "+=",
                                    "rightHandSide": {
                                      "hexValue": "31",
                                      "id": 2605,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12038:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "12028:11:11",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2607,
                                  "nodeType": "ExpressionStatement",
                                  "src": "12028:11:11"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "expression": {
                          "id": 2611,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2536,
                          "src": "12080:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2534,
                        "id": 2612,
                        "nodeType": "Return",
                        "src": "12073:13:11"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2528,
                    "nodeType": "StructuredDocumentation",
                    "src": "11185:240:11",
                    "text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
                  },
                  "id": 2614,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "log256",
                  "nameLocation": "11439:6:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2531,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2530,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "11454:5:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2614,
                        "src": "11446:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2529,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11446:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11445:15:11"
                  },
                  "returnParameters": {
                    "id": 2534,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2533,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2614,
                        "src": "11484:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2532,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11484:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11483:9:11"
                  },
                  "scope": 2654,
                  "src": "11430:663:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2652,
                    "nodeType": "Block",
                    "src": "12329:173:11",
                    "statements": [
                      {
                        "id": 2651,
                        "nodeType": "UncheckedBlock",
                        "src": "12339:157:11",
                        "statements": [
                          {
                            "assignments": [2626],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2626,
                                "mutability": "mutable",
                                "name": "result",
                                "nameLocation": "12371:6:11",
                                "nodeType": "VariableDeclaration",
                                "scope": 2651,
                                "src": "12363:14:11",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2625,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "12363:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 2630,
                            "initialValue": {
                              "arguments": [
                                {
                                  "id": 2628,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2617,
                                  "src": "12387:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2627,
                                "name": "log256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [2614, 2653],
                                "referencedDeclaration": 2614,
                                "src": "12380:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2629,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12380:13:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "12363:30:11"
                          },
                          {
                            "expression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2649,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2631,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2626,
                                "src": "12414:6:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "components": [
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 2644,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_enum$_Rounding_$1796",
                                          "typeString": "enum Math.Rounding"
                                        },
                                        "id": 2635,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2632,
                                          "name": "rounding",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2620,
                                          "src": "12424:8:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_Rounding_$1796",
                                            "typeString": "enum Math.Rounding"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "==",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 2633,
                                            "name": "Rounding",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1796,
                                            "src": "12436:8:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_enum$_Rounding_$1796_$",
                                              "typeString": "type(enum Math.Rounding)"
                                            }
                                          },
                                          "id": 2634,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "memberName": "Up",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1794,
                                          "src": "12436:11:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_Rounding_$1796",
                                            "typeString": "enum Math.Rounding"
                                          }
                                        },
                                        "src": "12424:23:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "&&",
                                      "rightExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2643,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2641,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "hexValue": "31",
                                            "id": 2636,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "12451:1:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_1_by_1",
                                              "typeString": "int_const 1"
                                            },
                                            "value": "1"
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "<<",
                                          "rightExpression": {
                                            "components": [
                                              {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2639,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "id": 2637,
                                                  "name": "result",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 2626,
                                                  "src": "12457:6:11",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                  "hexValue": "38",
                                                  "id": 2638,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "12466:1:11",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_8_by_1",
                                                    "typeString": "int_const 8"
                                                  },
                                                  "value": "8"
                                                },
                                                "src": "12457:10:11",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "id": 2640,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "12456:12:11",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "12451:17:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "<",
                                        "rightExpression": {
                                          "id": 2642,
                                          "name": "value",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2617,
                                          "src": "12471:5:11",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "12451:25:11",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "src": "12424:52:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseExpression": {
                                      "hexValue": "30",
                                      "id": 2646,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12483:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "id": 2647,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "Conditional",
                                    "src": "12424:60:11",
                                    "trueExpression": {
                                      "hexValue": "31",
                                      "id": 2645,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12479:1:11",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "id": 2648,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "12423:62:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "src": "12414:71:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 2624,
                            "id": 2650,
                            "nodeType": "Return",
                            "src": "12407:78:11"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2615,
                    "nodeType": "StructuredDocumentation",
                    "src": "12099:143:11",
                    "text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
                  },
                  "id": 2653,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "log256",
                  "nameLocation": "12256:6:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2621,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2617,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "12271:5:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2653,
                        "src": "12263:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2616,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12263:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2620,
                        "mutability": "mutable",
                        "name": "rounding",
                        "nameLocation": "12287:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 2653,
                        "src": "12278:17:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Rounding_$1796",
                          "typeString": "enum Math.Rounding"
                        },
                        "typeName": {
                          "id": 2619,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2618,
                            "name": "Rounding",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1796,
                            "src": "12278:8:11"
                          },
                          "referencedDeclaration": 1796,
                          "src": "12278:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Rounding_$1796",
                            "typeString": "enum Math.Rounding"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12262:34:11"
                  },
                  "returnParameters": {
                    "id": 2624,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2623,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2653,
                        "src": "12320:7:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2622,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12320:7:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12319:9:11"
                  },
                  "scope": 2654,
                  "src": "12247:255:11",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2655,
              "src": "202:12302:11",
              "usedErrors": []
            }
          ],
          "src": "103:12402:11"
        },
        "id": 11
      },
      "contracts/FleekAccessControl.sol": {
        "ast": {
          "absolutePath": "contracts/FleekAccessControl.sol",
          "exportedSymbols": {
            "Counters": [1578],
            "FleekAccessControl": [3289]
          },
          "id": 3290,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 2656,
              "literals": ["solidity", "^", "0.8", ".7"],
              "nodeType": "PragmaDirective",
              "src": "33:23:12"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
              "file": "@openzeppelin/contracts/utils/Counters.sol",
              "id": 2657,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 3290,
              "sourceUnit": 1579,
              "src": "58:52:12",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "FleekAccessControl",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 3289,
              "linearizedBaseContracts": [3289],
              "name": "FleekAccessControl",
              "nameLocation": "121:18:12",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 2661,
                  "libraryName": {
                    "id": 2658,
                    "name": "Counters",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1578,
                    "src": "152:8:12"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "146:36:12",
                  "typeName": {
                    "id": 2660,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2659,
                      "name": "Counters.Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1510,
                      "src": "165:16:12"
                    },
                    "referencedDeclaration": 1510,
                    "src": "165:16:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  }
                },
                {
                  "canonicalName": "FleekAccessControl.Roles",
                  "id": 2664,
                  "members": [
                    {
                      "id": 2662,
                      "name": "Owner",
                      "nameLocation": "209:5:12",
                      "nodeType": "EnumValue",
                      "src": "209:5:12"
                    },
                    {
                      "id": 2663,
                      "name": "Controller",
                      "nameLocation": "224:10:12",
                      "nodeType": "EnumValue",
                      "src": "224:10:12"
                    }
                  ],
                  "name": "Roles",
                  "nameLocation": "193:5:12",
                  "nodeType": "EnumDefinition",
                  "src": "188:52:12"
                },
                {
                  "anonymous": false,
                  "id": 2675,
                  "name": "TokenRoleGranted",
                  "nameLocation": "252:16:12",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2674,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2666,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "285:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2675,
                        "src": "269:23:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2665,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "269:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2669,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "308:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2675,
                        "src": "294:18:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2668,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2667,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "294:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "294:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2671,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "toAddress",
                        "nameLocation": "330:9:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2675,
                        "src": "314:25:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2670,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "314:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2673,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "byAddress",
                        "nameLocation": "349:9:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2675,
                        "src": "341:17:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2672,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "341:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "268:91:12"
                  },
                  "src": "246:114:12"
                },
                {
                  "anonymous": false,
                  "id": 2686,
                  "name": "TokenRoleRevoked",
                  "nameLocation": "371:16:12",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2685,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2677,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "404:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2686,
                        "src": "388:23:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2676,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "388:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2680,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "427:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2686,
                        "src": "413:18:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2679,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2678,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "413:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "413:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2682,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "toAddress",
                        "nameLocation": "449:9:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2686,
                        "src": "433:25:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2681,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "433:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2684,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "byAddress",
                        "nameLocation": "468:9:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2686,
                        "src": "460:17:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2683,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "460:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "387:91:12"
                  },
                  "src": "365:114:12"
                },
                {
                  "anonymous": false,
                  "id": 2695,
                  "name": "CollectionRoleGranted",
                  "nameLocation": "490:21:12",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2694,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2689,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "526:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2695,
                        "src": "512:18:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2688,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2687,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "512:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "512:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2691,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "toAddress",
                        "nameLocation": "548:9:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2695,
                        "src": "532:25:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2690,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "532:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2693,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "byAddress",
                        "nameLocation": "567:9:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2695,
                        "src": "559:17:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2692,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "559:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "511:66:12"
                  },
                  "src": "484:94:12"
                },
                {
                  "anonymous": false,
                  "id": 2704,
                  "name": "CollectionRoleRevoked",
                  "nameLocation": "589:21:12",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2703,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2698,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "625:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2704,
                        "src": "611:18:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2697,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2696,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "611:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "611:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2700,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "toAddress",
                        "nameLocation": "647:9:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2704,
                        "src": "631:25:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2699,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "631:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2702,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "byAddress",
                        "nameLocation": "666:9:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2704,
                        "src": "658:17:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2701,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "658:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "610:66:12"
                  },
                  "src": "583:94:12"
                },
                {
                  "canonicalName": "FleekAccessControl.Role",
                  "id": 2712,
                  "members": [
                    {
                      "constant": false,
                      "id": 2708,
                      "mutability": "mutable",
                      "name": "indexes",
                      "nameLocation": "733:7:12",
                      "nodeType": "VariableDeclaration",
                      "scope": 2712,
                      "src": "705:35:12",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      },
                      "typeName": {
                        "id": 2707,
                        "keyType": {
                          "id": 2705,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "713:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "705:27:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        },
                        "valueType": {
                          "id": 2706,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "724:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2711,
                      "mutability": "mutable",
                      "name": "members",
                      "nameLocation": "760:7:12",
                      "nodeType": "VariableDeclaration",
                      "scope": 2712,
                      "src": "750:17:12",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 2709,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "750:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2710,
                        "nodeType": "ArrayTypeName",
                        "src": "750:9:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Role",
                  "nameLocation": "690:4:12",
                  "nodeType": "StructDefinition",
                  "scope": 3289,
                  "src": "683:91:12",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 2715,
                  "mutability": "mutable",
                  "name": "_collectionRolesVersion",
                  "nameLocation": "805:23:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3289,
                  "src": "780:48:12",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$1510_storage",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 2714,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2713,
                      "name": "Counters.Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1510,
                      "src": "780:16:12"
                    },
                    "referencedDeclaration": 1510,
                    "src": "780:16:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 2723,
                  "mutability": "mutable",
                  "name": "_collectionRoles",
                  "nameLocation": "924:16:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3289,
                  "src": "873:67:12",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                    "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role))"
                  },
                  "typeName": {
                    "id": 2722,
                    "keyType": {
                      "id": 2716,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "881:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "873:42:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                      "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role))"
                    },
                    "valueType": {
                      "id": 2721,
                      "keyType": {
                        "id": 2718,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2717,
                          "name": "Roles",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 2664,
                          "src": "900:5:12"
                        },
                        "referencedDeclaration": 2664,
                        "src": "900:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "892:22:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                        "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)"
                      },
                      "valueType": {
                        "id": 2720,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2719,
                          "name": "Role",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 2712,
                          "src": "909:4:12"
                        },
                        "referencedDeclaration": 2712,
                        "src": "909:4:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                          "typeString": "struct FleekAccessControl.Role"
                        }
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 2728,
                  "mutability": "mutable",
                  "name": "_tokenRolesVersion",
                  "nameLocation": "992:18:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3289,
                  "src": "947:63:12",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Counter_$1510_storage_$",
                    "typeString": "mapping(uint256 => struct Counters.Counter)"
                  },
                  "typeName": {
                    "id": 2727,
                    "keyType": {
                      "id": 2724,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "955:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "947:36:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Counter_$1510_storage_$",
                      "typeString": "mapping(uint256 => struct Counters.Counter)"
                    },
                    "valueType": {
                      "id": 2726,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 2725,
                        "name": "Counters.Counter",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1510,
                        "src": "966:16:12"
                      },
                      "referencedDeclaration": 1510,
                      "src": "966:16:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                        "typeString": "struct Counters.Counter"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 2738,
                  "mutability": "mutable",
                  "name": "_tokenRoles",
                  "nameLocation": "1130:11:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 3289,
                  "src": "1059:82:12",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$_$",
                    "typeString": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)))"
                  },
                  "typeName": {
                    "id": 2737,
                    "keyType": {
                      "id": 2729,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1067:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1059:62:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$_$",
                      "typeString": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)))"
                    },
                    "valueType": {
                      "id": 2736,
                      "keyType": {
                        "id": 2730,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1086:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "1078:42:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                        "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role))"
                      },
                      "valueType": {
                        "id": 2735,
                        "keyType": {
                          "id": 2732,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2731,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "1105:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "1105:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "1097:22:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                          "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)"
                        },
                        "valueType": {
                          "id": 2734,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2733,
                            "name": "Role",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2712,
                            "src": "1114:4:12"
                          },
                          "referencedDeclaration": 2712,
                          "src": "1114:4:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                            "typeString": "struct FleekAccessControl.Role"
                          }
                        }
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 2749,
                    "nodeType": "Block",
                    "src": "1261:62:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2743,
                                "name": "Roles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2664,
                                "src": "1292:5:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                                  "typeString": "type(enum FleekAccessControl.Roles)"
                                }
                              },
                              "id": 2744,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "Owner",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2662,
                              "src": "1292:11:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "expression": {
                                "id": 2745,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1305:3:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2746,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1305:10:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2742,
                            "name": "_grantCollectionRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3036,
                            "src": "1271:20:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_Roles_$2664_$_t_address_$returns$__$",
                              "typeString": "function (enum FleekAccessControl.Roles,address)"
                            }
                          },
                          "id": 2747,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1271:45:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2748,
                        "nodeType": "ExpressionStatement",
                        "src": "1271:45:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2739,
                    "nodeType": "StructuredDocumentation",
                    "src": "1148:94:12",
                    "text": " @dev Initializes the contract by granting the `Owner` role to the deployer."
                  },
                  "id": 2750,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2740,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1258:2:12"
                  },
                  "returnParameters": {
                    "id": 2741,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1261:0:12"
                  },
                  "scope": 3289,
                  "src": "1247:76:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2773,
                    "nodeType": "Block",
                    "src": "1447:201:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 2768,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 2758,
                                    "name": "role",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2754,
                                    "src": "1496:4:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Roles_$2664",
                                      "typeString": "enum FleekAccessControl.Roles"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2759,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "1502:3:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2760,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "1502:10:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_enum$_Roles_$2664",
                                      "typeString": "enum FleekAccessControl.Roles"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 2757,
                                  "name": "hasCollectionRole",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2915,
                                  "src": "1478:17:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_enum$_Roles_$2664_$_t_address_$returns$_t_bool_$",
                                    "typeString": "function (enum FleekAccessControl.Roles,address) view returns (bool)"
                                  }
                                },
                                "id": 2761,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1478:35:12",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2763,
                                      "name": "Roles",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2664,
                                      "src": "1535:5:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                                        "typeString": "type(enum FleekAccessControl.Roles)"
                                      }
                                    },
                                    "id": 2764,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "Owner",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2662,
                                    "src": "1535:11:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Roles_$2664",
                                      "typeString": "enum FleekAccessControl.Roles"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2765,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "1548:3:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2766,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "1548:10:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_enum$_Roles_$2664",
                                      "typeString": "enum FleekAccessControl.Roles"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 2762,
                                  "name": "hasCollectionRole",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2915,
                                  "src": "1517:17:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_enum$_Roles_$2664_$_t_address_$returns$_t_bool_$",
                                    "typeString": "function (enum FleekAccessControl.Roles,address) view returns (bool)"
                                  }
                                },
                                "id": 2767,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1517:42:12",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "1478:81:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "466c65656b416363657373436f6e74726f6c3a206d757374206861766520636f6c6c656374696f6e20726f6c65",
                              "id": 2769,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1573:47:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_4148ec37a64ec95bdb92f953894c60cd645a4110d986d5e7807895e51cfc091d",
                                "typeString": "literal_string \"FleekAccessControl: must have collection role\""
                              },
                              "value": "FleekAccessControl: must have collection role"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_4148ec37a64ec95bdb92f953894c60cd645a4110d986d5e7807895e51cfc091d",
                                "typeString": "literal_string \"FleekAccessControl: must have collection role\""
                              }
                            ],
                            "id": 2756,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "1457:7:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2770,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1457:173:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2771,
                        "nodeType": "ExpressionStatement",
                        "src": "1457:173:12"
                      },
                      {
                        "id": 2772,
                        "nodeType": "PlaceholderStatement",
                        "src": "1640:1:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2751,
                    "nodeType": "StructuredDocumentation",
                    "src": "1329:70:12",
                    "text": " @dev Checks if the `msg.sender` has a certain role."
                  },
                  "id": 2774,
                  "name": "requireCollectionRole",
                  "nameLocation": "1413:21:12",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 2755,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2754,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "1441:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2774,
                        "src": "1435:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2753,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2752,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "1435:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "1435:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1434:12:12"
                  },
                  "src": "1404:244:12",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2801,
                    "nodeType": "Block",
                    "src": "1810:204:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 2796,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 2784,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2777,
                                    "src": "1854:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 2785,
                                    "name": "role",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2780,
                                    "src": "1863:4:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Roles_$2664",
                                      "typeString": "enum FleekAccessControl.Roles"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2786,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "1869:3:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2787,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "1869:10:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_enum$_Roles_$2664",
                                      "typeString": "enum FleekAccessControl.Roles"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 2783,
                                  "name": "hasTokenRole",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2950,
                                  "src": "1841:12:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Roles_$2664_$_t_address_$returns$_t_bool_$",
                                    "typeString": "function (uint256,enum FleekAccessControl.Roles,address) view returns (bool)"
                                  }
                                },
                                "id": 2788,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1841:39:12",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 2790,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2777,
                                    "src": "1897:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2791,
                                      "name": "Roles",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2664,
                                      "src": "1906:5:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                                        "typeString": "type(enum FleekAccessControl.Roles)"
                                      }
                                    },
                                    "id": 2792,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "Owner",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2662,
                                    "src": "1906:11:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Roles_$2664",
                                      "typeString": "enum FleekAccessControl.Roles"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2793,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "1919:3:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2794,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "1919:10:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_enum$_Roles_$2664",
                                      "typeString": "enum FleekAccessControl.Roles"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 2789,
                                  "name": "hasTokenRole",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2950,
                                  "src": "1884:12:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Roles_$2664_$_t_address_$returns$_t_bool_$",
                                    "typeString": "function (uint256,enum FleekAccessControl.Roles,address) view returns (bool)"
                                  }
                                },
                                "id": 2795,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1884:46:12",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "1841:89:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "466c65656b416363657373436f6e74726f6c3a206d757374206861766520746f6b656e20726f6c65",
                              "id": 2797,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1944:42:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_eb1c0c9ae9b08acb80c4120d36170cdc2082e24234001d93bd98c02d4e707db0",
                                "typeString": "literal_string \"FleekAccessControl: must have token role\""
                              },
                              "value": "FleekAccessControl: must have token role"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_eb1c0c9ae9b08acb80c4120d36170cdc2082e24234001d93bd98c02d4e707db0",
                                "typeString": "literal_string \"FleekAccessControl: must have token role\""
                              }
                            ],
                            "id": 2782,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "1820:7:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2798,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1820:176:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2799,
                        "nodeType": "ExpressionStatement",
                        "src": "1820:176:12"
                      },
                      {
                        "id": 2800,
                        "nodeType": "PlaceholderStatement",
                        "src": "2006:1:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2775,
                    "nodeType": "StructuredDocumentation",
                    "src": "1654:96:12",
                    "text": " @dev Checks if the `msg.sender` has the `Token` role for a certain `tokenId`."
                  },
                  "id": 2802,
                  "name": "requireTokenRole",
                  "nameLocation": "1764:16:12",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 2781,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2777,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1789:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2802,
                        "src": "1781:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2776,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1781:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2780,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "1804:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2802,
                        "src": "1798:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2779,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2778,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "1798:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "1798:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1780:29:12"
                  },
                  "src": "1755:259:12",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2820,
                    "nodeType": "Block",
                    "src": "2285:52:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2816,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2806,
                              "src": "2316:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 2817,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2808,
                              "src": "2322:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2815,
                            "name": "_grantCollectionRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3036,
                            "src": "2295:20:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_Roles_$2664_$_t_address_$returns$__$",
                              "typeString": "function (enum FleekAccessControl.Roles,address)"
                            }
                          },
                          "id": 2818,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2295:35:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2819,
                        "nodeType": "ExpressionStatement",
                        "src": "2295:35:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2803,
                    "nodeType": "StructuredDocumentation",
                    "src": "2020:160:12",
                    "text": " @dev Grants the collection role to an address.\n Requirements:\n - the caller should have the collection role."
                  },
                  "functionSelector": "2d957aad",
                  "id": 2821,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 2811,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "2272:5:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 2812,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2662,
                          "src": "2272:11:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 2813,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2810,
                        "name": "requireCollectionRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2774,
                        "src": "2250:21:12"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2250:34:12"
                    }
                  ],
                  "name": "grantCollectionRole",
                  "nameLocation": "2194:19:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2809,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2806,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "2220:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2821,
                        "src": "2214:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2805,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2804,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "2214:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "2214:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2808,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2234:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2821,
                        "src": "2226:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2807,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2226:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2213:29:12"
                  },
                  "returnParameters": {
                    "id": 2814,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2285:0:12"
                  },
                  "scope": 3289,
                  "src": "2185:152:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2843,
                    "nodeType": "Block",
                    "src": "2644:56:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2838,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2824,
                              "src": "2670:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2839,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2827,
                              "src": "2679:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 2840,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2829,
                              "src": "2685:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2837,
                            "name": "_grantTokenRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3107,
                            "src": "2654:15:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_enum$_Roles_$2664_$_t_address_$returns$__$",
                              "typeString": "function (uint256,enum FleekAccessControl.Roles,address)"
                            }
                          },
                          "id": 2841,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2654:39:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2842,
                        "nodeType": "ExpressionStatement",
                        "src": "2654:39:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2822,
                    "nodeType": "StructuredDocumentation",
                    "src": "2343:150:12",
                    "text": " @dev Grants the token role to an address.\n Requirements:\n - the caller should have the token role."
                  },
                  "functionSelector": "a27d0b27",
                  "id": 2844,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 2832,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2824,
                          "src": "2622:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 2833,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "2631:5:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 2834,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2662,
                          "src": "2631:11:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 2835,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2831,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "2605:16:12"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2605:38:12"
                    }
                  ],
                  "name": "grantTokenRole",
                  "nameLocation": "2507:14:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2830,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2824,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2539:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2844,
                        "src": "2531:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2823,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2531:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2827,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "2562:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2844,
                        "src": "2556:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2826,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2825,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "2556:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "2556:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2829,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2584:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2844,
                        "src": "2576:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2828,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2576:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2521:76:12"
                  },
                  "returnParameters": {
                    "id": 2836,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2644:0:12"
                  },
                  "scope": 3289,
                  "src": "2498:202:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2862,
                    "nodeType": "Block",
                    "src": "2973:53:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2858,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2848,
                              "src": "3005:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 2859,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2850,
                              "src": "3011:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2857,
                            "name": "_revokeCollectionRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3068,
                            "src": "2983:21:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_Roles_$2664_$_t_address_$returns$__$",
                              "typeString": "function (enum FleekAccessControl.Roles,address)"
                            }
                          },
                          "id": 2860,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2983:36:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2861,
                        "nodeType": "ExpressionStatement",
                        "src": "2983:36:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2845,
                    "nodeType": "StructuredDocumentation",
                    "src": "2706:161:12",
                    "text": " @dev Revokes the collection role of an address.\n Requirements:\n - the caller should have the collection role."
                  },
                  "functionSelector": "8c3c0a44",
                  "id": 2863,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 2853,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "2960:5:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 2854,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2662,
                          "src": "2960:11:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 2855,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2852,
                        "name": "requireCollectionRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2774,
                        "src": "2938:21:12"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2938:34:12"
                    }
                  ],
                  "name": "revokeCollectionRole",
                  "nameLocation": "2881:20:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2851,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2848,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "2908:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2863,
                        "src": "2902:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2847,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2846,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "2902:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "2902:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2850,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "2922:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2863,
                        "src": "2914:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2849,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2914:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2901:29:12"
                  },
                  "returnParameters": {
                    "id": 2856,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2973:0:12"
                  },
                  "scope": 3289,
                  "src": "2872:154:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2885,
                    "nodeType": "Block",
                    "src": "3335:57:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2880,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2866,
                              "src": "3362:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2881,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2869,
                              "src": "3371:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 2882,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2871,
                              "src": "3377:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2879,
                            "name": "_revokeTokenRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3146,
                            "src": "3345:16:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_enum$_Roles_$2664_$_t_address_$returns$__$",
                              "typeString": "function (uint256,enum FleekAccessControl.Roles,address)"
                            }
                          },
                          "id": 2883,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3345:40:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2884,
                        "nodeType": "ExpressionStatement",
                        "src": "3345:40:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2864,
                    "nodeType": "StructuredDocumentation",
                    "src": "3032:151:12",
                    "text": " @dev Revokes the token role of an address.\n Requirements:\n - the caller should have the token role."
                  },
                  "functionSelector": "01468deb",
                  "id": 2886,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 2874,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2866,
                          "src": "3313:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 2875,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "3322:5:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 2876,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2662,
                          "src": "3322:11:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 2877,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2873,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "3296:16:12"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3296:38:12"
                    }
                  ],
                  "name": "revokeTokenRole",
                  "nameLocation": "3197:15:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2872,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2866,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3230:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2886,
                        "src": "3222:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2865,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3222:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2869,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "3253:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2886,
                        "src": "3247:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2868,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2867,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "3247:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "3247:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2871,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3275:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2886,
                        "src": "3267:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2870,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3267:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3212:76:12"
                  },
                  "returnParameters": {
                    "id": 2878,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3335:0:12"
                  },
                  "scope": 3289,
                  "src": "3188:204:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2914,
                    "nodeType": "Block",
                    "src": "3570:153:12",
                    "statements": [
                      {
                        "assignments": [2898],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2898,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "3588:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 2914,
                            "src": "3580:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2897,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3580:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2902,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 2899,
                              "name": "_collectionRolesVersion",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2715,
                              "src": "3605:23:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 2900,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "3605:31:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 2901,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3605:33:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3580:58:12"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2912,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 2903,
                                    "name": "_collectionRoles",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2723,
                                    "src": "3656:16:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                                      "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref))"
                                    }
                                  },
                                  "id": 2905,
                                  "indexExpression": {
                                    "id": 2904,
                                    "name": "currentVersion",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2898,
                                    "src": "3673:14:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "3656:32:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                                    "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)"
                                  }
                                },
                                "id": 2907,
                                "indexExpression": {
                                  "id": 2906,
                                  "name": "role",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2890,
                                  "src": "3689:4:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Roles_$2664",
                                    "typeString": "enum FleekAccessControl.Roles"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3656:38:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Role_$2712_storage",
                                  "typeString": "struct FleekAccessControl.Role storage ref"
                                }
                              },
                              "id": 2908,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "indexes",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2708,
                              "src": "3656:46:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 2910,
                            "indexExpression": {
                              "id": 2909,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2892,
                              "src": "3703:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3656:55:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2911,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3715:1:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3656:60:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2896,
                        "id": 2913,
                        "nodeType": "Return",
                        "src": "3649:67:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2887,
                    "nodeType": "StructuredDocumentation",
                    "src": "3398:84:12",
                    "text": " @dev Returns `True` if a certain address has the collection role."
                  },
                  "functionSelector": "e9447250",
                  "id": 2915,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "hasCollectionRole",
                  "nameLocation": "3496:17:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2893,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2890,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "3520:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2915,
                        "src": "3514:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2889,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2888,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "3514:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "3514:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2892,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3534:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2915,
                        "src": "3526:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2891,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3526:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3513:29:12"
                  },
                  "returnParameters": {
                    "id": 2896,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2895,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2915,
                        "src": "3564:4:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2894,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3564:4:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3563:6:12"
                  },
                  "scope": 3289,
                  "src": "3487:236:12",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2949,
                    "nodeType": "Block",
                    "src": "3908:160:12",
                    "statements": [
                      {
                        "assignments": [2929],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2929,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "3926:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 2949,
                            "src": "3918:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2928,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3918:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2935,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "baseExpression": {
                                "id": 2930,
                                "name": "_tokenRolesVersion",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2728,
                                "src": "3943:18:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Counter_$1510_storage_$",
                                  "typeString": "mapping(uint256 => struct Counters.Counter storage ref)"
                                }
                              },
                              "id": 2932,
                              "indexExpression": {
                                "id": 2931,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2918,
                                "src": "3962:7:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3943:27:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 2933,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "3943:35:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 2934,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3943:37:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3918:62:12"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2947,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 2936,
                                      "name": "_tokenRoles",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2738,
                                      "src": "3997:11:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$_$",
                                        "typeString": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)))"
                                      }
                                    },
                                    "id": 2938,
                                    "indexExpression": {
                                      "id": 2937,
                                      "name": "tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2918,
                                      "src": "4009:7:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "3997:20:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                                      "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref))"
                                    }
                                  },
                                  "id": 2940,
                                  "indexExpression": {
                                    "id": 2939,
                                    "name": "currentVersion",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2929,
                                    "src": "4018:14:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "3997:36:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                                    "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)"
                                  }
                                },
                                "id": 2942,
                                "indexExpression": {
                                  "id": 2941,
                                  "name": "role",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2921,
                                  "src": "4034:4:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Roles_$2664",
                                    "typeString": "enum FleekAccessControl.Roles"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3997:42:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Role_$2712_storage",
                                  "typeString": "struct FleekAccessControl.Role storage ref"
                                }
                              },
                              "id": 2943,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "indexes",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2708,
                              "src": "3997:50:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 2945,
                            "indexExpression": {
                              "id": 2944,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2923,
                              "src": "4048:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3997:59:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2946,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4060:1:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3997:64:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2927,
                        "id": 2948,
                        "nodeType": "Return",
                        "src": "3990:71:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2916,
                    "nodeType": "StructuredDocumentation",
                    "src": "3729:79:12",
                    "text": " @dev Returns `True` if a certain address has the token role."
                  },
                  "functionSelector": "b42dbe38",
                  "id": 2950,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "hasTokenRole",
                  "nameLocation": "3822:12:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2924,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2918,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3843:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2950,
                        "src": "3835:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2917,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3835:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2921,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "3858:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2950,
                        "src": "3852:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2920,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2919,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "3852:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "3852:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2923,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3872:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2950,
                        "src": "3864:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2922,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3864:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3834:46:12"
                  },
                  "returnParameters": {
                    "id": 2927,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2926,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2950,
                        "src": "3902:4:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2925,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3902:4:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3901:6:12"
                  },
                  "scope": 3289,
                  "src": "3813:255:12",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2973,
                    "nodeType": "Block",
                    "src": "4252:138:12",
                    "statements": [
                      {
                        "assignments": [2961],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2961,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "4270:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 2973,
                            "src": "4262:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2960,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4262:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2965,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 2962,
                              "name": "_collectionRolesVersion",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2715,
                              "src": "4287:23:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 2963,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "4287:31:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 2964,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4287:33:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4262:58:12"
                      },
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 2966,
                                "name": "_collectionRoles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2723,
                                "src": "4337:16:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                                  "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref))"
                                }
                              },
                              "id": 2968,
                              "indexExpression": {
                                "id": 2967,
                                "name": "currentVersion",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2961,
                                "src": "4354:14:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4337:32:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                                "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)"
                              }
                            },
                            "id": 2970,
                            "indexExpression": {
                              "id": 2969,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2954,
                              "src": "4370:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4337:38:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$2712_storage",
                              "typeString": "struct FleekAccessControl.Role storage ref"
                            }
                          },
                          "id": 2971,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "members",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2711,
                          "src": "4337:46:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                            "typeString": "address[] storage ref"
                          }
                        },
                        "functionReturnParameters": 2959,
                        "id": 2972,
                        "nodeType": "Return",
                        "src": "4330:53:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2951,
                    "nodeType": "StructuredDocumentation",
                    "src": "4074:88:12",
                    "text": " @dev Returns an array of addresses that all have the collection role."
                  },
                  "functionSelector": "353b07a4",
                  "id": 2974,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getCollectionRoleMembers",
                  "nameLocation": "4176:24:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2955,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2954,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "4207:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 2974,
                        "src": "4201:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2953,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2952,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "4201:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "4201:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4200:12:12"
                  },
                  "returnParameters": {
                    "id": 2959,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2958,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2974,
                        "src": "4234:16:12",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 2956,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4234:7:12",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 2957,
                          "nodeType": "ArrayTypeName",
                          "src": "4234:9:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4233:18:12"
                  },
                  "scope": 3289,
                  "src": "4167:223:12",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3003,
                    "nodeType": "Block",
                    "src": "4608:146:12",
                    "statements": [
                      {
                        "assignments": [2987],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2987,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "4626:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 3003,
                            "src": "4618:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2986,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4618:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2993,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "baseExpression": {
                                "id": 2988,
                                "name": "_tokenRolesVersion",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2728,
                                "src": "4643:18:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Counter_$1510_storage_$",
                                  "typeString": "mapping(uint256 => struct Counters.Counter storage ref)"
                                }
                              },
                              "id": 2990,
                              "indexExpression": {
                                "id": 2989,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2977,
                                "src": "4662:7:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4643:27:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 2991,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "4643:35:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 2992,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4643:37:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4618:62:12"
                      },
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 2994,
                                  "name": "_tokenRoles",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2738,
                                  "src": "4697:11:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$_$",
                                    "typeString": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)))"
                                  }
                                },
                                "id": 2996,
                                "indexExpression": {
                                  "id": 2995,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2977,
                                  "src": "4709:7:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4697:20:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                                  "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref))"
                                }
                              },
                              "id": 2998,
                              "indexExpression": {
                                "id": 2997,
                                "name": "currentVersion",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2987,
                                "src": "4718:14:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4697:36:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                                "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)"
                              }
                            },
                            "id": 3000,
                            "indexExpression": {
                              "id": 2999,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2980,
                              "src": "4734:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4697:42:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$2712_storage",
                              "typeString": "struct FleekAccessControl.Role storage ref"
                            }
                          },
                          "id": 3001,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "members",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2711,
                          "src": "4697:50:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                            "typeString": "address[] storage ref"
                          }
                        },
                        "functionReturnParameters": 2985,
                        "id": 3002,
                        "nodeType": "Return",
                        "src": "4690:57:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2975,
                    "nodeType": "StructuredDocumentation",
                    "src": "4396:110:12",
                    "text": " @dev Returns an array of addresses that all have the same token role for a certain tokenId."
                  },
                  "functionSelector": "2f1e8f0a",
                  "id": 3004,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getTokenRoleMembers",
                  "nameLocation": "4520:19:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2981,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2977,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4548:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3004,
                        "src": "4540:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2976,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4540:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2980,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "4563:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3004,
                        "src": "4557:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 2979,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 2978,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "4557:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "4557:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4539:29:12"
                  },
                  "returnParameters": {
                    "id": 2985,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2984,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3004,
                        "src": "4590:16:12",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 2982,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4590:7:12",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 2983,
                          "nodeType": "ArrayTypeName",
                          "src": "4590:9:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4589:18:12"
                  },
                  "scope": 3289,
                  "src": "4511:243:12",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3035,
                    "nodeType": "Block",
                    "src": "4898:207:12",
                    "statements": [
                      {
                        "assignments": [3014],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3014,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "4916:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 3035,
                            "src": "4908:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3013,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4908:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3018,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 3015,
                              "name": "_collectionRolesVersion",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2715,
                              "src": "4933:23:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 3016,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "4933:31:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 3017,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4933:33:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4908:58:12"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 3020,
                                  "name": "_collectionRoles",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2723,
                                  "src": "4987:16:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                                    "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref))"
                                  }
                                },
                                "id": 3022,
                                "indexExpression": {
                                  "id": 3021,
                                  "name": "currentVersion",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3014,
                                  "src": "5004:14:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4987:32:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                                  "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)"
                                }
                              },
                              "id": 3024,
                              "indexExpression": {
                                "id": 3023,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3008,
                                "src": "5020:4:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Roles_$2664",
                                  "typeString": "enum FleekAccessControl.Roles"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4987:38:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Role_$2712_storage",
                                "typeString": "struct FleekAccessControl.Role storage ref"
                              }
                            },
                            {
                              "id": 3025,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3010,
                              "src": "5027:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Role_$2712_storage",
                                "typeString": "struct FleekAccessControl.Role storage ref"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3019,
                            "name": "_grantRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3182,
                            "src": "4976:10:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$2712_storage_ptr_$_t_address_$returns$__$",
                              "typeString": "function (struct FleekAccessControl.Role storage pointer,address)"
                            }
                          },
                          "id": 3026,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4976:59:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3027,
                        "nodeType": "ExpressionStatement",
                        "src": "4976:59:12"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3029,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3008,
                              "src": "5072:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 3030,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3010,
                              "src": "5078:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 3031,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "5087:3:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3032,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5087:10:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3028,
                            "name": "CollectionRoleGranted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2695,
                            "src": "5050:21:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_enum$_Roles_$2664_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (enum FleekAccessControl.Roles,address,address)"
                            }
                          },
                          "id": 3033,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5050:48:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3034,
                        "nodeType": "EmitStatement",
                        "src": "5045:53:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3005,
                    "nodeType": "StructuredDocumentation",
                    "src": "4760:65:12",
                    "text": " @dev Grants the collection role to an address."
                  },
                  "id": 3036,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_grantCollectionRole",
                  "nameLocation": "4839:20:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3011,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3008,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "4866:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3036,
                        "src": "4860:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 3007,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 3006,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "4860:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "4860:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3010,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "4880:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3036,
                        "src": "4872:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3009,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4872:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4859:29:12"
                  },
                  "returnParameters": {
                    "id": 3012,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4898:0:12"
                  },
                  "scope": 3289,
                  "src": "4830:275:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3067,
                    "nodeType": "Block",
                    "src": "5251:208:12",
                    "statements": [
                      {
                        "assignments": [3046],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3046,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "5269:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 3067,
                            "src": "5261:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3045,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5261:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3050,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 3047,
                              "name": "_collectionRolesVersion",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2715,
                              "src": "5286:23:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 3048,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "5286:31:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 3049,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5286:33:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5261:58:12"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 3052,
                                  "name": "_collectionRoles",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2723,
                                  "src": "5341:16:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                                    "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref))"
                                  }
                                },
                                "id": 3054,
                                "indexExpression": {
                                  "id": 3053,
                                  "name": "currentVersion",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3046,
                                  "src": "5358:14:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5341:32:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                                  "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)"
                                }
                              },
                              "id": 3056,
                              "indexExpression": {
                                "id": 3055,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3040,
                                "src": "5374:4:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Roles_$2664",
                                  "typeString": "enum FleekAccessControl.Roles"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5341:38:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Role_$2712_storage",
                                "typeString": "struct FleekAccessControl.Role storage ref"
                              }
                            },
                            {
                              "id": 3057,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3042,
                              "src": "5381:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Role_$2712_storage",
                                "typeString": "struct FleekAccessControl.Role storage ref"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3051,
                            "name": "_revokeRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3255,
                            "src": "5329:11:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$2712_storage_ptr_$_t_address_$returns$__$",
                              "typeString": "function (struct FleekAccessControl.Role storage pointer,address)"
                            }
                          },
                          "id": 3058,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5329:60:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3059,
                        "nodeType": "ExpressionStatement",
                        "src": "5329:60:12"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3061,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3040,
                              "src": "5426:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 3062,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3042,
                              "src": "5432:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 3063,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "5441:3:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3064,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5441:10:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3060,
                            "name": "CollectionRoleRevoked",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2704,
                            "src": "5404:21:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_enum$_Roles_$2664_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (enum FleekAccessControl.Roles,address,address)"
                            }
                          },
                          "id": 3065,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5404:48:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3066,
                        "nodeType": "EmitStatement",
                        "src": "5399:53:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3037,
                    "nodeType": "StructuredDocumentation",
                    "src": "5111:66:12",
                    "text": " @dev Revokes the collection role of an address."
                  },
                  "id": 3068,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_revokeCollectionRole",
                  "nameLocation": "5191:21:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3043,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3040,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "5219:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3068,
                        "src": "5213:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 3039,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 3038,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "5213:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "5213:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3042,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "5233:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3068,
                        "src": "5225:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3041,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5225:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5212:29:12"
                  },
                  "returnParameters": {
                    "id": 3044,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5251:0:12"
                  },
                  "scope": 3289,
                  "src": "5182:277:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3106,
                    "nodeType": "Block",
                    "src": "5610:219:12",
                    "statements": [
                      {
                        "assignments": [3080],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3080,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "5628:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 3106,
                            "src": "5620:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3079,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5620:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3086,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "baseExpression": {
                                "id": 3081,
                                "name": "_tokenRolesVersion",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2728,
                                "src": "5645:18:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Counter_$1510_storage_$",
                                  "typeString": "mapping(uint256 => struct Counters.Counter storage ref)"
                                }
                              },
                              "id": 3083,
                              "indexExpression": {
                                "id": 3082,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3071,
                                "src": "5664:7:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5645:27:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 3084,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "5645:35:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 3085,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5645:37:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5620:62:12"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 3088,
                                    "name": "_tokenRoles",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2738,
                                    "src": "5703:11:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$_$",
                                      "typeString": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)))"
                                    }
                                  },
                                  "id": 3090,
                                  "indexExpression": {
                                    "id": 3089,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3071,
                                    "src": "5715:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5703:20:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                                    "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref))"
                                  }
                                },
                                "id": 3092,
                                "indexExpression": {
                                  "id": 3091,
                                  "name": "currentVersion",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3080,
                                  "src": "5724:14:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5703:36:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                                  "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)"
                                }
                              },
                              "id": 3094,
                              "indexExpression": {
                                "id": 3093,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3074,
                                "src": "5740:4:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Roles_$2664",
                                  "typeString": "enum FleekAccessControl.Roles"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5703:42:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Role_$2712_storage",
                                "typeString": "struct FleekAccessControl.Role storage ref"
                              }
                            },
                            {
                              "id": 3095,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3076,
                              "src": "5747:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Role_$2712_storage",
                                "typeString": "struct FleekAccessControl.Role storage ref"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3087,
                            "name": "_grantRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3182,
                            "src": "5692:10:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$2712_storage_ptr_$_t_address_$returns$__$",
                              "typeString": "function (struct FleekAccessControl.Role storage pointer,address)"
                            }
                          },
                          "id": 3096,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5692:63:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3097,
                        "nodeType": "ExpressionStatement",
                        "src": "5692:63:12"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3099,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3071,
                              "src": "5787:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3100,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3074,
                              "src": "5796:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 3101,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3076,
                              "src": "5802:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 3102,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "5811:3:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3103,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "5811:10:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3098,
                            "name": "TokenRoleGranted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2675,
                            "src": "5770:16:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_enum$_Roles_$2664_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (uint256,enum FleekAccessControl.Roles,address,address)"
                            }
                          },
                          "id": 3104,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5770:52:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3105,
                        "nodeType": "EmitStatement",
                        "src": "5765:57:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3069,
                    "nodeType": "StructuredDocumentation",
                    "src": "5465:60:12",
                    "text": " @dev Grants the token role to an address."
                  },
                  "id": 3107,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_grantTokenRole",
                  "nameLocation": "5539:15:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3077,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3071,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "5563:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3107,
                        "src": "5555:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3070,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5555:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3074,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "5578:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3107,
                        "src": "5572:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 3073,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 3072,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "5572:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "5572:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3076,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "5592:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3107,
                        "src": "5584:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3075,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5584:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5554:46:12"
                  },
                  "returnParameters": {
                    "id": 3078,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5610:0:12"
                  },
                  "scope": 3289,
                  "src": "5530:299:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3145,
                    "nodeType": "Block",
                    "src": "5982:220:12",
                    "statements": [
                      {
                        "assignments": [3119],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3119,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "6000:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 3145,
                            "src": "5992:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3118,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5992:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3125,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "baseExpression": {
                                "id": 3120,
                                "name": "_tokenRolesVersion",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2728,
                                "src": "6017:18:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Counter_$1510_storage_$",
                                  "typeString": "mapping(uint256 => struct Counters.Counter storage ref)"
                                }
                              },
                              "id": 3122,
                              "indexExpression": {
                                "id": 3121,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3110,
                                "src": "6036:7:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6017:27:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 3123,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "6017:35:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 3124,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6017:37:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5992:62:12"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 3127,
                                    "name": "_tokenRoles",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2738,
                                    "src": "6076:11:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$_$",
                                      "typeString": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)))"
                                    }
                                  },
                                  "id": 3129,
                                  "indexExpression": {
                                    "id": 3128,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3110,
                                    "src": "6088:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6076:20:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$_$",
                                    "typeString": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref))"
                                  }
                                },
                                "id": 3131,
                                "indexExpression": {
                                  "id": 3130,
                                  "name": "currentVersion",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3119,
                                  "src": "6097:14:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6076:36:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_Roles_$2664_$_t_struct$_Role_$2712_storage_$",
                                  "typeString": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role storage ref)"
                                }
                              },
                              "id": 3133,
                              "indexExpression": {
                                "id": 3132,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3113,
                                "src": "6113:4:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Roles_$2664",
                                  "typeString": "enum FleekAccessControl.Roles"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6076:42:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Role_$2712_storage",
                                "typeString": "struct FleekAccessControl.Role storage ref"
                              }
                            },
                            {
                              "id": 3134,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3115,
                              "src": "6120:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Role_$2712_storage",
                                "typeString": "struct FleekAccessControl.Role storage ref"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3126,
                            "name": "_revokeRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3255,
                            "src": "6064:11:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$2712_storage_ptr_$_t_address_$returns$__$",
                              "typeString": "function (struct FleekAccessControl.Role storage pointer,address)"
                            }
                          },
                          "id": 3135,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6064:64:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3136,
                        "nodeType": "ExpressionStatement",
                        "src": "6064:64:12"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3138,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3110,
                              "src": "6160:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3139,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3113,
                              "src": "6169:4:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 3140,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3115,
                              "src": "6175:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 3141,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "6184:3:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3142,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "6184:10:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3137,
                            "name": "TokenRoleRevoked",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2686,
                            "src": "6143:16:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_enum$_Roles_$2664_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (uint256,enum FleekAccessControl.Roles,address,address)"
                            }
                          },
                          "id": 3143,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6143:52:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3144,
                        "nodeType": "EmitStatement",
                        "src": "6138:57:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3108,
                    "nodeType": "StructuredDocumentation",
                    "src": "5835:61:12",
                    "text": " @dev Revokes the token role of an address."
                  },
                  "id": 3146,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_revokeTokenRole",
                  "nameLocation": "5910:16:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3116,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3110,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "5935:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3146,
                        "src": "5927:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3109,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5927:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3113,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "5950:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3146,
                        "src": "5944:10:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Roles_$2664",
                          "typeString": "enum FleekAccessControl.Roles"
                        },
                        "typeName": {
                          "id": 3112,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 3111,
                            "name": "Roles",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2664,
                            "src": "5944:5:12"
                          },
                          "referencedDeclaration": 2664,
                          "src": "5944:5:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3115,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "5964:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3146,
                        "src": "5956:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3114,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5956:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5926:46:12"
                  },
                  "returnParameters": {
                    "id": 3117,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5982:0:12"
                  },
                  "scope": 3289,
                  "src": "5901:301:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3181,
                    "nodeType": "Block",
                    "src": "6345:156:12",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3160,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "expression": {
                                "id": 3155,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3150,
                                "src": "6359:4:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                  "typeString": "struct FleekAccessControl.Role storage pointer"
                                }
                              },
                              "id": 3156,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "indexes",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2708,
                              "src": "6359:12:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 3158,
                            "indexExpression": {
                              "id": 3157,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3152,
                              "src": "6372:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6359:21:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 3159,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6384:1:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "6359:26:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3180,
                        "nodeType": "IfStatement",
                        "src": "6355:140:12",
                        "trueBody": {
                          "id": 3179,
                          "nodeType": "Block",
                          "src": "6387:108:12",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 3166,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3152,
                                    "src": "6419:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 3161,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3150,
                                      "src": "6401:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3164,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "members",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2711,
                                    "src": "6401:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                      "typeString": "address[] storage ref"
                                    }
                                  },
                                  "id": 3165,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "push",
                                  "nodeType": "MemberAccess",
                                  "src": "6401:17:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                                    "typeString": "function (address[] storage pointer,address)"
                                  }
                                },
                                "id": 3167,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6401:26:12",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3168,
                              "nodeType": "ExpressionStatement",
                              "src": "6401:26:12"
                            },
                            {
                              "expression": {
                                "id": 3177,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 3169,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3150,
                                      "src": "6441:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3172,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "indexes",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2708,
                                    "src": "6441:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 3173,
                                  "indexExpression": {
                                    "id": 3171,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3152,
                                    "src": "6454:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "6441:21:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "expression": {
                                      "id": 3174,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3150,
                                      "src": "6465:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3175,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "members",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2711,
                                    "src": "6465:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                      "typeString": "address[] storage ref"
                                    }
                                  },
                                  "id": 3176,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "6465:19:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6441:43:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 3178,
                              "nodeType": "ExpressionStatement",
                              "src": "6441:43:12"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3147,
                    "nodeType": "StructuredDocumentation",
                    "src": "6208:67:12",
                    "text": " @dev Grants a certain role to a certain address."
                  },
                  "id": 3182,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_grantRole",
                  "nameLocation": "6289:10:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3153,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3150,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "6313:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3182,
                        "src": "6300:17:12",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                          "typeString": "struct FleekAccessControl.Role"
                        },
                        "typeName": {
                          "id": 3149,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 3148,
                            "name": "Role",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2712,
                            "src": "6300:4:12"
                          },
                          "referencedDeclaration": 2712,
                          "src": "6300:4:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                            "typeString": "struct FleekAccessControl.Role"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3152,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "6327:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3182,
                        "src": "6319:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3151,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6319:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6299:36:12"
                  },
                  "returnParameters": {
                    "id": 3154,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6345:0:12"
                  },
                  "scope": 3289,
                  "src": "6280:221:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3254,
                    "nodeType": "Block",
                    "src": "6648:404:12",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "expression": {
                                "id": 3191,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3186,
                                "src": "6662:4:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                  "typeString": "struct FleekAccessControl.Role storage pointer"
                                }
                              },
                              "id": 3192,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "indexes",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2708,
                              "src": "6662:12:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 3194,
                            "indexExpression": {
                              "id": 3193,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3188,
                              "src": "6675:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6662:21:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 3195,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6687:1:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "6662:26:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3253,
                        "nodeType": "IfStatement",
                        "src": "6658:388:12",
                        "trueBody": {
                          "id": 3252,
                          "nodeType": "Block",
                          "src": "6690:356:12",
                          "statements": [
                            {
                              "assignments": [3198],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 3198,
                                  "mutability": "mutable",
                                  "name": "index",
                                  "nameLocation": "6712:5:12",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3252,
                                  "src": "6704:13:12",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 3197,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6704:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 3205,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3204,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 3199,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3186,
                                      "src": "6720:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3200,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "indexes",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2708,
                                    "src": "6720:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 3202,
                                  "indexExpression": {
                                    "id": 3201,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3188,
                                    "src": "6733:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6720:21:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 3203,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6744:1:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "6720:25:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6704:41:12"
                            },
                            {
                              "assignments": [3207],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 3207,
                                  "mutability": "mutable",
                                  "name": "lastIndex",
                                  "nameLocation": "6767:9:12",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3252,
                                  "src": "6759:17:12",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 3206,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6759:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 3213,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3212,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 3208,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3186,
                                      "src": "6779:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3209,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "members",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2711,
                                    "src": "6779:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                      "typeString": "address[] storage ref"
                                    }
                                  },
                                  "id": 3210,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "6779:19:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 3211,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6801:1:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "6779:23:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6759:43:12"
                            },
                            {
                              "assignments": [3215],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 3215,
                                  "mutability": "mutable",
                                  "name": "lastAccount",
                                  "nameLocation": "6824:11:12",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3252,
                                  "src": "6816:19:12",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "typeName": {
                                    "id": 3214,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6816:7:12",
                                    "stateMutability": "nonpayable",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 3220,
                              "initialValue": {
                                "baseExpression": {
                                  "expression": {
                                    "id": 3216,
                                    "name": "role",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3186,
                                    "src": "6838:4:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                      "typeString": "struct FleekAccessControl.Role storage pointer"
                                    }
                                  },
                                  "id": 3217,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "members",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 2711,
                                  "src": "6838:12:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                    "typeString": "address[] storage ref"
                                  }
                                },
                                "id": 3219,
                                "indexExpression": {
                                  "id": 3218,
                                  "name": "lastIndex",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3207,
                                  "src": "6851:9:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6838:23:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6816:45:12"
                            },
                            {
                              "expression": {
                                "id": 3227,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 3221,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3186,
                                      "src": "6876:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3224,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "members",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2711,
                                    "src": "6876:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                      "typeString": "address[] storage ref"
                                    }
                                  },
                                  "id": 3225,
                                  "indexExpression": {
                                    "id": 3223,
                                    "name": "index",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3198,
                                    "src": "6889:5:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "6876:19:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 3226,
                                  "name": "lastAccount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3215,
                                  "src": "6898:11:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "6876:33:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 3228,
                              "nodeType": "ExpressionStatement",
                              "src": "6876:33:12"
                            },
                            {
                              "expression": {
                                "id": 3237,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 3229,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3186,
                                      "src": "6923:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3232,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "indexes",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2708,
                                    "src": "6923:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 3233,
                                  "indexExpression": {
                                    "id": 3231,
                                    "name": "lastAccount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3215,
                                    "src": "6936:11:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "6923:25:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 3236,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 3234,
                                    "name": "index",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3198,
                                    "src": "6951:5:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "hexValue": "31",
                                    "id": 3235,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "6959:1:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "6951:9:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6923:37:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 3238,
                              "nodeType": "ExpressionStatement",
                              "src": "6923:37:12"
                            },
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "expression": {
                                      "id": 3239,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3186,
                                      "src": "6975:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3242,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "members",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2711,
                                    "src": "6975:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                      "typeString": "address[] storage ref"
                                    }
                                  },
                                  "id": 3243,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pop",
                                  "nodeType": "MemberAccess",
                                  "src": "6975:16:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$",
                                    "typeString": "function (address[] storage pointer)"
                                  }
                                },
                                "id": 3244,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6975:18:12",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3245,
                              "nodeType": "ExpressionStatement",
                              "src": "6975:18:12"
                            },
                            {
                              "expression": {
                                "id": 3250,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "delete",
                                "prefix": true,
                                "src": "7007:28:12",
                                "subExpression": {
                                  "baseExpression": {
                                    "expression": {
                                      "id": 3246,
                                      "name": "role",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3186,
                                      "src": "7014:4:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                                        "typeString": "struct FleekAccessControl.Role storage pointer"
                                      }
                                    },
                                    "id": 3247,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "indexes",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2708,
                                    "src": "7014:12:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 3249,
                                  "indexExpression": {
                                    "id": 3248,
                                    "name": "account",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3188,
                                    "src": "7027:7:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "7014:21:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3251,
                              "nodeType": "ExpressionStatement",
                              "src": "7007:28:12"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3183,
                    "nodeType": "StructuredDocumentation",
                    "src": "6507:70:12",
                    "text": " @dev Revokes a certain role from a certain address."
                  },
                  "id": 3255,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_revokeRole",
                  "nameLocation": "6591:11:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3189,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3186,
                        "mutability": "mutable",
                        "name": "role",
                        "nameLocation": "6616:4:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3255,
                        "src": "6603:17:12",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                          "typeString": "struct FleekAccessControl.Role"
                        },
                        "typeName": {
                          "id": 3185,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 3184,
                            "name": "Role",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 2712,
                            "src": "6603:4:12"
                          },
                          "referencedDeclaration": 2712,
                          "src": "6603:4:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Role_$2712_storage_ptr",
                            "typeString": "struct FleekAccessControl.Role"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3188,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "6630:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3255,
                        "src": "6622:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3187,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6622:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6602:36:12"
                  },
                  "returnParameters": {
                    "id": 3190,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6648:0:12"
                  },
                  "scope": 3289,
                  "src": "6582:470:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3267,
                    "nodeType": "Block",
                    "src": "7234:56:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "baseExpression": {
                                "id": 3261,
                                "name": "_tokenRolesVersion",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2728,
                                "src": "7244:18:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Counter_$1510_storage_$",
                                  "typeString": "mapping(uint256 => struct Counters.Counter storage ref)"
                                }
                              },
                              "id": 3263,
                              "indexExpression": {
                                "id": 3262,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3258,
                                "src": "7263:7:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7244:27:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 3264,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "increment",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1536,
                            "src": "7244:37:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$1510_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer)"
                            }
                          },
                          "id": 3265,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7244:39:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3266,
                        "nodeType": "ExpressionStatement",
                        "src": "7244:39:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3256,
                    "nodeType": "StructuredDocumentation",
                    "src": "7058:116:12",
                    "text": " @dev Clears all token roles for a certain tokenId.\n Should only be used for burning tokens."
                  },
                  "id": 3268,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_clearAllTokenRoles",
                  "nameLocation": "7188:19:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3259,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3258,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "7216:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3268,
                        "src": "7208:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3257,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7208:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7207:17:12"
                  },
                  "returnParameters": {
                    "id": 3260,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7234:0:12"
                  },
                  "scope": 3289,
                  "src": "7179:111:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3287,
                    "nodeType": "Block",
                    "src": "7538:102:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3277,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3271,
                              "src": "7568:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3276,
                            "name": "_clearAllTokenRoles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [3268, 3288],
                            "referencedDeclaration": 3268,
                            "src": "7548:19:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 3278,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7548:28:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3279,
                        "nodeType": "ExpressionStatement",
                        "src": "7548:28:12"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3281,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3271,
                              "src": "7602:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 3282,
                                "name": "Roles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2664,
                                "src": "7611:5:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                                  "typeString": "type(enum FleekAccessControl.Roles)"
                                }
                              },
                              "id": 3283,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "Owner",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2662,
                              "src": "7611:11:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              }
                            },
                            {
                              "id": 3284,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3273,
                              "src": "7624:8:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_Roles_$2664",
                                "typeString": "enum FleekAccessControl.Roles"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3280,
                            "name": "_grantTokenRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3107,
                            "src": "7586:15:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_enum$_Roles_$2664_$_t_address_$returns$__$",
                              "typeString": "function (uint256,enum FleekAccessControl.Roles,address)"
                            }
                          },
                          "id": 3285,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7586:47:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3286,
                        "nodeType": "ExpressionStatement",
                        "src": "7586:47:12"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3269,
                    "nodeType": "StructuredDocumentation",
                    "src": "7296:164:12",
                    "text": " @dev Clears all token roles for a certain tokenId and grants the owner role to a new address.\n Should only be used for transferring tokens."
                  },
                  "id": 3288,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_clearAllTokenRoles",
                  "nameLocation": "7474:19:12",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3274,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3271,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "7502:7:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3288,
                        "src": "7494:15:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3270,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7494:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3273,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "7519:8:12",
                        "nodeType": "VariableDeclaration",
                        "scope": 3288,
                        "src": "7511:16:12",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3272,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7511:7:12",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7493:35:12"
                  },
                  "returnParameters": {
                    "id": 3275,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7538:0:12"
                  },
                  "scope": 3289,
                  "src": "7465:175:12",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 3290,
              "src": "112:7530:12",
              "usedErrors": []
            }
          ],
          "src": "33:7610:12"
        },
        "id": 12
      },
      "contracts/FleekERC721.sol": {
        "ast": {
          "absolutePath": "contracts/FleekERC721.sol",
          "exportedSymbols": {
            "Address": [1435],
            "Base64": [1482],
            "Context": [1504],
            "Counters": [1578],
            "ERC165": [1777],
            "ERC721": [944],
            "FleekAccessControl": [3289],
            "FleekERC721": [4289],
            "FleekSVG": [4338],
            "FleekStrings": [4517],
            "IERC165": [1789],
            "IERC721": [1060],
            "IERC721Metadata": [1105],
            "IERC721Receiver": [1078],
            "Math": [2654],
            "Strings": [1753]
          },
          "id": 4290,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3291,
              "literals": ["solidity", "^", "0.8", ".7"],
              "nodeType": "PragmaDirective",
              "src": "33:23:13"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
              "file": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
              "id": 3292,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4290,
              "sourceUnit": 945,
              "src": "58:57:13",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
              "file": "@openzeppelin/contracts/utils/Counters.sol",
              "id": 3293,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4290,
              "sourceUnit": 1579,
              "src": "116:52:13",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Base64.sol",
              "file": "@openzeppelin/contracts/utils/Base64.sol",
              "id": 3294,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4290,
              "sourceUnit": 1483,
              "src": "169:50:13",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/FleekAccessControl.sol",
              "file": "./FleekAccessControl.sol",
              "id": 3295,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4290,
              "sourceUnit": 3290,
              "src": "220:34:13",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/util/FleekStrings.sol",
              "file": "./util/FleekStrings.sol",
              "id": 3296,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4290,
              "sourceUnit": 4518,
              "src": "255:33:13",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 3297,
                    "name": "ERC721",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 944,
                    "src": "314:6:13"
                  },
                  "id": 3298,
                  "nodeType": "InheritanceSpecifier",
                  "src": "314:6:13"
                },
                {
                  "baseName": {
                    "id": 3299,
                    "name": "FleekAccessControl",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 3289,
                    "src": "322:18:13"
                  },
                  "id": 3300,
                  "nodeType": "InheritanceSpecifier",
                  "src": "322:18:13"
                }
              ],
              "canonicalName": "FleekERC721",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 4289,
              "linearizedBaseContracts": [
                4289, 3289, 944, 1105, 1060, 1777, 1789, 1504
              ],
              "name": "FleekERC721",
              "nameLocation": "299:11:13",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 3304,
                  "libraryName": {
                    "id": 3301,
                    "name": "Counters",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1578,
                    "src": "353:8:13"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "347:36:13",
                  "typeName": {
                    "id": 3303,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3302,
                      "name": "Counters.Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1510,
                      "src": "366:16:13"
                    },
                    "referencedDeclaration": 1510,
                    "src": "366:16:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  }
                },
                {
                  "id": 3308,
                  "libraryName": {
                    "id": 3305,
                    "name": "FleekStrings",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 4517,
                    "src": "394:12:13"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "388:39:13",
                  "typeName": {
                    "id": 3307,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3306,
                      "name": "FleekERC721.App",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3428,
                      "src": "411:15:13"
                    },
                    "referencedDeclaration": 3428,
                    "src": "411:15:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                      "typeString": "struct FleekERC721.App"
                    }
                  }
                },
                {
                  "id": 3312,
                  "libraryName": {
                    "id": 3309,
                    "name": "FleekStrings",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 4517,
                    "src": "438:12:13"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "432:47:13",
                  "typeName": {
                    "id": 3311,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3310,
                      "name": "FleekERC721.AccessPoint",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3446,
                      "src": "455:23:13"
                    },
                    "referencedDeclaration": 3446,
                    "src": "455:23:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                      "typeString": "struct FleekERC721.AccessPoint"
                    }
                  }
                },
                {
                  "id": 3315,
                  "libraryName": {
                    "id": 3313,
                    "name": "FleekStrings",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 4517,
                    "src": "490:12:13"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "484:30:13",
                  "typeName": {
                    "id": 3314,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "507:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  }
                },
                {
                  "anonymous": false,
                  "id": 3323,
                  "name": "NewBuild",
                  "nameLocation": "526:8:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3322,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3317,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "551:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3323,
                        "src": "535:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3316,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "535:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3319,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "commitHash",
                        "nameLocation": "573:10:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3323,
                        "src": "558:25:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3318,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "558:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3321,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "601:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3323,
                        "src": "585:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3320,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "585:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "534:79:13"
                  },
                  "src": "520:94:13"
                },
                {
                  "anonymous": false,
                  "id": 3331,
                  "name": "NewTokenName",
                  "nameLocation": "625:12:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3330,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3325,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "654:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3331,
                        "src": "638:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3324,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "638:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3327,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "name",
                        "nameLocation": "676:4:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3331,
                        "src": "661:19:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3326,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "661:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3329,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "698:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3331,
                        "src": "682:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3328,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "682:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "637:73:13"
                  },
                  "src": "619:92:13"
                },
                {
                  "anonymous": false,
                  "id": 3339,
                  "name": "NewTokenDescription",
                  "nameLocation": "722:19:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3338,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3333,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "758:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3339,
                        "src": "742:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3332,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "742:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3335,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "description",
                        "nameLocation": "780:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3339,
                        "src": "765:26:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3334,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "765:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3337,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "809:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3339,
                        "src": "793:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3336,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "793:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "741:80:13"
                  },
                  "src": "716:106:13"
                },
                {
                  "anonymous": false,
                  "id": 3347,
                  "name": "NewTokenImage",
                  "nameLocation": "833:13:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3346,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3341,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "863:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3347,
                        "src": "847:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3340,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "847:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3343,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "image",
                        "nameLocation": "885:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3347,
                        "src": "870:20:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3342,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "870:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3345,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "908:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3347,
                        "src": "892:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3344,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "892:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "846:74:13"
                  },
                  "src": "827:94:13"
                },
                {
                  "anonymous": false,
                  "id": 3355,
                  "name": "NewTokenExternalURL",
                  "nameLocation": "932:19:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3354,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3349,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "968:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3355,
                        "src": "952:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3348,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "952:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3351,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "externalURL",
                        "nameLocation": "990:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3355,
                        "src": "975:26:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3350,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "975:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3353,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "1019:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3355,
                        "src": "1003:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3352,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1003:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "951:80:13"
                  },
                  "src": "926:106:13"
                },
                {
                  "anonymous": false,
                  "id": 3363,
                  "name": "NewTokenENS",
                  "nameLocation": "1043:11:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3362,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3357,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "1071:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3363,
                        "src": "1055:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3356,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1055:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3359,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "ENS",
                        "nameLocation": "1093:3:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3363,
                        "src": "1078:18:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3358,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1078:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3361,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "1114:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3363,
                        "src": "1098:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3360,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1098:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1054:72:13"
                  },
                  "src": "1037:90:13"
                },
                {
                  "anonymous": false,
                  "id": 3371,
                  "name": "NewAccessPoint",
                  "nameLocation": "1139:14:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3370,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3365,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "1169:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3371,
                        "src": "1154:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3364,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1154:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3367,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1193:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3371,
                        "src": "1177:23:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3366,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1177:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3369,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1218:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3371,
                        "src": "1202:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3368,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1202:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1153:71:13"
                  },
                  "src": "1133:92:13"
                },
                {
                  "anonymous": false,
                  "id": 3379,
                  "name": "RemoveAccessPoint",
                  "nameLocation": "1236:17:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3378,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3373,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "1269:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3379,
                        "src": "1254:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3372,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1254:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3375,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1293:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3379,
                        "src": "1277:23:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3374,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1277:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3377,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1318:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3379,
                        "src": "1302:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3376,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1302:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1253:71:13"
                  },
                  "src": "1230:95:13"
                },
                {
                  "anonymous": false,
                  "id": 3389,
                  "name": "ChangeAccessPointScore",
                  "nameLocation": "1336:22:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3388,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3381,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "1383:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3389,
                        "src": "1368:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3380,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1368:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3383,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1415:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3389,
                        "src": "1399:23:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3382,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1399:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3385,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "score",
                        "nameLocation": "1440:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3389,
                        "src": "1432:13:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3384,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1432:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3387,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "1471:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3389,
                        "src": "1455:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3386,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1455:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1358:130:13"
                  },
                  "src": "1330:159:13"
                },
                {
                  "anonymous": false,
                  "id": 3399,
                  "name": "ChangeAccessPointNameVerify",
                  "nameLocation": "1500:27:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3398,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3391,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "1552:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3399,
                        "src": "1537:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3390,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1537:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3393,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1576:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3399,
                        "src": "1568:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3392,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1568:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3395,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "verified",
                        "nameLocation": "1606:8:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3399,
                        "src": "1593:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3394,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1593:4:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3397,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "1640:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3399,
                        "src": "1624:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3396,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1624:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1527:130:13"
                  },
                  "src": "1494:164:13"
                },
                {
                  "anonymous": false,
                  "id": 3409,
                  "name": "ChangeAccessPointContentVerify",
                  "nameLocation": "1669:30:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3408,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3401,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "1724:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3409,
                        "src": "1709:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3400,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1709:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3403,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1748:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3409,
                        "src": "1740:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3402,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1740:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3405,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "verified",
                        "nameLocation": "1778:8:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3409,
                        "src": "1765:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3404,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1765:4:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3407,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "triggeredBy",
                        "nameLocation": "1812:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3409,
                        "src": "1796:27:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3406,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1796:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1699:130:13"
                  },
                  "src": "1663:167:13"
                },
                {
                  "canonicalName": "FleekERC721.App",
                  "id": 3428,
                  "members": [
                    {
                      "constant": false,
                      "id": 3411,
                      "mutability": "mutable",
                      "name": "name",
                      "nameLocation": "2063:4:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3428,
                      "src": "2056:11:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3410,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2056:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3413,
                      "mutability": "mutable",
                      "name": "description",
                      "nameLocation": "2104:11:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3428,
                      "src": "2097:18:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3412,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2097:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3415,
                      "mutability": "mutable",
                      "name": "externalURL",
                      "nameLocation": "2162:11:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3428,
                      "src": "2155:18:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3414,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2155:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3417,
                      "mutability": "mutable",
                      "name": "ENS",
                      "nameLocation": "2202:3:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3428,
                      "src": "2195:10:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3416,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2195:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3419,
                      "mutability": "mutable",
                      "name": "currentBuild",
                      "nameLocation": "2233:12:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3428,
                      "src": "2225:20:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3418,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2225:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3424,
                      "mutability": "mutable",
                      "name": "builds",
                      "nameLocation": "2362:6:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3428,
                      "src": "2336:32:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Build_$3433_storage_$",
                        "typeString": "mapping(uint256 => struct FleekERC721.Build)"
                      },
                      "typeName": {
                        "id": 3423,
                        "keyType": {
                          "id": 3420,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2344:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "2336:25:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Build_$3433_storage_$",
                          "typeString": "mapping(uint256 => struct FleekERC721.Build)"
                        },
                        "valueType": {
                          "id": 3422,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 3421,
                            "name": "Build",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 3433,
                            "src": "2355:5:13"
                          },
                          "referencedDeclaration": 3433,
                          "src": "2355:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Build_$3433_storage_ptr",
                            "typeString": "struct FleekERC721.Build"
                          }
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3427,
                      "mutability": "mutable",
                      "name": "accessPoints",
                      "nameLocation": "2437:12:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3428,
                      "src": "2428:21:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                        "typeString": "string[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 3425,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2428:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "id": 3426,
                        "nodeType": "ArrayTypeName",
                        "src": "2428:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                          "typeString": "string[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "App",
                  "nameLocation": "2042:3:13",
                  "nodeType": "StructDefinition",
                  "scope": 4289,
                  "src": "2035:448:13",
                  "visibility": "public"
                },
                {
                  "canonicalName": "FleekERC721.Build",
                  "id": 3433,
                  "members": [
                    {
                      "constant": false,
                      "id": 3430,
                      "mutability": "mutable",
                      "name": "commitHash",
                      "nameLocation": "2586:10:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3433,
                      "src": "2579:17:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3429,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2579:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3432,
                      "mutability": "mutable",
                      "name": "gitRepository",
                      "nameLocation": "2613:13:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3433,
                      "src": "2606:20:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3431,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2606:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Build",
                  "nameLocation": "2563:5:13",
                  "nodeType": "StructDefinition",
                  "scope": 4289,
                  "src": "2556:77:13",
                  "visibility": "public"
                },
                {
                  "canonicalName": "FleekERC721.AccessPoint",
                  "id": 3446,
                  "members": [
                    {
                      "constant": false,
                      "id": 3435,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "2737:7:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3446,
                      "src": "2729:15:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3434,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2729:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3437,
                      "mutability": "mutable",
                      "name": "index",
                      "nameLocation": "2762:5:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3446,
                      "src": "2754:13:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3436,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2754:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3439,
                      "mutability": "mutable",
                      "name": "score",
                      "nameLocation": "2785:5:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3446,
                      "src": "2777:13:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3438,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2777:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3441,
                      "mutability": "mutable",
                      "name": "contentVerified",
                      "nameLocation": "2805:15:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3446,
                      "src": "2800:20:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 3440,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2800:4:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3443,
                      "mutability": "mutable",
                      "name": "nameVerified",
                      "nameLocation": "2835:12:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3446,
                      "src": "2830:17:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 3442,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2830:4:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3445,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "2865:5:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 3446,
                      "src": "2857:13:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3444,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2857:7:13",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "AccessPoint",
                  "nameLocation": "2707:11:13",
                  "nodeType": "StructDefinition",
                  "scope": 4289,
                  "src": "2700:177:13",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 3449,
                  "mutability": "mutable",
                  "name": "_appIds",
                  "nameLocation": "2908:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4289,
                  "src": "2883:32:13",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$1510_storage",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 3448,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3447,
                      "name": "Counters.Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1510,
                      "src": "2883:16:13"
                    },
                    "referencedDeclaration": 1510,
                    "src": "2883:16:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1510_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 3454,
                  "mutability": "mutable",
                  "name": "_apps",
                  "nameLocation": "2953:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4289,
                  "src": "2921:37:13",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                    "typeString": "mapping(uint256 => struct FleekERC721.App)"
                  },
                  "typeName": {
                    "id": 3453,
                    "keyType": {
                      "id": 3450,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2929:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2921:23:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                      "typeString": "mapping(uint256 => struct FleekERC721.App)"
                    },
                    "valueType": {
                      "id": 3452,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3451,
                        "name": "App",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3428,
                        "src": "2940:3:13"
                      },
                      "referencedDeclaration": 3428,
                      "src": "2940:3:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                        "typeString": "struct FleekERC721.App"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 3459,
                  "mutability": "mutable",
                  "name": "_accessPoints",
                  "nameLocation": "3003:13:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 4289,
                  "src": "2964:52:13",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                    "typeString": "mapping(string => struct FleekERC721.AccessPoint)"
                  },
                  "typeName": {
                    "id": 3458,
                    "keyType": {
                      "id": 3455,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "2972:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "2964:30:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                      "typeString": "mapping(string => struct FleekERC721.AccessPoint)"
                    },
                    "valueType": {
                      "id": 3457,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3456,
                        "name": "AccessPoint",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3446,
                        "src": "2982:11:13"
                      },
                      "referencedDeclaration": 3446,
                      "src": "2982:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                        "typeString": "struct FleekERC721.AccessPoint"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 3471,
                    "nodeType": "Block",
                    "src": "3215:2:13",
                    "statements": []
                  },
                  "documentation": {
                    "id": 3460,
                    "nodeType": "StructuredDocumentation",
                    "src": "3023:108:13",
                    "text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
                  },
                  "id": 3472,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 3467,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3462,
                          "src": "3199:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "id": 3468,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3464,
                          "src": "3206:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 3469,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 3466,
                        "name": "ERC721",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 944,
                        "src": "3192:6:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3192:22:13"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3465,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3462,
                        "mutability": "mutable",
                        "name": "_name",
                        "nameLocation": "3162:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3472,
                        "src": "3148:19:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3461,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3148:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3464,
                        "mutability": "mutable",
                        "name": "_symbol",
                        "nameLocation": "3183:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3472,
                        "src": "3169:21:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3463,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3169:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3147:44:13"
                  },
                  "returnParameters": {
                    "id": 3470,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3215:0:13"
                  },
                  "scope": 4289,
                  "src": "3136:81:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3491,
                    "nodeType": "Block",
                    "src": "3326:105:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3486,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 3478,
                                    "name": "_accessPoints",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3459,
                                    "src": "3344:13:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                      "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                    }
                                  },
                                  "id": 3480,
                                  "indexExpression": {
                                    "id": 3479,
                                    "name": "apName",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3475,
                                    "src": "3358:6:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "3344:21:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                    "typeString": "struct FleekERC721.AccessPoint storage ref"
                                  }
                                },
                                "id": 3481,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "owner",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3445,
                                "src": "3344:27:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 3484,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3383:1:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3483,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3375:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3482,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3375:7:13",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3485,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3375:10:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "3344:41:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "466c65656b4552433732313a20696e76616c6964204150",
                              "id": 3487,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3387:25:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6fe05ede69d6d3e6fce82ad2fc1eb40cc6df52699c5c54062515fb2b7fc66790",
                                "typeString": "literal_string \"FleekERC721: invalid AP\""
                              },
                              "value": "FleekERC721: invalid AP"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6fe05ede69d6d3e6fce82ad2fc1eb40cc6df52699c5c54062515fb2b7fc66790",
                                "typeString": "literal_string \"FleekERC721: invalid AP\""
                              }
                            ],
                            "id": 3477,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "3336:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3488,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3336:77:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3489,
                        "nodeType": "ExpressionStatement",
                        "src": "3336:77:13"
                      },
                      {
                        "id": 3490,
                        "nodeType": "PlaceholderStatement",
                        "src": "3423:1:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3473,
                    "nodeType": "StructuredDocumentation",
                    "src": "3223:57:13",
                    "text": " @dev Checks if the AccessPoint exists."
                  },
                  "id": 3492,
                  "name": "requireAP",
                  "nameLocation": "3294:9:13",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 3476,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3475,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "3318:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3492,
                        "src": "3304:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3474,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3304:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3303:22:13"
                  },
                  "src": "3285:146:13",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3592,
                    "nodeType": "Block",
                    "src": "4031:599:13",
                    "statements": [
                      {
                        "assignments": [3517],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3517,
                            "mutability": "mutable",
                            "name": "tokenId",
                            "nameLocation": "4049:7:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 3592,
                            "src": "4041:15:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3516,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4041:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3521,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 3518,
                              "name": "_appIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3449,
                              "src": "4059:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 3519,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "current",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "4059:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1510_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 3520,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4059:17:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4041:35:13"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3523,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3495,
                              "src": "4092:2:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3524,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3517,
                              "src": "4096:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3522,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 600,
                            "src": "4086:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 3525,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4086:18:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3526,
                        "nodeType": "ExpressionStatement",
                        "src": "4086:18:13"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 3527,
                              "name": "_appIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3449,
                              "src": "4114:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Counter_$1510_storage",
                                "typeString": "struct Counters.Counter storage ref"
                              }
                            },
                            "id": 3529,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "increment",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1536,
                            "src": "4114:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$1510_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1510_storage_ptr_$",
                              "typeString": "function (struct Counters.Counter storage pointer)"
                            }
                          },
                          "id": 3530,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4114:19:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3531,
                        "nodeType": "ExpressionStatement",
                        "src": "4114:19:13"
                      },
                      {
                        "assignments": [3534],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3534,
                            "mutability": "mutable",
                            "name": "app",
                            "nameLocation": "4156:3:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 3592,
                            "src": "4144:15:13",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                              "typeString": "struct FleekERC721.App"
                            },
                            "typeName": {
                              "id": 3533,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3532,
                                "name": "App",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 3428,
                                "src": "4144:3:13"
                              },
                              "referencedDeclaration": 3428,
                              "src": "4144:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3538,
                        "initialValue": {
                          "baseExpression": {
                            "id": 3535,
                            "name": "_apps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3454,
                            "src": "4162:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                              "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                            }
                          },
                          "id": 3537,
                          "indexExpression": {
                            "id": 3536,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3517,
                            "src": "4168:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4162:14:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_App_$3428_storage",
                            "typeString": "struct FleekERC721.App storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4144:32:13"
                      },
                      {
                        "expression": {
                          "id": 3543,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 3539,
                              "name": "app",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3534,
                              "src": "4186:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App storage pointer"
                              }
                            },
                            "id": 3541,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "name",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3411,
                            "src": "4186:8:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3542,
                            "name": "name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3497,
                            "src": "4197:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "4186:15:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3544,
                        "nodeType": "ExpressionStatement",
                        "src": "4186:15:13"
                      },
                      {
                        "expression": {
                          "id": 3549,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 3545,
                              "name": "app",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3534,
                              "src": "4211:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App storage pointer"
                              }
                            },
                            "id": 3547,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "description",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3413,
                            "src": "4211:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3548,
                            "name": "description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3499,
                            "src": "4229:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "4211:29:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3550,
                        "nodeType": "ExpressionStatement",
                        "src": "4211:29:13"
                      },
                      {
                        "expression": {
                          "id": 3555,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 3551,
                              "name": "app",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3534,
                              "src": "4250:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App storage pointer"
                              }
                            },
                            "id": 3553,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "externalURL",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3415,
                            "src": "4250:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3554,
                            "name": "externalURL",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3501,
                            "src": "4268:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "4250:29:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3556,
                        "nodeType": "ExpressionStatement",
                        "src": "4250:29:13"
                      },
                      {
                        "expression": {
                          "id": 3561,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 3557,
                              "name": "app",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3534,
                              "src": "4289:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App storage pointer"
                              }
                            },
                            "id": 3559,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "ENS",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3417,
                            "src": "4289:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3560,
                            "name": "ENS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3503,
                            "src": "4299:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "4289:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3562,
                        "nodeType": "ExpressionStatement",
                        "src": "4289:13:13"
                      },
                      {
                        "expression": {
                          "id": 3567,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 3563,
                              "name": "app",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3534,
                              "src": "4476:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App storage pointer"
                              }
                            },
                            "id": 3565,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "currentBuild",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3419,
                            "src": "4476:16:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 3566,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4495:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4476:20:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3568,
                        "nodeType": "ExpressionStatement",
                        "src": "4476:20:13"
                      },
                      {
                        "expression": {
                          "id": 3578,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 3569,
                                "name": "app",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3534,
                                "src": "4506:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                  "typeString": "struct FleekERC721.App storage pointer"
                                }
                              },
                              "id": 3572,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "builds",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3424,
                              "src": "4506:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Build_$3433_storage_$",
                                "typeString": "mapping(uint256 => struct FleekERC721.Build storage ref)"
                              }
                            },
                            "id": 3573,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 3571,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4517:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4506:13:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Build_$3433_storage",
                              "typeString": "struct FleekERC721.Build storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 3575,
                                "name": "commitHash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3505,
                                "src": "4528:10:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              {
                                "id": 3576,
                                "name": "gitRepository",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3507,
                                "src": "4540:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                },
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "id": 3574,
                              "name": "Build",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3433,
                              "src": "4522:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Build_$3433_storage_ptr_$",
                                "typeString": "type(struct FleekERC721.Build storage pointer)"
                              }
                            },
                            "id": 3577,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4522:32:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Build_$3433_memory_ptr",
                              "typeString": "struct FleekERC721.Build memory"
                            }
                          },
                          "src": "4506:48:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Build_$3433_storage",
                            "typeString": "struct FleekERC721.Build storage ref"
                          }
                        },
                        "id": 3579,
                        "nodeType": "ExpressionStatement",
                        "src": "4506:48:13"
                      },
                      {
                        "expression": {
                          "id": 3588,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 3580,
                              "name": "app",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3534,
                              "src": "4564:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App storage pointer"
                              }
                            },
                            "id": 3582,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "accessPoints",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3427,
                            "src": "4564:16:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                              "typeString": "string storage ref[] storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 3586,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4596:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 3585,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "4583:12:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 3583,
                                  "name": "string",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4587:6:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage_ptr",
                                    "typeString": "string"
                                  }
                                },
                                "id": 3584,
                                "nodeType": "ArrayTypeName",
                                "src": "4587:8:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                                  "typeString": "string[]"
                                }
                              }
                            },
                            "id": 3587,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4583:15:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "src": "4564:34:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                            "typeString": "string storage ref[] storage ref"
                          }
                        },
                        "id": 3589,
                        "nodeType": "ExpressionStatement",
                        "src": "4564:34:13"
                      },
                      {
                        "expression": {
                          "id": 3590,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3517,
                          "src": "4616:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3515,
                        "id": 3591,
                        "nodeType": "Return",
                        "src": "4609:14:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3493,
                    "nodeType": "StructuredDocumentation",
                    "src": "3437:285:13",
                    "text": " @dev Mints a token and returns a tokenId.\n If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event.\n Requirements:\n - the caller must have ``collectionOwner``'s admin role."
                  },
                  "functionSelector": "aba81125",
                  "id": 3593,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 3510,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "4000:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 3511,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2662,
                          "src": "4000:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 3512,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3509,
                        "name": "requireCollectionRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2774,
                        "src": "3978:21:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3978:34:13"
                    }
                  ],
                  "name": "mint",
                  "nameLocation": "3736:4:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3508,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3495,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3758:2:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3593,
                        "src": "3750:10:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3494,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3750:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3497,
                        "mutability": "mutable",
                        "name": "name",
                        "nameLocation": "3784:4:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3593,
                        "src": "3770:18:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3496,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3770:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3499,
                        "mutability": "mutable",
                        "name": "description",
                        "nameLocation": "3812:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3593,
                        "src": "3798:25:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3498,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3798:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3501,
                        "mutability": "mutable",
                        "name": "externalURL",
                        "nameLocation": "3847:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3593,
                        "src": "3833:25:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3500,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3833:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3503,
                        "mutability": "mutable",
                        "name": "ENS",
                        "nameLocation": "3882:3:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3593,
                        "src": "3868:17:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3502,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3868:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3505,
                        "mutability": "mutable",
                        "name": "commitHash",
                        "nameLocation": "3909:10:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3593,
                        "src": "3895:24:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3504,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3895:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3507,
                        "mutability": "mutable",
                        "name": "gitRepository",
                        "nameLocation": "3943:13:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3593,
                        "src": "3929:27:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3506,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3929:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3740:222:13"
                  },
                  "returnParameters": {
                    "id": 3515,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3514,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3593,
                        "src": "4022:7:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3513,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4022:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4021:9:13"
                  },
                  "scope": 4289,
                  "src": "3727:903:13",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [204],
                  "body": {
                    "id": 3634,
                    "nodeType": "Block",
                    "src": "4964:210:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3603,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3596,
                              "src": "4989:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3602,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "4974:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 3604,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4974:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3605,
                        "nodeType": "ExpressionStatement",
                        "src": "4974:23:13"
                      },
                      {
                        "assignments": [3607],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3607,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "5015:5:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 3634,
                            "src": "5007:13:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 3606,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5007:7:13",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3611,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 3609,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3596,
                              "src": "5031:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3608,
                            "name": "ownerOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 145,
                            "src": "5023:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 3610,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5023:16:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5007:32:13"
                      },
                      {
                        "assignments": [3614],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3614,
                            "mutability": "mutable",
                            "name": "app",
                            "nameLocation": "5061:3:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 3634,
                            "src": "5049:15:13",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                              "typeString": "struct FleekERC721.App"
                            },
                            "typeName": {
                              "id": 3613,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3612,
                                "name": "App",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 3428,
                                "src": "5049:3:13"
                              },
                              "referencedDeclaration": 3428,
                              "src": "5049:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3618,
                        "initialValue": {
                          "baseExpression": {
                            "id": 3615,
                            "name": "_apps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3454,
                            "src": "5067:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                              "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                            }
                          },
                          "id": 3617,
                          "indexExpression": {
                            "id": 3616,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3596,
                            "src": "5073:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5067:14:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_App_$3428_storage",
                            "typeString": "struct FleekERC721.App storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5049:32:13"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 3623,
                                    "name": "_baseURI",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [3731],
                                    "referencedDeclaration": 3731,
                                    "src": "5123:8:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                                      "typeString": "function () view returns (string memory)"
                                    }
                                  },
                                  "id": 3624,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5123:10:13",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 3627,
                                          "name": "owner",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 3607,
                                          "src": "5148:5:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "expression": {
                                          "id": 3625,
                                          "name": "app",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 3614,
                                          "src": "5135:3:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                            "typeString": "struct FleekERC721.App storage pointer"
                                          }
                                        },
                                        "id": 3626,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "toString",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 4463,
                                        "src": "5135:12:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$_t_struct$_App_$3428_storage_ptr_$_t_address_$returns$_t_string_memory_ptr_$bound_to$_t_struct$_App_$3428_storage_ptr_$",
                                          "typeString": "function (struct FleekERC721.App storage pointer,address) view returns (string memory)"
                                        }
                                      },
                                      "id": 3628,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "5135:19:13",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    },
                                    "id": 3629,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toBase64",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 4384,
                                    "src": "5135:28:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_string_memory_ptr_$",
                                      "typeString": "function (string memory) pure returns (string memory)"
                                    }
                                  },
                                  "id": 3630,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5135:30:13",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 3621,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "5106:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 3622,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "5106:16:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 3631,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5106:60:13",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 3620,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5099:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 3619,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5099:6:13",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 3632,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5099:68:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 3601,
                        "id": 3633,
                        "nodeType": "Return",
                        "src": "5092:75:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3594,
                    "nodeType": "StructuredDocumentation",
                    "src": "4636:235:13",
                    "text": " @dev Returns the token metadata associated with the `tokenId`.\n Returns a based64 encoded string value of the URI.\n Requirements:\n - the tokenId must be minted and valid."
                  },
                  "functionSelector": "c87b56dd",
                  "id": 3635,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tokenURI",
                  "nameLocation": "4885:8:13",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 3598,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "4931:8:13"
                  },
                  "parameters": {
                    "id": 3597,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3596,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4902:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3635,
                        "src": "4894:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3595,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4894:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4893:17:13"
                  },
                  "returnParameters": {
                    "id": 3601,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3600,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3635,
                        "src": "4949:13:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3599,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "4949:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4948:15:13"
                  },
                  "scope": 4289,
                  "src": "4876:298:13",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [93],
                  "body": {
                    "id": 3650,
                    "nodeType": "Block",
                    "src": "5340:60:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3647,
                              "name": "interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3638,
                              "src": "5381:11:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            ],
                            "expression": {
                              "id": 3645,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -25,
                              "src": "5357:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_FleekERC721_$4289_$",
                                "typeString": "type(contract super FleekERC721)"
                              }
                            },
                            "id": 3646,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "supportsInterface",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 93,
                            "src": "5357:23:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                              "typeString": "function (bytes4) view returns (bool)"
                            }
                          },
                          "id": 3648,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5357:36:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 3644,
                        "id": 3649,
                        "nodeType": "Return",
                        "src": "5350:43:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3636,
                    "nodeType": "StructuredDocumentation",
                    "src": "5180:56:13",
                    "text": " @dev See {IERC165-supportsInterface}."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 3651,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "5250:17:13",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 3641,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [
                      {
                        "id": 3640,
                        "name": "ERC721",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 944,
                        "src": "5317:6:13"
                      }
                    ],
                    "src": "5308:16:13"
                  },
                  "parameters": {
                    "id": 3639,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3638,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "5275:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3651,
                        "src": "5268:18:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "typeName": {
                          "id": 3637,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "5268:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5267:20:13"
                  },
                  "returnParameters": {
                    "id": 3644,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3643,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3651,
                        "src": "5334:4:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3642,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5334:4:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5333:6:13"
                  },
                  "scope": 4289,
                  "src": "5241:159:13",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [930],
                  "body": {
                    "id": 3720,
                    "nodeType": "Block",
                    "src": "5721:424:13",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 3676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 3669,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 3664,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3654,
                              "src": "5735:4:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 3667,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5751:1:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 3666,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5743:7:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3665,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5743:7:13",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3668,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5743:10:13",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "5735:18:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 3675,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 3670,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3656,
                              "src": "5757:2:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 3673,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5771:1:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 3672,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5763:7:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3671,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5763:7:13",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3674,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5763:10:13",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "5757:16:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "5735:38:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 3688,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 3683,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3654,
                              "src": "5866:4:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 3686,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5882:1:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 3685,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5874:7:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3684,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5874:7:13",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3687,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5874:10:13",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "5866:18:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3702,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3697,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3656,
                                "src": "5982:2:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 3700,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5996:1:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3699,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5988:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3698,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5988:7:13",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3701,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5988:10:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "5982:16:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 3708,
                            "nodeType": "IfStatement",
                            "src": "5978:95:13",
                            "trueBody": {
                              "id": 3707,
                              "nodeType": "Block",
                              "src": "6000:73:13",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 3704,
                                        "name": "tokenId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3658,
                                        "src": "6054:7:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 3703,
                                      "name": "_clearAllTokenRoles",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [3268, 3288],
                                      "referencedDeclaration": 3268,
                                      "src": "6034:19:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                                        "typeString": "function (uint256)"
                                      }
                                    },
                                    "id": 3705,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6034:28:13",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 3706,
                                  "nodeType": "ExpressionStatement",
                                  "src": "6034:28:13"
                                }
                              ]
                            }
                          },
                          "id": 3709,
                          "nodeType": "IfStatement",
                          "src": "5862:211:13",
                          "trueBody": {
                            "id": 3696,
                            "nodeType": "Block",
                            "src": "5886:86:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 3690,
                                      "name": "tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3658,
                                      "src": "5936:7:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "expression": {
                                        "id": 3691,
                                        "name": "Roles",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2664,
                                        "src": "5945:5:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                                          "typeString": "type(enum FleekAccessControl.Roles)"
                                        }
                                      },
                                      "id": 3692,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "Owner",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 2662,
                                      "src": "5945:11:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Roles_$2664",
                                        "typeString": "enum FleekAccessControl.Roles"
                                      }
                                    },
                                    {
                                      "id": 3693,
                                      "name": "to",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3656,
                                      "src": "5958:2:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_enum$_Roles_$2664",
                                        "typeString": "enum FleekAccessControl.Roles"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 3689,
                                    "name": "_grantTokenRole",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3107,
                                    "src": "5920:15:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_enum$_Roles_$2664_$_t_address_$returns$__$",
                                      "typeString": "function (uint256,enum FleekAccessControl.Roles,address)"
                                    }
                                  },
                                  "id": 3694,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5920:41:13",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 3695,
                                "nodeType": "ExpressionStatement",
                                "src": "5920:41:13"
                              }
                            ]
                          }
                        },
                        "id": 3710,
                        "nodeType": "IfStatement",
                        "src": "5731:342:13",
                        "trueBody": {
                          "id": 3682,
                          "nodeType": "Block",
                          "src": "5775:81:13",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 3678,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3658,
                                    "src": "5833:7:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 3679,
                                    "name": "to",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3656,
                                    "src": "5842:2:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 3677,
                                  "name": "_clearAllTokenRoles",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [3268, 3288],
                                  "referencedDeclaration": 3288,
                                  "src": "5813:19:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
                                    "typeString": "function (uint256,address)"
                                  }
                                },
                                "id": 3680,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5813:32:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3681,
                              "nodeType": "ExpressionStatement",
                              "src": "5813:32:13"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3714,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3654,
                              "src": "6109:4:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3715,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3656,
                              "src": "6115:2:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3716,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3658,
                              "src": "6119:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3717,
                              "name": "batchSize",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3660,
                              "src": "6128:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 3711,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -25,
                              "src": "6082:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_FleekERC721_$4289_$",
                                "typeString": "type(contract super FleekERC721)"
                              }
                            },
                            "id": 3713,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "_beforeTokenTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 930,
                            "src": "6082:26:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 3718,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6082:56:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3719,
                        "nodeType": "ExpressionStatement",
                        "src": "6082:56:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3652,
                    "nodeType": "StructuredDocumentation",
                    "src": "5406:154:13",
                    "text": " @dev Override of _beforeTokenTransfer of ERC721.\n Here it needs to update the token controller roles for mint, burn and transfer."
                  },
                  "id": 3721,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_beforeTokenTransfer",
                  "nameLocation": "5574:20:13",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 3662,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "5712:8:13"
                  },
                  "parameters": {
                    "id": 3661,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3654,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5612:4:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3721,
                        "src": "5604:12:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3653,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5604:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3656,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5634:2:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3721,
                        "src": "5626:10:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3655,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5626:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3658,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "5654:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3721,
                        "src": "5646:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3657,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5646:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3660,
                        "mutability": "mutable",
                        "name": "batchSize",
                        "nameLocation": "5679:9:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3721,
                        "src": "5671:17:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3659,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5671:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5594:100:13"
                  },
                  "returnParameters": {
                    "id": 3663,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5721:0:13"
                  },
                  "scope": 4289,
                  "src": "5565:580:13",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [213],
                  "body": {
                    "id": 3730,
                    "nodeType": "Block",
                    "src": "6338:55:13",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c",
                          "id": 3728,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6355:31:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa",
                            "typeString": "literal_string \"data:application/json;base64,\""
                          },
                          "value": "data:application/json;base64,"
                        },
                        "functionReturnParameters": 3727,
                        "id": 3729,
                        "nodeType": "Return",
                        "src": "6348:38:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3722,
                    "nodeType": "StructuredDocumentation",
                    "src": "6151:107:13",
                    "text": " @dev A baseURI internal function implementation to be called in the `tokenURI` function."
                  },
                  "id": 3731,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_baseURI",
                  "nameLocation": "6272:8:13",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 3724,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "6305:8:13"
                  },
                  "parameters": {
                    "id": 3723,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6280:2:13"
                  },
                  "returnParameters": {
                    "id": 3727,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3726,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3731,
                        "src": "6323:13:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3725,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6323:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6322:15:13"
                  },
                  "scope": 4289,
                  "src": "6263:130:13",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3762,
                    "nodeType": "Block",
                    "src": "6852:170:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3745,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3734,
                              "src": "6877:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3744,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "6862:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 3746,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6862:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3747,
                        "nodeType": "ExpressionStatement",
                        "src": "6862:23:13"
                      },
                      {
                        "expression": {
                          "id": 3753,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 3748,
                                "name": "_apps",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3454,
                                "src": "6895:5:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                  "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                }
                              },
                              "id": 3750,
                              "indexExpression": {
                                "id": 3749,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3734,
                                "src": "6901:7:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6895:14:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage",
                                "typeString": "struct FleekERC721.App storage ref"
                              }
                            },
                            "id": 3751,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "externalURL",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3415,
                            "src": "6895:26:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3752,
                            "name": "_tokenExternalURL",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3736,
                            "src": "6924:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "6895:46:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3754,
                        "nodeType": "ExpressionStatement",
                        "src": "6895:46:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3756,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3734,
                              "src": "6976:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3757,
                              "name": "_tokenExternalURL",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3736,
                              "src": "6985:17:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 3758,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "7004:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3759,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7004:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3755,
                            "name": "NewTokenExternalURL",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3355,
                            "src": "6956:19:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$__$",
                              "typeString": "function (uint256,string memory,address)"
                            }
                          },
                          "id": 3760,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6956:59:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3761,
                        "nodeType": "EmitStatement",
                        "src": "6951:64:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3732,
                    "nodeType": "StructuredDocumentation",
                    "src": "6399:288:13",
                    "text": " @dev Updates the `externalURL` metadata field of a minted `tokenId`.\n May emit a {NewTokenExternalURL} event.\n Requirements:\n - the tokenId must be minted and valid.\n - the sender must have the `tokenController` role."
                  },
                  "functionSelector": "f9315177",
                  "id": 3763,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 3739,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3734,
                          "src": "6825:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 3740,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "6834:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 3741,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Controller",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2663,
                          "src": "6834:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 3742,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3738,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "6808:16:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "6808:43:13"
                    }
                  ],
                  "name": "setTokenExternalURL",
                  "nameLocation": "6701:19:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3737,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3734,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "6738:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3763,
                        "src": "6730:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3733,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6730:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3736,
                        "mutability": "mutable",
                        "name": "_tokenExternalURL",
                        "nameLocation": "6769:17:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3763,
                        "src": "6755:31:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3735,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6755:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6720:72:13"
                  },
                  "returnParameters": {
                    "id": 3743,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6852:0:13"
                  },
                  "scope": 4289,
                  "src": "6692:330:13",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3794,
                    "nodeType": "Block",
                    "src": "7449:138:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3777,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3766,
                              "src": "7474:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3776,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "7459:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 3778,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7459:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3779,
                        "nodeType": "ExpressionStatement",
                        "src": "7459:23:13"
                      },
                      {
                        "expression": {
                          "id": 3785,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 3780,
                                "name": "_apps",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3454,
                                "src": "7492:5:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                  "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                }
                              },
                              "id": 3782,
                              "indexExpression": {
                                "id": 3781,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3766,
                                "src": "7498:7:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7492:14:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage",
                                "typeString": "struct FleekERC721.App storage ref"
                              }
                            },
                            "id": 3783,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "ENS",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3417,
                            "src": "7492:18:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3784,
                            "name": "_tokenENS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3768,
                            "src": "7513:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "7492:30:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3786,
                        "nodeType": "ExpressionStatement",
                        "src": "7492:30:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3788,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3766,
                              "src": "7549:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3789,
                              "name": "_tokenENS",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3768,
                              "src": "7558:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 3790,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "7569:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3791,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "7569:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3787,
                            "name": "NewTokenENS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3363,
                            "src": "7537:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$__$",
                              "typeString": "function (uint256,string memory,address)"
                            }
                          },
                          "id": 3792,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7537:43:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3793,
                        "nodeType": "EmitStatement",
                        "src": "7532:48:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3764,
                    "nodeType": "StructuredDocumentation",
                    "src": "7028:272:13",
                    "text": " @dev Updates the `ENS` metadata field of a minted `tokenId`.\n May emit a {NewTokenENS} event.\n Requirements:\n - the tokenId must be minted and valid.\n - the sender must have the `tokenController` role."
                  },
                  "functionSelector": "78278cca",
                  "id": 3795,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 3771,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3766,
                          "src": "7422:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 3772,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "7431:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 3773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Controller",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2663,
                          "src": "7431:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 3774,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3770,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "7405:16:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "7405:43:13"
                    }
                  ],
                  "name": "setTokenENS",
                  "nameLocation": "7314:11:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3769,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3766,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "7343:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3795,
                        "src": "7335:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3765,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7335:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3768,
                        "mutability": "mutable",
                        "name": "_tokenENS",
                        "nameLocation": "7374:9:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3795,
                        "src": "7360:23:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3767,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7360:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7325:64:13"
                  },
                  "returnParameters": {
                    "id": 3775,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7449:0:13"
                  },
                  "scope": 4289,
                  "src": "7305:282:13",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3826,
                    "nodeType": "Block",
                    "src": "8018:142:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3809,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3798,
                              "src": "8043:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3808,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "8028:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 3810,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8028:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3811,
                        "nodeType": "ExpressionStatement",
                        "src": "8028:23:13"
                      },
                      {
                        "expression": {
                          "id": 3817,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 3812,
                                "name": "_apps",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3454,
                                "src": "8061:5:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                  "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                }
                              },
                              "id": 3814,
                              "indexExpression": {
                                "id": 3813,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3798,
                                "src": "8067:7:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8061:14:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage",
                                "typeString": "struct FleekERC721.App storage ref"
                              }
                            },
                            "id": 3815,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "name",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3411,
                            "src": "8061:19:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3816,
                            "name": "_tokenName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3800,
                            "src": "8083:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "8061:32:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3818,
                        "nodeType": "ExpressionStatement",
                        "src": "8061:32:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3820,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3798,
                              "src": "8121:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3821,
                              "name": "_tokenName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3800,
                              "src": "8130:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 3822,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "8142:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3823,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "8142:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3819,
                            "name": "NewTokenName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3331,
                            "src": "8108:12:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$__$",
                              "typeString": "function (uint256,string memory,address)"
                            }
                          },
                          "id": 3824,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8108:45:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3825,
                        "nodeType": "EmitStatement",
                        "src": "8103:50:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3796,
                    "nodeType": "StructuredDocumentation",
                    "src": "7593:274:13",
                    "text": " @dev Updates the `name` metadata field of a minted `tokenId`.\n May emit a {NewTokenName} event.\n Requirements:\n - the tokenId must be minted and valid.\n - the sender must have the `tokenController` role."
                  },
                  "functionSelector": "cdb0e89e",
                  "id": 3827,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 3803,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3798,
                          "src": "7991:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 3804,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "8000:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 3805,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Controller",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2663,
                          "src": "8000:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 3806,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3802,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "7974:16:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "7974:43:13"
                    }
                  ],
                  "name": "setTokenName",
                  "nameLocation": "7881:12:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3801,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3798,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "7911:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3827,
                        "src": "7903:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3797,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7903:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3800,
                        "mutability": "mutable",
                        "name": "_tokenName",
                        "nameLocation": "7942:10:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3827,
                        "src": "7928:24:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3799,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7928:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7893:65:13"
                  },
                  "returnParameters": {
                    "id": 3807,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8018:0:13"
                  },
                  "scope": 4289,
                  "src": "7872:288:13",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3858,
                    "nodeType": "Block",
                    "src": "8619:170:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3841,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3830,
                              "src": "8644:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3840,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "8629:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 3842,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8629:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3843,
                        "nodeType": "ExpressionStatement",
                        "src": "8629:23:13"
                      },
                      {
                        "expression": {
                          "id": 3849,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 3844,
                                "name": "_apps",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3454,
                                "src": "8662:5:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                  "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                }
                              },
                              "id": 3846,
                              "indexExpression": {
                                "id": 3845,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3830,
                                "src": "8668:7:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8662:14:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage",
                                "typeString": "struct FleekERC721.App storage ref"
                              }
                            },
                            "id": 3847,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "description",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3413,
                            "src": "8662:26:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3848,
                            "name": "_tokenDescription",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3832,
                            "src": "8691:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "8662:46:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3850,
                        "nodeType": "ExpressionStatement",
                        "src": "8662:46:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3852,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3830,
                              "src": "8743:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3853,
                              "name": "_tokenDescription",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3832,
                              "src": "8752:17:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 3854,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "8771:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3855,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "8771:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3851,
                            "name": "NewTokenDescription",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3339,
                            "src": "8723:19:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$__$",
                              "typeString": "function (uint256,string memory,address)"
                            }
                          },
                          "id": 3856,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8723:59:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3857,
                        "nodeType": "EmitStatement",
                        "src": "8718:64:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3828,
                    "nodeType": "StructuredDocumentation",
                    "src": "8166:288:13",
                    "text": " @dev Updates the `description` metadata field of a minted `tokenId`.\n May emit a {NewTokenDescription} event.\n Requirements:\n - the tokenId must be minted and valid.\n - the sender must have the `tokenController` role."
                  },
                  "functionSelector": "246a908b",
                  "id": 3859,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 3835,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3830,
                          "src": "8592:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 3836,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "8601:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 3837,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Controller",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2663,
                          "src": "8601:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 3838,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3834,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "8575:16:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "8575:43:13"
                    }
                  ],
                  "name": "setTokenDescription",
                  "nameLocation": "8468:19:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3833,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3830,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "8505:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3859,
                        "src": "8497:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3829,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8497:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3832,
                        "mutability": "mutable",
                        "name": "_tokenDescription",
                        "nameLocation": "8536:17:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3859,
                        "src": "8522:31:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3831,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "8522:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8487:72:13"
                  },
                  "returnParameters": {
                    "id": 3839,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8619:0:13"
                  },
                  "scope": 4289,
                  "src": "8459:330:13",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3917,
                    "nodeType": "Block",
                    "src": "9266:475:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3868,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3862,
                              "src": "9403:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3867,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "9388:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 3869,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9388:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3870,
                        "nodeType": "ExpressionStatement",
                        "src": "9388:23:13"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3880,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 3872,
                                    "name": "_accessPoints",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3459,
                                    "src": "9429:13:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                      "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                    }
                                  },
                                  "id": 3874,
                                  "indexExpression": {
                                    "id": 3873,
                                    "name": "apName",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3864,
                                    "src": "9443:6:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9429:21:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                    "typeString": "struct FleekERC721.AccessPoint storage ref"
                                  }
                                },
                                "id": 3875,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "owner",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3445,
                                "src": "9429:27:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 3878,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "9468:1:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3877,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "9460:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3876,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "9460:7:13",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3879,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9460:10:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "9429:41:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "466c65656b4552433732313a20415020616c726561647920657869737473",
                              "id": 3881,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9472:32:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_d93a759d881d858647eb3ad97e569d1c374766e1d8f13661826163a7dcb75fcc",
                                "typeString": "literal_string \"FleekERC721: AP already exists\""
                              },
                              "value": "FleekERC721: AP already exists"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_d93a759d881d858647eb3ad97e569d1c374766e1d8f13661826163a7dcb75fcc",
                                "typeString": "literal_string \"FleekERC721: AP already exists\""
                              }
                            ],
                            "id": 3871,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "9421:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3882,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9421:84:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3883,
                        "nodeType": "ExpressionStatement",
                        "src": "9421:84:13"
                      },
                      {
                        "expression": {
                          "id": 3900,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 3884,
                              "name": "_accessPoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3459,
                              "src": "9516:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                              }
                            },
                            "id": 3886,
                            "indexExpression": {
                              "id": 3885,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3864,
                              "src": "9530:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9516:21:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                              "typeString": "struct FleekERC721.AccessPoint storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 3888,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3862,
                                "src": "9552:7:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 3889,
                                      "name": "_apps",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3454,
                                      "src": "9561:5:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                        "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                      }
                                    },
                                    "id": 3891,
                                    "indexExpression": {
                                      "id": 3890,
                                      "name": "tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3862,
                                      "src": "9567:7:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "9561:14:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_App_$3428_storage",
                                      "typeString": "struct FleekERC721.App storage ref"
                                    }
                                  },
                                  "id": 3892,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "accessPoints",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3427,
                                  "src": "9561:27:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                                    "typeString": "string storage ref[] storage ref"
                                  }
                                },
                                "id": 3893,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "9561:34:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "hexValue": "30",
                                "id": 3894,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9597:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "hexValue": "66616c7365",
                                "id": 3895,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9600:5:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              {
                                "hexValue": "66616c7365",
                                "id": 3896,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9607:5:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              {
                                "expression": {
                                  "id": 3897,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "9614:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 3898,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "9614:10:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 3887,
                              "name": "AccessPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3446,
                              "src": "9540:11:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_AccessPoint_$3446_storage_ptr_$",
                                "typeString": "type(struct FleekERC721.AccessPoint storage pointer)"
                              }
                            },
                            "id": 3899,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9540:85:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_memory_ptr",
                              "typeString": "struct FleekERC721.AccessPoint memory"
                            }
                          },
                          "src": "9516:109:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                            "typeString": "struct FleekERC721.AccessPoint storage ref"
                          }
                        },
                        "id": 3901,
                        "nodeType": "ExpressionStatement",
                        "src": "9516:109:13"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3907,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3864,
                              "src": "9668:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 3902,
                                  "name": "_apps",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3454,
                                  "src": "9635:5:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                    "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                  }
                                },
                                "id": 3904,
                                "indexExpression": {
                                  "id": 3903,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3862,
                                  "src": "9641:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "9635:14:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_App_$3428_storage",
                                  "typeString": "struct FleekERC721.App storage ref"
                                }
                              },
                              "id": 3905,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "accessPoints",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3427,
                              "src": "9635:27:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                                "typeString": "string storage ref[] storage ref"
                              }
                            },
                            "id": 3906,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "9635:32:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$bound_to$_t_array$_t_string_storage_$dyn_storage_ptr_$",
                              "typeString": "function (string storage ref[] storage pointer,string storage ref)"
                            }
                          },
                          "id": 3908,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9635:40:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3909,
                        "nodeType": "ExpressionStatement",
                        "src": "9635:40:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3911,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3864,
                              "src": "9706:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "id": 3912,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3862,
                              "src": "9714:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 3913,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9723:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3914,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "9723:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3910,
                            "name": "NewAccessPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3371,
                            "src": "9691:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (string memory,uint256,address)"
                            }
                          },
                          "id": 3915,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9691:43:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3916,
                        "nodeType": "EmitStatement",
                        "src": "9686:48:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3860,
                    "nodeType": "StructuredDocumentation",
                    "src": "8795:388:13",
                    "text": " @dev Add a new AccessPoint register for an app token.\n The AP name should be a DNS or ENS url and it should be unique.\n Anyone can add an AP but it should requires a payment.\n May emit a {NewAccessPoint} event.\n Requirements:\n - the tokenId must be minted and valid.\n IMPORTANT: The payment is not set yet"
                  },
                  "functionSelector": "b30437a0",
                  "id": 3918,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "addAccessPoint",
                  "nameLocation": "9197:14:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3865,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3862,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "9220:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3918,
                        "src": "9212:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3861,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9212:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3864,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "9243:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 3918,
                        "src": "9229:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3863,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "9229:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9211:39:13"
                  },
                  "returnParameters": {
                    "id": 3866,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9266:0:13"
                  },
                  "scope": 4289,
                  "src": "9188:553:13",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4004,
                    "nodeType": "Block",
                    "src": "10117:715:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3934,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 3928,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "10135:3:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 3929,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "10135:10:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 3930,
                                    "name": "_accessPoints",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3459,
                                    "src": "10149:13:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                      "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                    }
                                  },
                                  "id": 3932,
                                  "indexExpression": {
                                    "id": 3931,
                                    "name": "apName",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3921,
                                    "src": "10163:6:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "10149:21:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                    "typeString": "struct FleekERC721.AccessPoint storage ref"
                                  }
                                },
                                "id": 3933,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "owner",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3445,
                                "src": "10149:27:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "10135:41:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "466c65656b4552433732313a206d757374206265204150206f776e6572",
                              "id": 3935,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10178:31:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_d1340d11d8f2ab944c5f525eb815f60b32f1d48945a800d7400a0118746eb851",
                                "typeString": "literal_string \"FleekERC721: must be AP owner\""
                              },
                              "value": "FleekERC721: must be AP owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_d1340d11d8f2ab944c5f525eb815f60b32f1d48945a800d7400a0118746eb851",
                                "typeString": "literal_string \"FleekERC721: must be AP owner\""
                              }
                            ],
                            "id": 3927,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "10127:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3936,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10127:83:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3937,
                        "nodeType": "ExpressionStatement",
                        "src": "10127:83:13"
                      },
                      {
                        "assignments": [3939],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3939,
                            "mutability": "mutable",
                            "name": "tokenId",
                            "nameLocation": "10228:7:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 4004,
                            "src": "10220:15:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3938,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10220:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3944,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "id": 3940,
                              "name": "_accessPoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3459,
                              "src": "10238:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                              }
                            },
                            "id": 3942,
                            "indexExpression": {
                              "id": 3941,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3921,
                              "src": "10252:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "10238:21:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                              "typeString": "struct FleekERC721.AccessPoint storage ref"
                            }
                          },
                          "id": 3943,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "tokenId",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3435,
                          "src": "10238:29:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10220:47:13"
                      },
                      {
                        "assignments": [3947],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3947,
                            "mutability": "mutable",
                            "name": "_app",
                            "nameLocation": "10289:4:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 4004,
                            "src": "10277:16:13",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                              "typeString": "struct FleekERC721.App"
                            },
                            "typeName": {
                              "id": 3946,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3945,
                                "name": "App",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 3428,
                                "src": "10277:3:13"
                              },
                              "referencedDeclaration": 3428,
                              "src": "10277:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3951,
                        "initialValue": {
                          "baseExpression": {
                            "id": 3948,
                            "name": "_apps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3454,
                            "src": "10296:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                              "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                            }
                          },
                          "id": 3950,
                          "indexExpression": {
                            "id": 3949,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3939,
                            "src": "10302:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10296:14:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_App_$3428_storage",
                            "typeString": "struct FleekERC721.App storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10277:33:13"
                      },
                      {
                        "assignments": [3953],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3953,
                            "mutability": "mutable",
                            "name": "indexToRemove",
                            "nameLocation": "10370:13:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 4004,
                            "src": "10362:21:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3952,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10362:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3958,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "id": 3954,
                              "name": "_accessPoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3459,
                              "src": "10386:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                              }
                            },
                            "id": 3956,
                            "indexExpression": {
                              "id": 3955,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3921,
                              "src": "10400:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "10386:21:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                              "typeString": "struct FleekERC721.AccessPoint storage ref"
                            }
                          },
                          "id": 3957,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "index",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3437,
                          "src": "10386:27:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10362:51:13"
                      },
                      {
                        "assignments": [3960],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3960,
                            "mutability": "mutable",
                            "name": "lastAP",
                            "nameLocation": "10499:6:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 4004,
                            "src": "10485:20:13",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 3959,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "10485:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3969,
                        "initialValue": {
                          "baseExpression": {
                            "expression": {
                              "id": 3961,
                              "name": "_app",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3947,
                              "src": "10508:4:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                "typeString": "struct FleekERC721.App storage pointer"
                              }
                            },
                            "id": 3962,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "accessPoints",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3427,
                            "src": "10508:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                              "typeString": "string storage ref[] storage ref"
                            }
                          },
                          "id": 3968,
                          "indexExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 3967,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "expression": {
                                  "id": 3963,
                                  "name": "_app",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3947,
                                  "src": "10526:4:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                    "typeString": "struct FleekERC721.App storage pointer"
                                  }
                                },
                                "id": 3964,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "accessPoints",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3427,
                                "src": "10526:17:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                                  "typeString": "string storage ref[] storage ref"
                                }
                              },
                              "id": 3965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "10526:24:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 3966,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10553:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "10526:28:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10508:47:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10485:70:13"
                      },
                      {
                        "expression": {
                          "id": 3976,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 3970,
                                "name": "_app",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3947,
                                "src": "10565:4:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                  "typeString": "struct FleekERC721.App storage pointer"
                                }
                              },
                              "id": 3973,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "accessPoints",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3427,
                              "src": "10565:17:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                                "typeString": "string storage ref[] storage ref"
                              }
                            },
                            "id": 3974,
                            "indexExpression": {
                              "id": 3972,
                              "name": "indexToRemove",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3953,
                              "src": "10583:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10565:32:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3975,
                            "name": "lastAP",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3960,
                            "src": "10600:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "10565:41:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 3977,
                        "nodeType": "ExpressionStatement",
                        "src": "10565:41:13"
                      },
                      {
                        "expression": {
                          "id": 3983,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 3978,
                                "name": "_accessPoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3459,
                                "src": "10616:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                  "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                }
                              },
                              "id": 3980,
                              "indexExpression": {
                                "id": 3979,
                                "name": "lastAP",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3960,
                                "src": "10630:6:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10616:21:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                "typeString": "struct FleekERC721.AccessPoint storage ref"
                              }
                            },
                            "id": 3981,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "index",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3437,
                            "src": "10616:27:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3982,
                            "name": "indexToRemove",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3953,
                            "src": "10646:13:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10616:43:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3984,
                        "nodeType": "ExpressionStatement",
                        "src": "10616:43:13"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "expression": {
                                "id": 3985,
                                "name": "_app",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3947,
                                "src": "10702:4:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                  "typeString": "struct FleekERC721.App storage pointer"
                                }
                              },
                              "id": 3988,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "accessPoints",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3427,
                              "src": "10702:17:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                                "typeString": "string storage ref[] storage ref"
                              }
                            },
                            "id": 3989,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pop",
                            "nodeType": "MemberAccess",
                            "src": "10702:21:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_string_storage_$dyn_storage_ptr_$",
                              "typeString": "function (string storage ref[] storage pointer)"
                            }
                          },
                          "id": 3990,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10702:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3991,
                        "nodeType": "ExpressionStatement",
                        "src": "10702:23:13"
                      },
                      {
                        "expression": {
                          "id": 3995,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "10736:28:13",
                          "subExpression": {
                            "baseExpression": {
                              "id": 3992,
                              "name": "_accessPoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3459,
                              "src": "10743:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                              }
                            },
                            "id": 3994,
                            "indexExpression": {
                              "id": 3993,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3921,
                              "src": "10757:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10743:21:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                              "typeString": "struct FleekERC721.AccessPoint storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3996,
                        "nodeType": "ExpressionStatement",
                        "src": "10736:28:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3998,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3921,
                              "src": "10797:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "id": 3999,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3939,
                              "src": "10805:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 4000,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "10814:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4001,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "10814:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3997,
                            "name": "RemoveAccessPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3379,
                            "src": "10779:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (string memory,uint256,address)"
                            }
                          },
                          "id": 4002,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10779:46:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4003,
                        "nodeType": "EmitStatement",
                        "src": "10774:51:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3919,
                    "nodeType": "StructuredDocumentation",
                    "src": "9747:291:13",
                    "text": " @dev Remove an AccessPoint registry for an app token.\n It will also remove the AP from the app token APs list.\n May emit a {RemoveAccessPoint} event.\n Requirements:\n - the AP must exist.\n - must be called by the AP owner."
                  },
                  "functionSelector": "7469a03b",
                  "id": 4005,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 3924,
                          "name": "apName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3921,
                          "src": "10109:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 3925,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3923,
                        "name": "requireAP",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3492,
                        "src": "10099:9:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "10099:17:13"
                    }
                  ],
                  "name": "removeAccessPoint",
                  "nameLocation": "10052:17:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3922,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3921,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "10084:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4005,
                        "src": "10070:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3920,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "10070:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10069:22:13"
                  },
                  "returnParameters": {
                    "id": 3926,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10117:0:13"
                  },
                  "scope": 4289,
                  "src": "10043:789:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4027,
                    "nodeType": "Block",
                    "src": "11174:95:13",
                    "statements": [
                      {
                        "assignments": [4018],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4018,
                            "mutability": "mutable",
                            "name": "_ap",
                            "nameLocation": "11204:3:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 4027,
                            "src": "11184:23:13",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                              "typeString": "struct FleekERC721.AccessPoint"
                            },
                            "typeName": {
                              "id": 4017,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 4016,
                                "name": "AccessPoint",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 3446,
                                "src": "11184:11:13"
                              },
                              "referencedDeclaration": 3446,
                              "src": "11184:11:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                                "typeString": "struct FleekERC721.AccessPoint"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4022,
                        "initialValue": {
                          "baseExpression": {
                            "id": 4019,
                            "name": "_accessPoints",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3459,
                            "src": "11210:13:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                              "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                            }
                          },
                          "id": 4021,
                          "indexExpression": {
                            "id": 4020,
                            "name": "apName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4008,
                            "src": "11224:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "11210:21:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                            "typeString": "struct FleekERC721.AccessPoint storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11184:47:13"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 4023,
                              "name": "_ap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4018,
                              "src": "11248:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                                "typeString": "struct FleekERC721.AccessPoint storage pointer"
                              }
                            },
                            "id": 4024,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "toString",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4516,
                            "src": "11248:12:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_AccessPoint_$3446_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_struct$_AccessPoint_$3446_storage_ptr_$",
                              "typeString": "function (struct FleekERC721.AccessPoint storage pointer) view returns (string memory)"
                            }
                          },
                          "id": 4025,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11248:14:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4015,
                        "id": 4026,
                        "nodeType": "Return",
                        "src": "11241:21:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4006,
                    "nodeType": "StructuredDocumentation",
                    "src": "10838:227:13",
                    "text": " @dev A view function to gether information about an AccessPoint.\n It returns a JSON string representing the AccessPoint information.\n Requirements:\n - the AP must exist."
                  },
                  "functionSelector": "27dc5cec",
                  "id": 4028,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 4011,
                          "name": "apName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4008,
                          "src": "11142:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 4012,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4010,
                        "name": "requireAP",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3492,
                        "src": "11132:9:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "11132:17:13"
                    }
                  ],
                  "name": "getAccessPointJSON",
                  "nameLocation": "11079:18:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4009,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4008,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "11112:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4028,
                        "src": "11098:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4007,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "11098:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11097:22:13"
                  },
                  "returnParameters": {
                    "id": 4015,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4014,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4028,
                        "src": "11159:13:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4013,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "11159:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11158:15:13"
                  },
                  "scope": 4289,
                  "src": "11070:199:13",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4044,
                    "nodeType": "Block",
                    "src": "11530:58:13",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4039,
                              "name": "_accessPoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3459,
                              "src": "11547:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                              }
                            },
                            "id": 4041,
                            "indexExpression": {
                              "id": 4040,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4031,
                              "src": "11561:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "11547:21:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                              "typeString": "struct FleekERC721.AccessPoint storage ref"
                            }
                          },
                          "id": 4042,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "nameVerified",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3443,
                          "src": "11547:34:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 4038,
                        "id": 4043,
                        "nodeType": "Return",
                        "src": "11540:41:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4029,
                    "nodeType": "StructuredDocumentation",
                    "src": "11275:148:13",
                    "text": " @dev A view function to check if a AccessPoint is verified.\n Requirements:\n - the AP must exist."
                  },
                  "functionSelector": "d7a75be1",
                  "id": 4045,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 4034,
                          "name": "apName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4031,
                          "src": "11507:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 4035,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4033,
                        "name": "requireAP",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3492,
                        "src": "11497:9:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "11497:17:13"
                    }
                  ],
                  "name": "isAccessPointNameVerified",
                  "nameLocation": "11437:25:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4032,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4031,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "11477:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4045,
                        "src": "11463:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4030,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "11463:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11462:22:13"
                  },
                  "returnParameters": {
                    "id": 4038,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4037,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4045,
                        "src": "11524:4:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 4036,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "11524:4:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11523:6:13"
                  },
                  "scope": 4289,
                  "src": "11428:160:13",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4074,
                    "nodeType": "Block",
                    "src": "11877:163:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 4058,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "11887:29:13",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 4054,
                                "name": "_accessPoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3459,
                                "src": "11887:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                  "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                }
                              },
                              "id": 4056,
                              "indexExpression": {
                                "id": 4055,
                                "name": "apName",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4048,
                                "src": "11901:6:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11887:21:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                "typeString": "struct FleekERC721.AccessPoint storage ref"
                              }
                            },
                            "id": 4057,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "score",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3439,
                            "src": "11887:27:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 4059,
                        "nodeType": "ExpressionStatement",
                        "src": "11887:29:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 4061,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4048,
                              "src": "11954:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4062,
                                  "name": "_accessPoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3459,
                                  "src": "11962:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                    "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                  }
                                },
                                "id": 4064,
                                "indexExpression": {
                                  "id": 4063,
                                  "name": "apName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4048,
                                  "src": "11976:6:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11962:21:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                  "typeString": "struct FleekERC721.AccessPoint storage ref"
                                }
                              },
                              "id": 4065,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "tokenId",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3435,
                              "src": "11962:29:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4066,
                                  "name": "_accessPoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3459,
                                  "src": "11993:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                    "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                  }
                                },
                                "id": 4068,
                                "indexExpression": {
                                  "id": 4067,
                                  "name": "apName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4048,
                                  "src": "12007:6:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11993:21:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                  "typeString": "struct FleekERC721.AccessPoint storage ref"
                                }
                              },
                              "id": 4069,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "score",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3439,
                              "src": "11993:27:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 4070,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "12022:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4071,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "12022:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4060,
                            "name": "ChangeAccessPointScore",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3389,
                            "src": "11931:22:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (string memory,uint256,uint256,address)"
                            }
                          },
                          "id": 4072,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11931:102:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4073,
                        "nodeType": "EmitStatement",
                        "src": "11926:107:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4046,
                    "nodeType": "StructuredDocumentation",
                    "src": "11594:197:13",
                    "text": " @dev Increases the score of a AccessPoint registry.\n May emit a {ChangeAccessPointScore} event.\n Requirements:\n - the AP must exist."
                  },
                  "functionSelector": "94ec65c5",
                  "id": 4075,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 4051,
                          "name": "apName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4048,
                          "src": "11869:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 4052,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4050,
                        "name": "requireAP",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3492,
                        "src": "11859:9:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "11859:17:13"
                    }
                  ],
                  "name": "increaseAccessPointScore",
                  "nameLocation": "11805:24:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4049,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4048,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "11844:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4075,
                        "src": "11830:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4047,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "11830:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11829:22:13"
                  },
                  "returnParameters": {
                    "id": 4053,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11877:0:13"
                  },
                  "scope": 4289,
                  "src": "11796:244:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4114,
                    "nodeType": "Block",
                    "src": "12350:249:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4090,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 4085,
                                    "name": "_accessPoints",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3459,
                                    "src": "12368:13:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                      "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                    }
                                  },
                                  "id": 4087,
                                  "indexExpression": {
                                    "id": 4086,
                                    "name": "apName",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4078,
                                    "src": "12382:6:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "12368:21:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                    "typeString": "struct FleekERC721.AccessPoint storage ref"
                                  }
                                },
                                "id": 4088,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "score",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3439,
                                "src": "12368:27:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 4089,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12398:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "12368:31:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "466c65656b4552433732313a2073636f72652063616e74206265206c6f776572",
                              "id": 4091,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12401:34:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_913a89de686fc3b76fc49637d852549e5b5871951f52aa1e579b48d2ce5901df",
                                "typeString": "literal_string \"FleekERC721: score cant be lower\""
                              },
                              "value": "FleekERC721: score cant be lower"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_913a89de686fc3b76fc49637d852549e5b5871951f52aa1e579b48d2ce5901df",
                                "typeString": "literal_string \"FleekERC721: score cant be lower\""
                              }
                            ],
                            "id": 4084,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "12360:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4092,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12360:76:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4093,
                        "nodeType": "ExpressionStatement",
                        "src": "12360:76:13"
                      },
                      {
                        "expression": {
                          "id": 4098,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "--",
                          "prefix": false,
                          "src": "12446:29:13",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 4094,
                                "name": "_accessPoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3459,
                                "src": "12446:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                  "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                }
                              },
                              "id": 4096,
                              "indexExpression": {
                                "id": 4095,
                                "name": "apName",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4078,
                                "src": "12460:6:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12446:21:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                "typeString": "struct FleekERC721.AccessPoint storage ref"
                              }
                            },
                            "id": 4097,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "score",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3439,
                            "src": "12446:27:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 4099,
                        "nodeType": "ExpressionStatement",
                        "src": "12446:29:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 4101,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4078,
                              "src": "12513:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4102,
                                  "name": "_accessPoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3459,
                                  "src": "12521:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                    "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                  }
                                },
                                "id": 4104,
                                "indexExpression": {
                                  "id": 4103,
                                  "name": "apName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4078,
                                  "src": "12535:6:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "12521:21:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                  "typeString": "struct FleekERC721.AccessPoint storage ref"
                                }
                              },
                              "id": 4105,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "tokenId",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3435,
                              "src": "12521:29:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4106,
                                  "name": "_accessPoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3459,
                                  "src": "12552:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                    "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                  }
                                },
                                "id": 4108,
                                "indexExpression": {
                                  "id": 4107,
                                  "name": "apName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4078,
                                  "src": "12566:6:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "12552:21:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                  "typeString": "struct FleekERC721.AccessPoint storage ref"
                                }
                              },
                              "id": 4109,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "score",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3439,
                              "src": "12552:27:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 4110,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "12581:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "12581:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4100,
                            "name": "ChangeAccessPointScore",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3389,
                            "src": "12490:22:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (string memory,uint256,uint256,address)"
                            }
                          },
                          "id": 4112,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12490:102:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4113,
                        "nodeType": "EmitStatement",
                        "src": "12485:107:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4076,
                    "nodeType": "StructuredDocumentation",
                    "src": "12046:218:13",
                    "text": " @dev Decreases the score of a AccessPoint registry if is greater than 0.\n May emit a {ChangeAccessPointScore} event.\n Requirements:\n - the AP must exist."
                  },
                  "functionSelector": "a397c830",
                  "id": 4115,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 4081,
                          "name": "apName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4078,
                          "src": "12342:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 4082,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4080,
                        "name": "requireAP",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3492,
                        "src": "12332:9:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "12332:17:13"
                    }
                  ],
                  "name": "decreaseAccessPointScore",
                  "nameLocation": "12278:24:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4079,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4078,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "12317:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4115,
                        "src": "12303:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4077,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "12303:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12302:22:13"
                  },
                  "returnParameters": {
                    "id": 4083,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12350:0:13"
                  },
                  "scope": 4289,
                  "src": "12269:330:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4152,
                    "nodeType": "Block",
                    "src": "13068:171:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 4139,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 4134,
                                "name": "_accessPoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3459,
                                "src": "13078:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                  "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                }
                              },
                              "id": 4136,
                              "indexExpression": {
                                "id": 4135,
                                "name": "apName",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4118,
                                "src": "13092:6:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "13078:21:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                "typeString": "struct FleekERC721.AccessPoint storage ref"
                              }
                            },
                            "id": 4137,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "contentVerified",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3441,
                            "src": "13078:37:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 4138,
                            "name": "verified",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4120,
                            "src": "13118:8:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "13078:48:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4140,
                        "nodeType": "ExpressionStatement",
                        "src": "13078:48:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 4142,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4118,
                              "src": "13172:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4143,
                                  "name": "_accessPoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3459,
                                  "src": "13180:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                    "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                  }
                                },
                                "id": 4145,
                                "indexExpression": {
                                  "id": 4144,
                                  "name": "apName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4118,
                                  "src": "13194:6:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "13180:21:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                  "typeString": "struct FleekERC721.AccessPoint storage ref"
                                }
                              },
                              "id": 4146,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "tokenId",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3435,
                              "src": "13180:29:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 4147,
                              "name": "verified",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4120,
                              "src": "13211:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "expression": {
                                "id": 4148,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "13221:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4149,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "13221:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4141,
                            "name": "ChangeAccessPointContentVerify",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3409,
                            "src": "13141:30:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_bool_$_t_address_$returns$__$",
                              "typeString": "function (string memory,uint256,bool,address)"
                            }
                          },
                          "id": 4150,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13141:91:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4151,
                        "nodeType": "EmitStatement",
                        "src": "13136:96:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4116,
                    "nodeType": "StructuredDocumentation",
                    "src": "12605:271:13",
                    "text": " @dev Set the content verification of a AccessPoint registry.\n May emit a {ChangeAccessPointContentVerify} event.\n Requirements:\n - the AP must exist.\n - the sender must have the token controller role."
                  },
                  "functionSelector": "b20b94f1",
                  "id": 4153,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 4123,
                          "name": "apName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4118,
                          "src": "12994:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 4124,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4122,
                        "name": "requireAP",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3492,
                        "src": "12984:9:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "12984:17:13"
                    },
                    {
                      "arguments": [
                        {
                          "expression": {
                            "baseExpression": {
                              "id": 4126,
                              "name": "_accessPoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3459,
                              "src": "13019:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                              }
                            },
                            "id": 4128,
                            "indexExpression": {
                              "id": 4127,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4118,
                              "src": "13033:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "13019:21:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                              "typeString": "struct FleekERC721.AccessPoint storage ref"
                            }
                          },
                          "id": 4129,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "tokenId",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3435,
                          "src": "13019:29:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 4130,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "13050:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 4131,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Controller",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2663,
                          "src": "13050:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 4132,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4125,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "13002:16:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "13002:65:13"
                    }
                  ],
                  "name": "setAccessPointContentVerify",
                  "nameLocation": "12890:27:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4121,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4118,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "12941:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4153,
                        "src": "12927:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4117,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "12927:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4120,
                        "mutability": "mutable",
                        "name": "verified",
                        "nameLocation": "12962:8:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4153,
                        "src": "12957:13:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 4119,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "12957:4:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12917:59:13"
                  },
                  "returnParameters": {
                    "id": 4133,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13068:0:13"
                  },
                  "scope": 4289,
                  "src": "12881:358:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4190,
                    "nodeType": "Block",
                    "src": "13699:165:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 4177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 4172,
                                "name": "_accessPoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3459,
                                "src": "13709:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                  "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                }
                              },
                              "id": 4174,
                              "indexExpression": {
                                "id": 4173,
                                "name": "apName",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4156,
                                "src": "13723:6:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "13709:21:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                "typeString": "struct FleekERC721.AccessPoint storage ref"
                              }
                            },
                            "id": 4175,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "nameVerified",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3443,
                            "src": "13709:34:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 4176,
                            "name": "verified",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4158,
                            "src": "13746:8:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "13709:45:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4178,
                        "nodeType": "ExpressionStatement",
                        "src": "13709:45:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 4180,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4156,
                              "src": "13797:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4181,
                                  "name": "_accessPoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3459,
                                  "src": "13805:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                    "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                                  }
                                },
                                "id": 4183,
                                "indexExpression": {
                                  "id": 4182,
                                  "name": "apName",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4156,
                                  "src": "13819:6:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "13805:21:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                                  "typeString": "struct FleekERC721.AccessPoint storage ref"
                                }
                              },
                              "id": 4184,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "tokenId",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3435,
                              "src": "13805:29:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 4185,
                              "name": "verified",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4158,
                              "src": "13836:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "expression": {
                                "id": 4186,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "13846:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4187,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "13846:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4179,
                            "name": "ChangeAccessPointNameVerify",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3399,
                            "src": "13769:27:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$_t_bool_$_t_address_$returns$__$",
                              "typeString": "function (string memory,uint256,bool,address)"
                            }
                          },
                          "id": 4188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13769:88:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4189,
                        "nodeType": "EmitStatement",
                        "src": "13764:93:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4154,
                    "nodeType": "StructuredDocumentation",
                    "src": "13245:265:13",
                    "text": " @dev Set the name verification of a AccessPoint registry.\n May emit a {ChangeAccessPointNameVerify} event.\n Requirements:\n - the AP must exist.\n - the sender must have the token controller role."
                  },
                  "functionSelector": "42e44bbf",
                  "id": 4191,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 4161,
                          "name": "apName",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4156,
                          "src": "13625:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "id": 4162,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4160,
                        "name": "requireAP",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3492,
                        "src": "13615:9:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "13615:17:13"
                    },
                    {
                      "arguments": [
                        {
                          "expression": {
                            "baseExpression": {
                              "id": 4164,
                              "name": "_accessPoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3459,
                              "src": "13650:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_AccessPoint_$3446_storage_$",
                                "typeString": "mapping(string memory => struct FleekERC721.AccessPoint storage ref)"
                              }
                            },
                            "id": 4166,
                            "indexExpression": {
                              "id": 4165,
                              "name": "apName",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4156,
                              "src": "13664:6:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "13650:21:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage",
                              "typeString": "struct FleekERC721.AccessPoint storage ref"
                            }
                          },
                          "id": 4167,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "tokenId",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3435,
                          "src": "13650:29:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 4168,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "13681:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 4169,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Controller",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2663,
                          "src": "13681:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 4170,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4163,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "13633:16:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "13633:65:13"
                    }
                  ],
                  "name": "setAccessPointNameVerify",
                  "nameLocation": "13524:24:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4159,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4156,
                        "mutability": "mutable",
                        "name": "apName",
                        "nameLocation": "13572:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4191,
                        "src": "13558:20:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4155,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "13558:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4158,
                        "mutability": "mutable",
                        "name": "verified",
                        "nameLocation": "13593:8:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4191,
                        "src": "13588:13:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 4157,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "13588:4:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13548:59:13"
                  },
                  "returnParameters": {
                    "id": 4171,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13699:0:13"
                  },
                  "scope": 4289,
                  "src": "13515:349:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4209,
                    "nodeType": "Block",
                    "src": "14123:84:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4201,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4194,
                              "src": "14148:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 4200,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "14133:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 4202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14133:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4203,
                        "nodeType": "ExpressionStatement",
                        "src": "14133:23:13"
                      },
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 4204,
                              "name": "_apps",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3454,
                              "src": "14173:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                              }
                            },
                            "id": 4206,
                            "indexExpression": {
                              "id": 4205,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4194,
                              "src": "14179:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "14173:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_App_$3428_storage",
                              "typeString": "struct FleekERC721.App storage ref"
                            }
                          },
                          "id": 4207,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "accessPoints",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3427,
                          "src": "14173:27:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                            "typeString": "string storage ref[] storage ref"
                          }
                        },
                        "functionReturnParameters": 4199,
                        "id": 4208,
                        "nodeType": "Return",
                        "src": "14166:34:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4192,
                    "nodeType": "StructuredDocumentation",
                    "src": "13870:168:13",
                    "text": " @dev A view function to gether the list of mirrros for a given app.\n Requirements:\n - the tokenId must be minted and valid."
                  },
                  "functionSelector": "f6be6b78",
                  "id": 4210,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "appAccessPoints",
                  "nameLocation": "14052:15:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4195,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4194,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "14076:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4210,
                        "src": "14068:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4193,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14068:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14067:17:13"
                  },
                  "returnParameters": {
                    "id": 4199,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4198,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4210,
                        "src": "14106:15:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 4196,
                            "name": "string",
                            "nodeType": "ElementaryTypeName",
                            "src": "14106:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage_ptr",
                              "typeString": "string"
                            }
                          },
                          "id": 4197,
                          "nodeType": "ArrayTypeName",
                          "src": "14106:8:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                            "typeString": "string[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14105:17:13"
                  },
                  "scope": 4289,
                  "src": "14043:164:13",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4252,
                    "nodeType": "Block",
                    "src": "14674:196:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4226,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4213,
                              "src": "14699:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 4225,
                            "name": "_requireMinted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 822,
                            "src": "14684:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 4227,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14684:23:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4228,
                        "nodeType": "ExpressionStatement",
                        "src": "14684:23:13"
                      },
                      {
                        "expression": {
                          "id": 4243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 4229,
                                  "name": "_apps",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3454,
                                  "src": "14717:5:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                    "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                  }
                                },
                                "id": 4231,
                                "indexExpression": {
                                  "id": 4230,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4213,
                                  "src": "14723:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "14717:14:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_App_$3428_storage",
                                  "typeString": "struct FleekERC721.App storage ref"
                                }
                              },
                              "id": 4232,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "builds",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3424,
                              "src": "14717:21:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Build_$3433_storage_$",
                                "typeString": "mapping(uint256 => struct FleekERC721.Build storage ref)"
                              }
                            },
                            "id": 4238,
                            "indexExpression": {
                              "id": 4237,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "14739:29:13",
                              "subExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 4233,
                                    "name": "_apps",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3454,
                                    "src": "14741:5:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                      "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                    }
                                  },
                                  "id": 4235,
                                  "indexExpression": {
                                    "id": 4234,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4213,
                                    "src": "14747:7:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "14741:14:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_App_$3428_storage",
                                    "typeString": "struct FleekERC721.App storage ref"
                                  }
                                },
                                "id": 4236,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberName": "currentBuild",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3419,
                                "src": "14741:27:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "14717:52:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Build_$3433_storage",
                              "typeString": "struct FleekERC721.Build storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 4240,
                                "name": "_commitHash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4215,
                                "src": "14778:11:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              {
                                "id": 4241,
                                "name": "_gitRepository",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4217,
                                "src": "14791:14:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                },
                                {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              ],
                              "id": 4239,
                              "name": "Build",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3433,
                              "src": "14772:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Build_$3433_storage_ptr_$",
                                "typeString": "type(struct FleekERC721.Build storage pointer)"
                              }
                            },
                            "id": 4242,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14772:34:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Build_$3433_memory_ptr",
                              "typeString": "struct FleekERC721.Build memory"
                            }
                          },
                          "src": "14717:89:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Build_$3433_storage",
                            "typeString": "struct FleekERC721.Build storage ref"
                          }
                        },
                        "id": 4244,
                        "nodeType": "ExpressionStatement",
                        "src": "14717:89:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 4246,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4213,
                              "src": "14830:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 4247,
                              "name": "_commitHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4215,
                              "src": "14839:11:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 4248,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "14852:3:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4249,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "14852:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4245,
                            "name": "NewBuild",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3323,
                            "src": "14821:8:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$__$",
                              "typeString": "function (uint256,string memory,address)"
                            }
                          },
                          "id": 4250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14821:42:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4251,
                        "nodeType": "EmitStatement",
                        "src": "14816:47:13"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4211,
                    "nodeType": "StructuredDocumentation",
                    "src": "14213:270:13",
                    "text": " @dev Adds a new build to a minted `tokenId`'s builds mapping.\n May emit a {NewBuild} event.\n Requirements:\n - the tokenId must be minted and valid.\n - the sender must have the `tokenController` role."
                  },
                  "functionSelector": "3806f152",
                  "id": 4253,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 4220,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4213,
                          "src": "14647:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 4221,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "14656:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 4222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Controller",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2663,
                          "src": "14656:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 4223,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4219,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "14630:16:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "14630:43:13"
                    }
                  ],
                  "name": "setTokenBuild",
                  "nameLocation": "14497:13:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4218,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4213,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "14528:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4253,
                        "src": "14520:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4212,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14520:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4215,
                        "mutability": "mutable",
                        "name": "_commitHash",
                        "nameLocation": "14559:11:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4253,
                        "src": "14545:25:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4214,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "14545:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4217,
                        "mutability": "mutable",
                        "name": "_gitRepository",
                        "nameLocation": "14594:14:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4253,
                        "src": "14580:28:13",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4216,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "14580:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14510:104:13"
                  },
                  "returnParameters": {
                    "id": 4224,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14674:0:13"
                  },
                  "scope": 4289,
                  "src": "14488:382:13",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4287,
                    "nodeType": "Block",
                    "src": "15211:144:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4267,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4256,
                              "src": "15233:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 4264,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -25,
                              "src": "15221:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_FleekERC721_$4289_$",
                                "typeString": "type(contract super FleekERC721)"
                              }
                            },
                            "id": 4266,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "_burn",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 667,
                            "src": "15221:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 4268,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15221:20:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4269,
                        "nodeType": "ExpressionStatement",
                        "src": "15221:20:13"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4279,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 4272,
                                      "name": "_apps",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3454,
                                      "src": "15262:5:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                        "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                      }
                                    },
                                    "id": 4274,
                                    "indexExpression": {
                                      "id": 4273,
                                      "name": "tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4256,
                                      "src": "15268:7:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "15262:14:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_App_$3428_storage",
                                      "typeString": "struct FleekERC721.App storage ref"
                                    }
                                  },
                                  "id": 4275,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "externalURL",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3415,
                                  "src": "15262:26:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                ],
                                "id": 4271,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "15256:5:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                  "typeString": "type(bytes storage pointer)"
                                },
                                "typeName": {
                                  "id": 4270,
                                  "name": "bytes",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "15256:5:13",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4276,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "15256:33:13",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes storage pointer"
                              }
                            },
                            "id": 4277,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "15256:40:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 4278,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15300:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "15256:45:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4286,
                        "nodeType": "IfStatement",
                        "src": "15252:97:13",
                        "trueBody": {
                          "id": 4285,
                          "nodeType": "Block",
                          "src": "15303:46:13",
                          "statements": [
                            {
                              "expression": {
                                "id": 4283,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "delete",
                                "prefix": true,
                                "src": "15317:21:13",
                                "subExpression": {
                                  "baseExpression": {
                                    "id": 4280,
                                    "name": "_apps",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3454,
                                    "src": "15324:5:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_App_$3428_storage_$",
                                      "typeString": "mapping(uint256 => struct FleekERC721.App storage ref)"
                                    }
                                  },
                                  "id": 4282,
                                  "indexExpression": {
                                    "id": 4281,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4256,
                                    "src": "15330:7:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "15324:14:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_App_$3428_storage",
                                    "typeString": "struct FleekERC721.App storage ref"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 4284,
                              "nodeType": "ExpressionStatement",
                              "src": "15317:21:13"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4254,
                    "nodeType": "StructuredDocumentation",
                    "src": "14876:245:13",
                    "text": " @dev Burns a previously minted `tokenId`.\n May emit a {Transfer} event.\n Requirements:\n - the tokenId must be minted and valid.\n - the sender must have the `tokenOwner` role."
                  },
                  "functionSelector": "42966c68",
                  "id": 4288,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 4259,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4256,
                          "src": "15189:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 4260,
                            "name": "Roles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2664,
                            "src": "15198:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Roles_$2664_$",
                              "typeString": "type(enum FleekAccessControl.Roles)"
                            }
                          },
                          "id": 4261,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2662,
                          "src": "15198:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Roles_$2664",
                            "typeString": "enum FleekAccessControl.Roles"
                          }
                        }
                      ],
                      "id": 4262,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 4258,
                        "name": "requireTokenRole",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 2802,
                        "src": "15172:16:13"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "15172:38:13"
                    }
                  ],
                  "name": "burn",
                  "nameLocation": "15135:4:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4257,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4256,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "15148:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 4288,
                        "src": "15140:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4255,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15140:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15139:17:13"
                  },
                  "returnParameters": {
                    "id": 4263,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15211:0:13"
                  },
                  "scope": 4289,
                  "src": "15126:229:13",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                }
              ],
              "scope": 4290,
              "src": "290:15067:13",
              "usedErrors": []
            }
          ],
          "src": "33:15325:13"
        },
        "id": 13
      },
      "contracts/util/FleekSVG.sol": {
        "ast": {
          "absolutePath": "contracts/util/FleekSVG.sol",
          "exportedSymbols": {
            "Base64": [1482],
            "FleekERC721": [4289],
            "FleekSVG": [4338],
            "Math": [2654],
            "Strings": [1753]
          },
          "id": 4339,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 4291,
              "literals": ["solidity", "^", "0.8", ".7"],
              "nodeType": "PragmaDirective",
              "src": "33:23:14"
            },
            {
              "absolutePath": "contracts/FleekERC721.sol",
              "file": "../FleekERC721.sol",
              "id": 4292,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4339,
              "sourceUnit": 4290,
              "src": "58:28:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
              "file": "@openzeppelin/contracts/utils/Strings.sol",
              "id": 4293,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4339,
              "sourceUnit": 1754,
              "src": "87:51:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Base64.sol",
              "file": "@openzeppelin/contracts/utils/Base64.sol",
              "id": 4294,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4339,
              "sourceUnit": 1483,
              "src": "139:50:14",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "FleekSVG",
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 4338,
              "linearizedBaseContracts": [4338],
              "name": "FleekSVG",
              "nameLocation": "199:8:14",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 4336,
                    "nodeType": "Block",
                    "src": "366:2710:14",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c",
                                      "id": 4308,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "459:31:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa",
                                        "typeString": "literal_string \"data:application/json;base64,\""
                                      },
                                      "value": "data:application/json;base64,"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "hexValue": "3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b222076657273696f6e3d22312e31222077696474683d2236343022206865696768743d22343830222076696577426f783d2230203020363430203438302220786d6c3a73706163653d227072657365727665223e",
                                              "id": 4313,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "597:167:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_7335c769954f24530e26e013cd159942e04df6ad832c695157f953b896d262ba",
                                                "typeString": "literal_string \"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"640\" height=\"480\" viewBox=\"0 0 640 480\" xml:space=\"preserve\">\""
                                              },
                                              "value": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"640\" height=\"480\" viewBox=\"0 0 640 480\" xml:space=\"preserve\">"
                                            },
                                            {
                                              "hexValue": "3c646566733e",
                                              "id": 4314,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "794:8:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_c9d6f35adafbd6db05cf66701a579ef4e1499ac0364b80726ad93d0f9855ba3a",
                                                "typeString": "literal_string \"<defs>\""
                                              },
                                              "value": "<defs>"
                                            },
                                            {
                                              "hexValue": "3c2f646566733e",
                                              "id": 4315,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "832:9:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_bed599d0025e0618137b41a2a30b05693d5ffd7547da6408dc30d1faba1b52ab",
                                                "typeString": "literal_string \"</defs>\""
                                              },
                                              "value": "</defs>"
                                            },
                                            {
                                              "hexValue": "3c67207472616e73666f726d3d226d617472697828332e34322030203020332e3432203330302e3938203235322e3938292220203e",
                                              "id": 4316,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "871:55:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_d53693239668070e800b078e2c91cf35bac727e847d6f649d4ce99fa6abfaaed",
                                                "typeString": "literal_string \"<g transform=\"matrix(3.42 0 0 3.42 300.98 252.98)\"  >\""
                                              },
                                              "value": "<g transform=\"matrix(3.42 0 0 3.42 300.98 252.98)\"  >"
                                            },
                                            {
                                              "hexValue": "3c706f6c79676f6e207374796c653d227374726f6b653a2072676228302c302c30293b207374726f6b652d77696474683a20383b207374726f6b652d6461736861727261793a206e6f6e653b207374726f6b652d6c696e656361703a20627574743b207374726f6b652d646173686f66667365743a20303b207374726f6b652d6c696e656a6f696e3a206d697465723b207374726f6b652d6d697465726c696d69743a20343b2066696c6c3a20726762283135322c3135322c313833293b2066696c6c2d72756c653a206e6f6e7a65726f3b206f7061636974793a20313b2220766563746f722d6566666563743d226e6f6e2d7363616c696e672d7374726f6b65222020706f696e74733d222d35302c2d3530202d35302c35302035302c35302035302c2d35302022202f3e",
                                              "id": 4317,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "956:302:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_859ca6c4911b599d248cfcba8c4f0c9e04369d262d39600ab81c9f211724b098",
                                                "typeString": "literal_string \"<polygon style=\"stroke: rgb(0,0,0); stroke-width: 8; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(152,152,183); fill-rule: nonzero; opacity: 1;\" vector-effect=\"non-scaling-stroke\"  points=\"-50,-50 -50,50 50,50 50,-50 \" />\""
                                              },
                                              "value": "<polygon style=\"stroke: rgb(0,0,0); stroke-width: 8; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(152,152,183); fill-rule: nonzero; opacity: 1;\" vector-effect=\"non-scaling-stroke\"  points=\"-50,-50 -50,50 50,50 50,-50 \" />"
                                            },
                                            {
                                              "hexValue": "3c2f673e",
                                              "id": 4318,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "1288:6:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_a645b115fdaf7bdcc5aba7397b588ade744101725f5d97f32b878171acf7259e",
                                                "typeString": "literal_string \"</g>\""
                                              },
                                              "value": "</g>"
                                            },
                                            {
                                              "hexValue": "3c67207472616e73666f726d3d226d61747269782831203020302031203330332e35203131352e36372922207374796c653d222220203e",
                                              "id": 4319,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "1324:57:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_4b2c8de2c89c6e81872d34cdd9fb152e7344fad6744fb7cb1bcbcee1481f18ab",
                                                "typeString": "literal_string \"<g transform=\"matrix(1 0 0 1 303.5 115.67)\" style=\"\"  >\""
                                              },
                                              "value": "<g transform=\"matrix(1 0 0 1 303.5 115.67)\" style=\"\"  >"
                                            },
                                            {
                                              "hexValue": "3c7465787420786d6c3a73706163653d2270726573657276652220666f6e742d66616d696c793d224f70656e2053616e732220666f6e742d73697a653d2232342220666f6e742d7374796c653d226e6f726d616c2220666f6e742d7765696768743d226e6f726d616c22207374796c653d227374726f6b653a206e6f6e653b207374726f6b652d77696474683a20313b207374726f6b652d6461736861727261793a206e6f6e653b207374726f6b652d6c696e656361703a20627574743b207374726f6b652d646173686f66667365743a20303b207374726f6b652d6c696e656a6f696e3a206d697465723b207374726f6b652d6d697465726c696d69743a20343b2066696c6c3a2072676228302c302c30293b2066696c6c2d72756c653a206e6f6e7a65726f3b206f7061636974793a20313b2077686974652d73706163653a207072653b22203e3c747370616e20783d222d34352e372220793d22352e363522207374796c653d227374726f6b652d77696474683a20313b20666f6e742d66616d696c793a20224f70656e2053616e73222c2073616e732d73657269663b20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206e6f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6c3a2072676228302c302c30293b20223e466c65656b204e4641733c2f747370616e3e3c2f746578743e",
                                              "id": 4320,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "1411:522:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_e0247f8cc627b189f6f200e9d303521f1864a2e38c290d110e2bdf04f4fd14fc",
                                                "typeString": "literal_string \"<text xml:space=\"preserve\" font-family=\"Open Sans\" font-size=\"24\" font-style=\"normal\" font-weight=\"normal\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\" ><tspan x=\"-45.7\" y=\"5.65\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">Fleek NFAs</tspan></text>\""
                                              },
                                              "value": "<text xml:space=\"preserve\" font-family=\"Open Sans\" font-size=\"24\" font-style=\"normal\" font-weight=\"normal\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\" ><tspan x=\"-45.7\" y=\"5.65\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">Fleek NFAs</tspan></text>"
                                            },
                                            {
                                              "hexValue": "3c2f673e",
                                              "id": 4321,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "1963:6:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_a645b115fdaf7bdcc5aba7397b588ade744101725f5d97f32b878171acf7259e",
                                                "typeString": "literal_string \"</g>\""
                                              },
                                              "value": "</g>"
                                            },
                                            {
                                              "hexValue": "3c67207472616e73666f726d3d226d6174726978283120302030203120333032203236312e34372922207374796c653d222220203e",
                                              "id": 4322,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "1999:55:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_c062564a4de68419d6f81d92c64b42fdff5cead26ee038792bd5667758538321",
                                                "typeString": "literal_string \"<g transform=\"matrix(1 0 0 1 302 261.47)\" style=\"\"  >\""
                                              },
                                              "value": "<g transform=\"matrix(1 0 0 1 302 261.47)\" style=\"\"  >"
                                            },
                                            {
                                              "hexValue": "3c7465787420786d6c3a73706163653d2270726573657276652220666f6e742d66616d696c793d224f70656e2053616e732220666f6e742d73697a653d2232382220666f6e742d7374796c653d226e6f726d616c2220666f6e742d7765696768743d226e6f726d616c22207374796c653d227374726f6b653a206e6f6e653b207374726f6b652d77696474683a20313b207374726f6b652d6461736861727261793a206e6f6e653b207374726f6b652d6c696e656361703a20627574743b207374726f6b652d646173686f66667365743a20303b207374726f6b652d6c696e656a6f696e3a206d697465723b207374726f6b652d6d697465726c696d69743a20343b2066696c6c3a2072676228302c302c30293b2066696c6c2d72756c653a206e6f6e7a65726f3b206f7061636974793a20313b2077686974652d73706163653a207072653b22203e3c747370616e20783d222d34342e32362220793d222d362e313422207374796c653d227374726f6b652d77696474683a20313b20666f6e742d66616d696c793a20224f70656e2053616e73222c2073616e732d73657269663b20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206e6f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6c3a2072676228302c302c30293b20223e",
                                              "id": 4323,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2084:499:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_f82b709bc20f69415ba5db24e1514895140fb6e59a7292c1a375dc4aa7e28d10",
                                                "typeString": "literal_string \"<text xml:space=\"preserve\" font-family=\"Open Sans\" font-size=\"28\" font-style=\"normal\" font-weight=\"normal\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\" ><tspan x=\"-44.26\" y=\"-6.14\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">\""
                                              },
                                              "value": "<text xml:space=\"preserve\" font-family=\"Open Sans\" font-size=\"28\" font-style=\"normal\" font-weight=\"normal\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\" ><tspan x=\"-44.26\" y=\"-6.14\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">"
                                            },
                                            {
                                              "id": 4324,
                                              "name": "name",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4297,
                                              "src": "2613:4:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "3c2f747370616e3e3c747370616e20783d222d33372e31342220793d2231372e343522207374796c653d227374726f6b652d77696474683a20313b20666f6e742d66616d696c793a20224f70656e2053616e73222c2073616e732d73657269663b20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206e6f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6c3a2072676228302c302c30293b20223e",
                                              "id": 4325,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2647:178:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_804da73d3e3699195c46f7ce44db6e6efcdeaa7c60016ac771f11add027a8730",
                                                "typeString": "literal_string \"</tspan><tspan x=\"-37.14\" y=\"17.45\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">\""
                                              },
                                              "value": "</tspan><tspan x=\"-37.14\" y=\"17.45\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">"
                                            },
                                            {
                                              "id": 4326,
                                              "name": "ENS",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4299,
                                              "src": "2855:3:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            },
                                            {
                                              "hexValue": "3c2f747370616e3e3c2f746578743e",
                                              "id": 4327,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2888:17:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_12cd338f047f630f7b9ae19fa03ba2b18150f2d691b9114aa1e444b9e9ad496a",
                                                "typeString": "literal_string \"</tspan></text>\""
                                              },
                                              "value": "</tspan></text>"
                                            },
                                            {
                                              "hexValue": "3c2f673e",
                                              "id": 4328,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2935:6:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_a645b115fdaf7bdcc5aba7397b588ade744101725f5d97f32b878171acf7259e",
                                                "typeString": "literal_string \"</g>\""
                                              },
                                              "value": "</g>"
                                            },
                                            {
                                              "hexValue": "3c2f7376673e",
                                              "id": 4329,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2971:8:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_ed942a74eccce931b7661b37252dffca8561e3a8bdec86f6da31d97d858c9292",
                                                "typeString": "literal_string \"</svg>\""
                                              },
                                              "value": "</svg>"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_stringliteral_7335c769954f24530e26e013cd159942e04df6ad832c695157f953b896d262ba",
                                                "typeString": "literal_string \"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"640\" height=\"480\" viewBox=\"0 0 640 480\" xml:space=\"preserve\">\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_c9d6f35adafbd6db05cf66701a579ef4e1499ac0364b80726ad93d0f9855ba3a",
                                                "typeString": "literal_string \"<defs>\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_bed599d0025e0618137b41a2a30b05693d5ffd7547da6408dc30d1faba1b52ab",
                                                "typeString": "literal_string \"</defs>\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_d53693239668070e800b078e2c91cf35bac727e847d6f649d4ce99fa6abfaaed",
                                                "typeString": "literal_string \"<g transform=\"matrix(3.42 0 0 3.42 300.98 252.98)\"  >\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_859ca6c4911b599d248cfcba8c4f0c9e04369d262d39600ab81c9f211724b098",
                                                "typeString": "literal_string \"<polygon style=\"stroke: rgb(0,0,0); stroke-width: 8; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(152,152,183); fill-rule: nonzero; opacity: 1;\" vector-effect=\"non-scaling-stroke\"  points=\"-50,-50 -50,50 50,50 50,-50 \" />\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_a645b115fdaf7bdcc5aba7397b588ade744101725f5d97f32b878171acf7259e",
                                                "typeString": "literal_string \"</g>\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_4b2c8de2c89c6e81872d34cdd9fb152e7344fad6744fb7cb1bcbcee1481f18ab",
                                                "typeString": "literal_string \"<g transform=\"matrix(1 0 0 1 303.5 115.67)\" style=\"\"  >\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_e0247f8cc627b189f6f200e9d303521f1864a2e38c290d110e2bdf04f4fd14fc",
                                                "typeString": "literal_string \"<text xml:space=\"preserve\" font-family=\"Open Sans\" font-size=\"24\" font-style=\"normal\" font-weight=\"normal\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\" ><tspan x=\"-45.7\" y=\"5.65\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">Fleek NFAs</tspan></text>\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_a645b115fdaf7bdcc5aba7397b588ade744101725f5d97f32b878171acf7259e",
                                                "typeString": "literal_string \"</g>\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_c062564a4de68419d6f81d92c64b42fdff5cead26ee038792bd5667758538321",
                                                "typeString": "literal_string \"<g transform=\"matrix(1 0 0 1 302 261.47)\" style=\"\"  >\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_f82b709bc20f69415ba5db24e1514895140fb6e59a7292c1a375dc4aa7e28d10",
                                                "typeString": "literal_string \"<text xml:space=\"preserve\" font-family=\"Open Sans\" font-size=\"28\" font-style=\"normal\" font-weight=\"normal\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\" ><tspan x=\"-44.26\" y=\"-6.14\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_804da73d3e3699195c46f7ce44db6e6efcdeaa7c60016ac771f11add027a8730",
                                                "typeString": "literal_string \"</tspan><tspan x=\"-37.14\" y=\"17.45\" style=\"stroke-width: 1; font-family: \"Open Sans\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \">\""
                                              },
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_12cd338f047f630f7b9ae19fa03ba2b18150f2d691b9114aa1e444b9e9ad496a",
                                                "typeString": "literal_string \"</tspan></text>\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_a645b115fdaf7bdcc5aba7397b588ade744101725f5d97f32b878171acf7259e",
                                                "typeString": "literal_string \"</g>\""
                                              },
                                              {
                                                "typeIdentifier": "t_stringliteral_ed942a74eccce931b7661b37252dffca8561e3a8bdec86f6da31d97d858c9292",
                                                "typeString": "literal_string \"</svg>\""
                                              }
                                            ],
                                            "expression": {
                                              "id": 4311,
                                              "name": "abi",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -1,
                                              "src": "551:3:14",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_magic_abi",
                                                "typeString": "abi"
                                              }
                                            },
                                            "id": 4312,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "memberName": "encodePacked",
                                            "nodeType": "MemberAccess",
                                            "src": "551:16:14",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                              "typeString": "function () pure returns (bytes memory)"
                                            }
                                          },
                                          "id": 4330,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "551:2454:14",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        ],
                                        "expression": {
                                          "id": 4309,
                                          "name": "Base64",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1482,
                                          "src": "512:6:14",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_Base64_$1482_$",
                                            "typeString": "type(library Base64)"
                                          }
                                        },
                                        "id": 4310,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "encode",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1481,
                                        "src": "512:13:14",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                                          "typeString": "function (bytes memory) pure returns (string memory)"
                                        }
                                      },
                                      "id": 4331,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "512:2515:14",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa",
                                        "typeString": "literal_string \"data:application/json;base64,\""
                                      },
                                      {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    ],
                                    "expression": {
                                      "id": 4306,
                                      "name": "abi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -1,
                                      "src": "421:3:14",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_abi",
                                        "typeString": "abi"
                                      }
                                    },
                                    "id": 4307,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "encodePacked",
                                    "nodeType": "MemberAccess",
                                    "src": "421:16:14",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                      "typeString": "function () pure returns (bytes memory)"
                                    }
                                  },
                                  "id": 4332,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "421:2624:14",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 4305,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "397:6:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                  "typeString": "type(string storage pointer)"
                                },
                                "typeName": {
                                  "id": 4304,
                                  "name": "string",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "397:6:14",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4333,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "397:2662:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "id": 4334,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "383:2686:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4303,
                        "id": 4335,
                        "nodeType": "Return",
                        "src": "376:2693:14"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4295,
                    "nodeType": "StructuredDocumentation",
                    "src": "214:46:14",
                    "text": " @dev Generates a SVG image."
                  },
                  "id": 4337,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "generateBase64",
                  "nameLocation": "274:14:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4300,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4297,
                        "mutability": "mutable",
                        "name": "name",
                        "nameLocation": "303:4:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 4337,
                        "src": "289:18:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4296,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "289:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4299,
                        "mutability": "mutable",
                        "name": "ENS",
                        "nameLocation": "323:3:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 4337,
                        "src": "309:17:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4298,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "309:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "288:39:14"
                  },
                  "returnParameters": {
                    "id": 4303,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4302,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4337,
                        "src": "351:13:14",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4301,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "351:6:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "350:15:14"
                  },
                  "scope": 4338,
                  "src": "265:2811:14",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 4339,
              "src": "191:2887:14",
              "usedErrors": []
            }
          ],
          "src": "33:3046:14"
        },
        "id": 14
      },
      "contracts/util/FleekStrings.sol": {
        "ast": {
          "absolutePath": "contracts/util/FleekStrings.sol",
          "exportedSymbols": {
            "Base64": [1482],
            "FleekERC721": [4289],
            "FleekSVG": [4338],
            "FleekStrings": [4517],
            "Math": [2654],
            "Strings": [1753]
          },
          "id": 4518,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 4340,
              "literals": ["solidity", "^", "0.8", ".7"],
              "nodeType": "PragmaDirective",
              "src": "33:23:15"
            },
            {
              "absolutePath": "contracts/FleekERC721.sol",
              "file": "../FleekERC721.sol",
              "id": 4341,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4518,
              "sourceUnit": 4290,
              "src": "58:28:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
              "file": "@openzeppelin/contracts/utils/Strings.sol",
              "id": 4342,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4518,
              "sourceUnit": 1754,
              "src": "87:51:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Base64.sol",
              "file": "@openzeppelin/contracts/utils/Base64.sol",
              "id": 4343,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4518,
              "sourceUnit": 1483,
              "src": "139:50:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/util/FleekSVG.sol",
              "file": "./FleekSVG.sol",
              "id": 4344,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 4518,
              "sourceUnit": 4339,
              "src": "190:24:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "FleekStrings",
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 4517,
              "linearizedBaseContracts": [4517],
              "name": "FleekStrings",
              "nameLocation": "224:12:15",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 4347,
                  "libraryName": {
                    "id": 4345,
                    "name": "Strings",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1753,
                    "src": "249:7:15"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "243:26:15",
                  "typeName": {
                    "id": 4346,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "261:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "id": 4350,
                  "libraryName": {
                    "id": 4348,
                    "name": "Strings",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1753,
                    "src": "280:7:15"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "274:26:15",
                  "typeName": {
                    "id": 4349,
                    "name": "uint160",
                    "nodeType": "ElementaryTypeName",
                    "src": "292:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint160",
                      "typeString": "uint160"
                    }
                  }
                },
                {
                  "id": 4353,
                  "libraryName": {
                    "id": 4351,
                    "name": "FleekStrings",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 4517,
                    "src": "311:12:15"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "305:28:15",
                  "typeName": {
                    "id": 4352,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "328:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                },
                {
                  "body": {
                    "id": 4366,
                    "nodeType": "Block",
                    "src": "473:48:15",
                    "statements": [
                      {
                        "expression": {
                          "condition": {
                            "id": 4361,
                            "name": "_bool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4356,
                            "src": "490:5:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "66616c7365",
                            "id": 4363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "507:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ba9154e0baa69c78e0ca563b867df81bae9d177c4ea1452c35c84386a70f0f7a",
                              "typeString": "literal_string \"false\""
                            },
                            "value": "false"
                          },
                          "id": 4364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "490:24:15",
                          "trueExpression": {
                            "hexValue": "74727565",
                            "id": 4362,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "498:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034",
                              "typeString": "literal_string \"true\""
                            },
                            "value": "true"
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4360,
                        "id": 4365,
                        "nodeType": "Return",
                        "src": "483:31:15"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4354,
                    "nodeType": "StructuredDocumentation",
                    "src": "339:61:15",
                    "text": " @dev Converts a boolean value to a string."
                  },
                  "id": 4367,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toString",
                  "nameLocation": "414:8:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4357,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4356,
                        "mutability": "mutable",
                        "name": "_bool",
                        "nameLocation": "428:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 4367,
                        "src": "423:10:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 4355,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "423:4:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "422:12:15"
                  },
                  "returnParameters": {
                    "id": 4360,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4359,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4367,
                        "src": "458:13:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4358,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "458:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "457:15:15"
                  },
                  "scope": 4517,
                  "src": "405:116:15",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 4383,
                    "nodeType": "Block",
                    "src": "668:49:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4379,
                                  "name": "str",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4370,
                                  "src": "705:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 4378,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "699:5:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                  "typeString": "type(bytes storage pointer)"
                                },
                                "typeName": {
                                  "id": 4377,
                                  "name": "bytes",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "699:5:15",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4380,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "699:10:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 4375,
                              "name": "Base64",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1482,
                              "src": "685:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Base64_$1482_$",
                                "typeString": "type(library Base64)"
                              }
                            },
                            "id": 4376,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "encode",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1481,
                            "src": "685:13:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (bytes memory) pure returns (string memory)"
                            }
                          },
                          "id": 4381,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "685:25:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4374,
                        "id": 4382,
                        "nodeType": "Return",
                        "src": "678:32:15"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4368,
                    "nodeType": "StructuredDocumentation",
                    "src": "527:61:15",
                    "text": " @dev Converts a string to a base64 string."
                  },
                  "id": 4384,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toBase64",
                  "nameLocation": "602:8:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4371,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4370,
                        "mutability": "mutable",
                        "name": "str",
                        "nameLocation": "625:3:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 4384,
                        "src": "611:17:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4369,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "611:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "610:19:15"
                  },
                  "returnParameters": {
                    "id": 4374,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4373,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4384,
                        "src": "653:13:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4372,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "653:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "652:15:15"
                  },
                  "scope": 4517,
                  "src": "593:124:15",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 4462,
                    "nodeType": "Block",
                    "src": "954:867:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "7b",
                                  "id": 4399,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1035:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52",
                                    "typeString": "literal_string \"{\""
                                  },
                                  "value": "{"
                                },
                                {
                                  "hexValue": "226e616d65223a22",
                                  "id": 4400,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1056:10:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_51367d69f1c3baff467b722249990cf2b0f92b1e50edd5a778b81ffc7191408f",
                                    "typeString": "literal_string \"\"name\":\"\""
                                  },
                                  "value": "\"name\":\""
                                },
                                {
                                  "expression": {
                                    "id": 4401,
                                    "name": "app",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4388,
                                    "src": "1068:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                      "typeString": "struct FleekERC721.App storage pointer"
                                    }
                                  },
                                  "id": 4402,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "name",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3411,
                                  "src": "1068:8:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                },
                                {
                                  "hexValue": "222c",
                                  "id": 4403,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1078:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  "value": "\","
                                },
                                {
                                  "hexValue": "226465736372697074696f6e223a22",
                                  "id": 4404,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1100:17:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_1f63d9db42efe217d85281c4ef6267f200cbdd8e8d6fd9a3e9d557ed86a373c7",
                                    "typeString": "literal_string \"\"description\":\"\""
                                  },
                                  "value": "\"description\":\""
                                },
                                {
                                  "expression": {
                                    "id": 4405,
                                    "name": "app",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4388,
                                    "src": "1119:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                      "typeString": "struct FleekERC721.App storage pointer"
                                    }
                                  },
                                  "id": 4406,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "description",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3413,
                                  "src": "1119:15:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                },
                                {
                                  "hexValue": "222c",
                                  "id": 4407,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1136:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  "value": "\","
                                },
                                {
                                  "hexValue": "226f776e6572223a22",
                                  "id": 4408,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1158:11:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_aa5040bb3495d70c48509afbb928e8d0398ff0e9a4d595e1bd35082607eb6804",
                                    "typeString": "literal_string \"\"owner\":\"\""
                                  },
                                  "value": "\"owner\":\""
                                },
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "3230",
                                      "id": 4414,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1198:2:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_20_by_1",
                                        "typeString": "int_const 20"
                                      },
                                      "value": "20"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_20_by_1",
                                        "typeString": "int_const 20"
                                      }
                                    ],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 4411,
                                          "name": "owner",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4390,
                                          "src": "1179:5:15",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "id": 4410,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "1171:7:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint160_$",
                                          "typeString": "type(uint160)"
                                        },
                                        "typeName": {
                                          "id": 4409,
                                          "name": "uint160",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "1171:7:15",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 4412,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1171:14:15",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint160",
                                        "typeString": "uint160"
                                      }
                                    },
                                    "id": 4413,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toHexString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1732,
                                    "src": "1171:26:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4415,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1171:30:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "222c",
                                  "id": 4416,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1203:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  "value": "\","
                                },
                                {
                                  "hexValue": "2265787465726e616c5f75726c223a22",
                                  "id": 4417,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1225:18:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_153dd7a4db1a16c0bc09459a32699b07f8a0722d62a40df6d0b30c2d78048b07",
                                    "typeString": "literal_string \"\"external_url\":\"\""
                                  },
                                  "value": "\"external_url\":\""
                                },
                                {
                                  "expression": {
                                    "id": 4418,
                                    "name": "app",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4388,
                                    "src": "1245:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                      "typeString": "struct FleekERC721.App storage pointer"
                                    }
                                  },
                                  "id": 4419,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "externalURL",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3415,
                                  "src": "1245:15:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                },
                                {
                                  "hexValue": "222c",
                                  "id": 4420,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1262:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  "value": "\","
                                },
                                {
                                  "hexValue": "22696d616765223a22",
                                  "id": 4421,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1284:11:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_813a444dcf0b75d812ca8afb53e513b340ca828208f41bc16bdcde529c0ea551",
                                    "typeString": "literal_string \"\"image\":\"\""
                                  },
                                  "value": "\"image\":\""
                                },
                                {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 4424,
                                        "name": "app",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4388,
                                        "src": "1321:3:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                          "typeString": "struct FleekERC721.App storage pointer"
                                        }
                                      },
                                      "id": 4425,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "name",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3411,
                                      "src": "1321:8:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_storage",
                                        "typeString": "string storage ref"
                                      }
                                    },
                                    {
                                      "expression": {
                                        "id": 4426,
                                        "name": "app",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4388,
                                        "src": "1331:3:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                          "typeString": "struct FleekERC721.App storage pointer"
                                        }
                                      },
                                      "id": 4427,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "ENS",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3417,
                                      "src": "1331:7:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_storage",
                                        "typeString": "string storage ref"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_string_storage",
                                        "typeString": "string storage ref"
                                      },
                                      {
                                        "typeIdentifier": "t_string_storage",
                                        "typeString": "string storage ref"
                                      }
                                    ],
                                    "expression": {
                                      "id": 4422,
                                      "name": "FleekSVG",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4338,
                                      "src": "1297:8:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_FleekSVG_$4338_$",
                                        "typeString": "type(library FleekSVG)"
                                      }
                                    },
                                    "id": 4423,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "generateBase64",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 4337,
                                    "src": "1297:23:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (string memory,string memory) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4428,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1297:42:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "222c",
                                  "id": 4429,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1341:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  "value": "\","
                                },
                                {
                                  "hexValue": "2261747472696275746573223a205b",
                                  "id": 4430,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1363:17:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_a9d6c84473de3f3a866c16d436066b8d4df325a647d2d3a768ffba45df210f3c",
                                    "typeString": "literal_string \"\"attributes\": [\""
                                  },
                                  "value": "\"attributes\": ["
                                },
                                {
                                  "hexValue": "7b2274726169745f74797065223a2022454e53222c202276616c7565223a22",
                                  "id": 4431,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1402:33:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b1977dad00b1d45df31cde385892922fbf01ae8899a8104464fe62faa11870d0",
                                    "typeString": "literal_string \"{\"trait_type\": \"ENS\", \"value\":\"\""
                                  },
                                  "value": "{\"trait_type\": \"ENS\", \"value\":\""
                                },
                                {
                                  "expression": {
                                    "id": 4432,
                                    "name": "app",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4388,
                                    "src": "1437:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                      "typeString": "struct FleekERC721.App storage pointer"
                                    }
                                  },
                                  "id": 4433,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "ENS",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3417,
                                  "src": "1437:7:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                },
                                {
                                  "hexValue": "227d2c",
                                  "id": 4434,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1445:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3e7f42fdd49259e0595590a474a25222fd39a13615f6ea5ab69ecfc85ad8702f",
                                    "typeString": "literal_string \"\"},\""
                                  },
                                  "value": "\"},"
                                },
                                {
                                  "hexValue": "7b2274726169745f74797065223a2022436f6d6d69742048617368222c202276616c7565223a22",
                                  "id": 4435,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1472:41:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b73d9590f8416c8a9cef1b886e2fdf15148022d38f7665a30169401f08d28d84",
                                    "typeString": "literal_string \"{\"trait_type\": \"Commit Hash\", \"value\":\"\""
                                  },
                                  "value": "{\"trait_type\": \"Commit Hash\", \"value\":\""
                                },
                                {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 4436,
                                        "name": "app",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4388,
                                        "src": "1515:3:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                          "typeString": "struct FleekERC721.App storage pointer"
                                        }
                                      },
                                      "id": 4437,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "builds",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3424,
                                      "src": "1515:10:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Build_$3433_storage_$",
                                        "typeString": "mapping(uint256 => struct FleekERC721.Build storage ref)"
                                      }
                                    },
                                    "id": 4440,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 4438,
                                        "name": "app",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4388,
                                        "src": "1526:3:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                          "typeString": "struct FleekERC721.App storage pointer"
                                        }
                                      },
                                      "id": 4439,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "currentBuild",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3419,
                                      "src": "1526:16:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1515:28:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Build_$3433_storage",
                                      "typeString": "struct FleekERC721.Build storage ref"
                                    }
                                  },
                                  "id": 4441,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "commitHash",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3430,
                                  "src": "1515:39:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                },
                                {
                                  "hexValue": "227d2c",
                                  "id": 4442,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1555:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3e7f42fdd49259e0595590a474a25222fd39a13615f6ea5ab69ecfc85ad8702f",
                                    "typeString": "literal_string \"\"},\""
                                  },
                                  "value": "\"},"
                                },
                                {
                                  "hexValue": "7b2274726169745f74797065223a20225265706f7369746f7279222c202276616c7565223a22",
                                  "id": 4443,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1582:40:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_4b900011f9aa689cc6367c1d032b6aa02ddd903a01891d40bcc6ccf8deec8fe8",
                                    "typeString": "literal_string \"{\"trait_type\": \"Repository\", \"value\":\"\""
                                  },
                                  "value": "{\"trait_type\": \"Repository\", \"value\":\""
                                },
                                {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 4444,
                                        "name": "app",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4388,
                                        "src": "1624:3:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                          "typeString": "struct FleekERC721.App storage pointer"
                                        }
                                      },
                                      "id": 4445,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "builds",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3424,
                                      "src": "1624:10:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Build_$3433_storage_$",
                                        "typeString": "mapping(uint256 => struct FleekERC721.Build storage ref)"
                                      }
                                    },
                                    "id": 4448,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 4446,
                                        "name": "app",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4388,
                                        "src": "1635:3:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                          "typeString": "struct FleekERC721.App storage pointer"
                                        }
                                      },
                                      "id": 4447,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "currentBuild",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3419,
                                      "src": "1635:16:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1624:28:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Build_$3433_storage",
                                      "typeString": "struct FleekERC721.Build storage ref"
                                    }
                                  },
                                  "id": 4449,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "gitRepository",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3432,
                                  "src": "1624:42:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                },
                                {
                                  "hexValue": "227d2c",
                                  "id": 4450,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1667:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3e7f42fdd49259e0595590a474a25222fd39a13615f6ea5ab69ecfc85ad8702f",
                                    "typeString": "literal_string \"\"},\""
                                  },
                                  "value": "\"},"
                                },
                                {
                                  "hexValue": "7b2274726169745f74797065223a202256657273696f6e222c202276616c7565223a22",
                                  "id": 4451,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1694:37:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_28f5df53320854e06a7bf4620fddd54d632f51e992a075a608d3ffbf7301ce24",
                                    "typeString": "literal_string \"{\"trait_type\": \"Version\", \"value\":\"\""
                                  },
                                  "value": "{\"trait_type\": \"Version\", \"value\":\""
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "expression": {
                                        "id": 4452,
                                        "name": "app",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4388,
                                        "src": "1733:3:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                                          "typeString": "struct FleekERC721.App storage pointer"
                                        }
                                      },
                                      "id": 4453,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "currentBuild",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3419,
                                      "src": "1733:16:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4454,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1636,
                                    "src": "1733:25:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4455,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1733:27:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "227d",
                                  "id": 4456,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1761:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475",
                                    "typeString": "literal_string \"\"}\""
                                  },
                                  "value": "\"}"
                                },
                                {
                                  "hexValue": "5d",
                                  "id": 4457,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1783:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b36bcf9cc1d9e7f60b1f757ebd8b4694b17fc592b16065d243c43b09fde00b29",
                                    "typeString": "literal_string \"]\""
                                  },
                                  "value": "]"
                                },
                                {
                                  "hexValue": "7d",
                                  "id": 4458,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1800:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff",
                                    "typeString": "literal_string \"}\""
                                  },
                                  "value": "}"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52",
                                    "typeString": "literal_string \"{\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_51367d69f1c3baff467b722249990cf2b0f92b1e50edd5a778b81ffc7191408f",
                                    "typeString": "literal_string \"\"name\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_1f63d9db42efe217d85281c4ef6267f200cbdd8e8d6fd9a3e9d557ed86a373c7",
                                    "typeString": "literal_string \"\"description\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_aa5040bb3495d70c48509afbb928e8d0398ff0e9a4d595e1bd35082607eb6804",
                                    "typeString": "literal_string \"\"owner\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_153dd7a4db1a16c0bc09459a32699b07f8a0722d62a40df6d0b30c2d78048b07",
                                    "typeString": "literal_string \"\"external_url\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_813a444dcf0b75d812ca8afb53e513b340ca828208f41bc16bdcde529c0ea551",
                                    "typeString": "literal_string \"\"image\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb",
                                    "typeString": "literal_string \"\",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_a9d6c84473de3f3a866c16d436066b8d4df325a647d2d3a768ffba45df210f3c",
                                    "typeString": "literal_string \"\"attributes\": [\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_b1977dad00b1d45df31cde385892922fbf01ae8899a8104464fe62faa11870d0",
                                    "typeString": "literal_string \"{\"trait_type\": \"ENS\", \"value\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_3e7f42fdd49259e0595590a474a25222fd39a13615f6ea5ab69ecfc85ad8702f",
                                    "typeString": "literal_string \"\"},\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_b73d9590f8416c8a9cef1b886e2fdf15148022d38f7665a30169401f08d28d84",
                                    "typeString": "literal_string \"{\"trait_type\": \"Commit Hash\", \"value\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_3e7f42fdd49259e0595590a474a25222fd39a13615f6ea5ab69ecfc85ad8702f",
                                    "typeString": "literal_string \"\"},\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_4b900011f9aa689cc6367c1d032b6aa02ddd903a01891d40bcc6ccf8deec8fe8",
                                    "typeString": "literal_string \"{\"trait_type\": \"Repository\", \"value\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_3e7f42fdd49259e0595590a474a25222fd39a13615f6ea5ab69ecfc85ad8702f",
                                    "typeString": "literal_string \"\"},\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_28f5df53320854e06a7bf4620fddd54d632f51e992a075a608d3ffbf7301ce24",
                                    "typeString": "literal_string \"{\"trait_type\": \"Version\", \"value\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475",
                                    "typeString": "literal_string \"\"}\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_b36bcf9cc1d9e7f60b1f757ebd8b4694b17fc592b16065d243c43b09fde00b29",
                                    "typeString": "literal_string \"]\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff",
                                    "typeString": "literal_string \"}\""
                                  }
                                ],
                                "expression": {
                                  "id": 4397,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "1005:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 4398,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "1005:16:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 4459,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1005:808:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 4396,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "998:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 4395,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "998:6:15",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4460,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "998:816:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4394,
                        "id": 4461,
                        "nodeType": "Return",
                        "src": "991:823:15"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4385,
                    "nodeType": "StructuredDocumentation",
                    "src": "723:126:15",
                    "text": " @dev Converts FleekERC721.App to a JSON string.\n It requires to receive owner address as a parameter."
                  },
                  "id": 4463,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toString",
                  "nameLocation": "863:8:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4391,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4388,
                        "mutability": "mutable",
                        "name": "app",
                        "nameLocation": "896:3:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 4463,
                        "src": "872:27:15",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                          "typeString": "struct FleekERC721.App"
                        },
                        "typeName": {
                          "id": 4387,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 4386,
                            "name": "FleekERC721.App",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 3428,
                            "src": "872:15:15"
                          },
                          "referencedDeclaration": 3428,
                          "src": "872:15:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_App_$3428_storage_ptr",
                            "typeString": "struct FleekERC721.App"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4390,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "909:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 4463,
                        "src": "901:13:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4389,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "901:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "871:44:15"
                  },
                  "returnParameters": {
                    "id": 4394,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4393,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4463,
                        "src": "939:13:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4392,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "939:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "938:15:15"
                  },
                  "scope": 4517,
                  "src": "854:967:15",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 4515,
                    "nodeType": "Block",
                    "src": "1998:442:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "7b",
                                  "id": 4476,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2079:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52",
                                    "typeString": "literal_string \"{\""
                                  },
                                  "value": "{"
                                },
                                {
                                  "hexValue": "22746f6b656e4964223a",
                                  "id": 4477,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2100:12:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_56270503df6f8c82db25f3cb55d3fba406406a99b20d48637624eb77f1c35926",
                                    "typeString": "literal_string \"\"tokenId\":\""
                                  },
                                  "value": "\"tokenId\":"
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "expression": {
                                        "id": 4478,
                                        "name": "ap",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4467,
                                        "src": "2114:2:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                                          "typeString": "struct FleekERC721.AccessPoint storage pointer"
                                        }
                                      },
                                      "id": 4479,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "tokenId",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3435,
                                      "src": "2114:10:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4480,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1636,
                                    "src": "2114:19:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4481,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2114:21:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "2c",
                                  "id": 4482,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2137:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
                                    "typeString": "literal_string \",\""
                                  },
                                  "value": ","
                                },
                                {
                                  "hexValue": "2273636f7265223a",
                                  "id": 4483,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2158:10:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b26d5ea73c9fc007f8a4d49cd93805122858030cd74e936dcfd6f495d4621697",
                                    "typeString": "literal_string \"\"score\":\""
                                  },
                                  "value": "\"score\":"
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "expression": {
                                        "id": 4484,
                                        "name": "ap",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4467,
                                        "src": "2170:2:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                                          "typeString": "struct FleekERC721.AccessPoint storage pointer"
                                        }
                                      },
                                      "id": 4485,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "score",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3439,
                                      "src": "2170:8:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4486,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1636,
                                    "src": "2170:17:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4487,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2170:19:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "2c",
                                  "id": 4488,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2191:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
                                    "typeString": "literal_string \",\""
                                  },
                                  "value": ","
                                },
                                {
                                  "hexValue": "226e616d655665726966696564223a",
                                  "id": 4489,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2212:17:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_1c05ed33eac189a91dab8e7b7663ea237b878603ef6eb154fad19daa668f4c21",
                                    "typeString": "literal_string \"\"nameVerified\":\""
                                  },
                                  "value": "\"nameVerified\":"
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "expression": {
                                        "id": 4490,
                                        "name": "ap",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4467,
                                        "src": "2231:2:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                                          "typeString": "struct FleekERC721.AccessPoint storage pointer"
                                        }
                                      },
                                      "id": 4491,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "nameVerified",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3443,
                                      "src": "2231:15:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 4492,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 4367,
                                    "src": "2231:24:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_bool_$returns$_t_string_memory_ptr_$bound_to$_t_bool_$",
                                      "typeString": "function (bool) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4493,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2231:26:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "2c",
                                  "id": 4494,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2259:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
                                    "typeString": "literal_string \",\""
                                  },
                                  "value": ","
                                },
                                {
                                  "hexValue": "22636f6e74656e745665726966696564223a",
                                  "id": 4495,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2280:20:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_5ccb076fc8229e8753a03bd0afeccb0816e305edfd9c7317d72e14ab72ad809b",
                                    "typeString": "literal_string \"\"contentVerified\":\""
                                  },
                                  "value": "\"contentVerified\":"
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "expression": {
                                        "id": 4496,
                                        "name": "ap",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4467,
                                        "src": "2302:2:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                                          "typeString": "struct FleekERC721.AccessPoint storage pointer"
                                        }
                                      },
                                      "id": 4497,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "contentVerified",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3441,
                                      "src": "2302:18:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 4498,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 4367,
                                    "src": "2302:27:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_bool_$returns$_t_string_memory_ptr_$bound_to$_t_bool_$",
                                      "typeString": "function (bool) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4499,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2302:29:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "2c",
                                  "id": 4500,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2333:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
                                    "typeString": "literal_string \",\""
                                  },
                                  "value": ","
                                },
                                {
                                  "hexValue": "226f776e6572223a22",
                                  "id": 4501,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2354:11:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_aa5040bb3495d70c48509afbb928e8d0398ff0e9a4d595e1bd35082607eb6804",
                                    "typeString": "literal_string \"\"owner\":\"\""
                                  },
                                  "value": "\"owner\":\""
                                },
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "3230",
                                      "id": 4508,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2397:2:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_20_by_1",
                                        "typeString": "int_const 20"
                                      },
                                      "value": "20"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_20_by_1",
                                        "typeString": "int_const 20"
                                      }
                                    ],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "expression": {
                                            "id": 4504,
                                            "name": "ap",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4467,
                                            "src": "2375:2:15",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                                              "typeString": "struct FleekERC721.AccessPoint storage pointer"
                                            }
                                          },
                                          "id": 4505,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "owner",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3445,
                                          "src": "2375:8:15",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "id": 4503,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "2367:7:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint160_$",
                                          "typeString": "type(uint160)"
                                        },
                                        "typeName": {
                                          "id": 4502,
                                          "name": "uint160",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "2367:7:15",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 4506,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2367:17:15",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint160",
                                        "typeString": "uint160"
                                      }
                                    },
                                    "id": 4507,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toHexString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1732,
                                    "src": "2367:29:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4509,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2367:33:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "22",
                                  "id": 4510,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2402:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0",
                                    "typeString": "literal_string \"\"\""
                                  },
                                  "value": "\""
                                },
                                {
                                  "hexValue": "7d",
                                  "id": 4511,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2419:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff",
                                    "typeString": "literal_string \"}\""
                                  },
                                  "value": "}"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52",
                                    "typeString": "literal_string \"{\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_56270503df6f8c82db25f3cb55d3fba406406a99b20d48637624eb77f1c35926",
                                    "typeString": "literal_string \"\"tokenId\":\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
                                    "typeString": "literal_string \",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_b26d5ea73c9fc007f8a4d49cd93805122858030cd74e936dcfd6f495d4621697",
                                    "typeString": "literal_string \"\"score\":\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
                                    "typeString": "literal_string \",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_1c05ed33eac189a91dab8e7b7663ea237b878603ef6eb154fad19daa668f4c21",
                                    "typeString": "literal_string \"\"nameVerified\":\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
                                    "typeString": "literal_string \",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_5ccb076fc8229e8753a03bd0afeccb0816e305edfd9c7317d72e14ab72ad809b",
                                    "typeString": "literal_string \"\"contentVerified\":\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
                                    "typeString": "literal_string \",\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_aa5040bb3495d70c48509afbb928e8d0398ff0e9a4d595e1bd35082607eb6804",
                                    "typeString": "literal_string \"\"owner\":\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0",
                                    "typeString": "literal_string \"\"\""
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff",
                                    "typeString": "literal_string \"}\""
                                  }
                                ],
                                "expression": {
                                  "id": 4474,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2049:3:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 4475,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2049:16:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 4512,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2049:383:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 4473,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2042:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 4472,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2042:6:15",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4513,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2042:391:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4471,
                        "id": 4514,
                        "nodeType": "Return",
                        "src": "2035:398:15"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 4464,
                    "nodeType": "StructuredDocumentation",
                    "src": "1827:74:15",
                    "text": " @dev Converts FleekERC721.AccessPoint to a JSON string."
                  },
                  "id": 4516,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toString",
                  "nameLocation": "1915:8:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4468,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4467,
                        "mutability": "mutable",
                        "name": "ap",
                        "nameLocation": "1956:2:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 4516,
                        "src": "1924:34:15",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                          "typeString": "struct FleekERC721.AccessPoint"
                        },
                        "typeName": {
                          "id": 4466,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 4465,
                            "name": "FleekERC721.AccessPoint",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 3446,
                            "src": "1924:23:15"
                          },
                          "referencedDeclaration": 3446,
                          "src": "1924:23:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AccessPoint_$3446_storage_ptr",
                            "typeString": "struct FleekERC721.AccessPoint"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1923:36:15"
                  },
                  "returnParameters": {
                    "id": 4471,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4470,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 4516,
                        "src": "1983:13:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 4469,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1983:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1982:15:15"
                  },
                  "scope": 4517,
                  "src": "1906:534:15",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 4518,
              "src": "216:2226:15",
              "usedErrors": []
            }
          ],
          "src": "33:2410:15"
        },
        "id": 15
      }
    },
    "contracts": {
      "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
        "ERC721": {
          "abi": [
            {
              "inputs": [
                { "internalType": "string", "name": "name_", "type": "string" },
                {
                  "internalType": "string",
                  "name": "symbol_",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                { "internalType": "uint256", "name": "", "type": "uint256" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                { "internalType": "address", "name": "", "type": "address" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                { "internalType": "address", "name": "", "type": "address" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                { "internalType": "bool", "name": "approved", "type": "bool" }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "See {IERC721-approve}."
              },
              "balanceOf(address)": { "details": "See {IERC721-balanceOf}." },
              "constructor": {
                "details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."
              },
              "getApproved(uint256)": {
                "details": "See {IERC721-getApproved}."
              },
              "isApprovedForAll(address,address)": {
                "details": "See {IERC721-isApprovedForAll}."
              },
              "name()": { "details": "See {IERC721Metadata-name}." },
              "ownerOf(uint256)": { "details": "See {IERC721-ownerOf}." },
              "safeTransferFrom(address,address,uint256)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "setApprovalForAll(address,bool)": {
                "details": "See {IERC721-setApprovalForAll}."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              },
              "symbol()": { "details": "See {IERC721Metadata-symbol}." },
              "tokenURI(uint256)": {
                "details": "See {IERC721Metadata-tokenURI}."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC721-transferFrom}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_string_fromMemory": {
                  "entryPoint": 494,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 441,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage_998": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 723,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "clean_up_bytearray_end_slots_string_storage_1902": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_byte_array_to_storage_from_string_to_string": {
                  "entryPoint": 903,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "extract_byte_array_length": {
                  "entryPoint": 660,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 418,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080604052346200019d57620014ab803803806200001d81620001b9565b9283398101604082820312620001965781516001600160401b0391908281116200018d57816200004f918501620001ee565b926020918282015184811162000182576200006b9201620001ee565b91835190811162000172575b60009162000091826200008b855462000294565b620002d3565b80601f8311600114620000e457508190620000c8958492620000d8575b50508160011b916000199060031b1c191617905562000387565b60405161102190816200048a8239f35b015190503880620000ae565b600080529194601f1986167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639385905b82821062000159575050916001939187620000c89894106200013f575b505050811b01905562000387565b015160001960f88460031b161c1916905538808062000131565b8060018697829497870151815501960194019062000114565b6200017c620001a2565b62000077565b505050505050600080fd5b50505050600080fd5b5050600080fd5b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620001df57604052565b620001e9620001a2565b604052565b81601f820112156200028c578051906001600160401b0382116200027c575b60209062000224601f8401601f19168301620001b9565b93838552828483010111620002725782906000905b8383831062000259575050116200024f57505090565b6000918301015290565b8193508281939201015182828801015201839162000239565b5050505050600080fd5b62000286620001a2565b6200020d565b505050600080fd5b90600182811c92168015620002c8575b6020831014620002b057565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691620002a4565b601f8111620002e0575050565b60009081805260208220906020601f850160051c8301941062000320575b601f0160051c01915b8281106200031457505050565b81815560010162000307565b9092508290620002fe565b90601f821162000339575050565b60019160009083825260208220906020601f850160051c830194106200037c575b601f0160051c01915b828110620003715750505050565b818155830162000363565b90925082906200035a565b80519091906001600160401b03811162000479575b600190620003b681620003b0845462000294565b6200032b565b602080601f8311600114620003f4575081929394600092620003e8575b5050600019600383901b1c191690821b179055565b015190503880620003d3565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b88821062000461575050838596971062000447575b505050811b019055565b015160001960f88460031b161c191690553880806200043d565b80878596829496860151815501950193019062000428565b62000483620001a2565b6200039c56fe6040608081526004361015610015575b50600080fd5b600090813560e01c806301ffc9a71461027a57806306fdde031461025e578063081812fc14610242578063095ea7b31461022a57806323b872dd1461021257806342842e0e146101fa5780636352211e146101c557806370a082311461019a57806395d89b411461017e578063a22cb46514610166578063b88d4fde14610148578063c87b56dd146101215763e985e9c5146100b1575061000f565b3461011d5761011991506101086101016100ea6100cd3661056e565b6001600160a01b0390911660009081526005602052604090209091565b9060018060a01b0316600052602052604060002090565b5460ff1690565b905190151581529081906020820190565b0390f35b5080fd5b503461011d57610119915061013d61013836610349565b61087d565b905191829182610338565b503461011d5761016361015a366104d7565b92919091610b47565b51f35b503461011d5761016361017836610419565b906109f2565b503461011d576101199150610192366102d9565b61013d6107c0565b503461011d5761011991506101b66101b1366103f6565b6105e5565b90519081529081906020820190565b503461011d5761011991506101e16101dc36610349565b6106ab565b90516001600160a01b0390911681529081906020820190565b503461011d5761016361020c366103b7565b91610b2f565b503461011d57610163610224366103b7565b91610b12565b503461011d5761016361023c36610390565b906108a8565b503461011d5761011991506101e161025936610349565b6109ce565b503461011d576101199150610272366102d9565b61013d6106ce565b5050346102a85750607f196102a3610299610294366102be565b6105a1565b151560805260a090565b016080f35b80fd5b6001600160e01b03198116141561000f57565b602090600319011261000f576004356102d6816102ab565b90565b600090600319011261000f57565b91908251928382526000905b848210610320575092806020939411610313575b601f01601f1916010190565b6000838284010152610307565b906020908180828501015190828601015201906102f3565b9060206102d69281815201906102e7565b602090600319011261000f5760043590565b600435906001600160a01b03821682141561037257565b5050600080fd5b602435906001600160a01b03821682141561037257565b604090600319011261000f576004356001600160a01b038116811415610372579060243590565b606090600319011261000f576001600160a01b03906004358281168114156103ee57916024359081168114156103ee579060443590565b505050600080fd5b602090600319011261000f576004356001600160a01b0381168114156103725790565b604090600319011261000f576004356001600160a01b03811681141561037257906024358015158114156103ee5790565b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761047d57604052565b61048561044a565b604052565b90601f8019910116810190811067ffffffffffffffff82111761047d57604052565b60209067ffffffffffffffff81116104ca575b601f01601f19160190565b6104d261044a565b6104bf565b906080600319830112610372576104ec61035b565b916104f5610379565b916044359160643567ffffffffffffffff8111610563578160238201121561056357806004013590610526826104ac565b92610534604051948561048a565b828452602483830101116105575781600092602460209301838601378301015290565b50505050505050600080fd5b505050505050600080fd5b604090600319011261000f576001600160a01b03906004358281168114156103ee57916024359081168114156103ee5790565b63ffffffff60e01b166380ac58cd60e01b81149081156105d4575b81156105c6575090565b6301ffc9a760e01b14919050565b635b5e139f60e01b811491506105bc565b6001600160a01b0316801561060557600052600360205260406000205490565b505060405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b1561066557565b5060405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b03166102d681151561065e565b604051906000805490600182811c928181169182156107b6575b602091828610841461079a578588528794936020860193929181156107825750600114610721575b50505061071f9250038361048a565b565b92509361074f600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390565b946000935b82851061076c5750505061071f935001388080610710565b8654858501529586019588955093810193610754565b60ff191684525061071f955050019050388080610710565b5050634e487b7160e01b83525050602260045260249350915050fd5b93607f16936106e8565b60405190600060019081549182811c92818116918215610873575b602091828610841461079a5785885287949360208601939291811561078257506001146108115750505061071f9250038361048a565b92509361084060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690565b946000935b82851061085d5750505061071f935001388080610710565b8654858501529586019588955093810193610845565b93607f16936107db565b61088690610e8c565b600060405161089481610461565b526040516108a181610461565b6000815290565b906108b2816106ab565b6001600160a01b03818116908416811461097b57331490811561094d575b50156108df5761071f91610e26565b505060405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260849150fd5b6001600160a01b0316600090815260056020526040902060ff91506109739033906100ea565b5416386108d0565b5050505050608460405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b6109d781610e8c565b6000908152600460205260409020546001600160a01b031690565b6001600160a01b0381169190338314610a67573360009081526005602090815260408083206001600160a01b039094168352929052209015159060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3565b50505050606460405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b15610ab657565b5060405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b9061071f9291610b2a610b258433610be3565b610aaf565b610cb6565b909161071f9260405192610b4284610461565b600084525b90610b6b939291610b5b610b258433610be3565b610b66838383610cb6565b610f25565b15610b7257565b5060405162461bcd60e51b815280610b8c60048201610b90565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6001600160a01b0380610bf5846106ab565b169281831692848414948515610c2b575b50508315610c15575b50505090565b610c21919293506109ce565b1614388080610c0f565b60009081526005602090815260408083206001600160a01b03949094168352929052205460ff1693503880610c06565b15610c6257565b5060405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b610cda90610cc3846106ab565b6001600160a01b0382811693909182168414610c5b565b8316928315610dd057610d4d610da792610d0c85610d06610cfa8a6106ab565b6001600160a01b031690565b14610c5b565b610d33610d23886000526004602052604060002090565b80546001600160a01b0319169055565b6001600160a01b0316600090815260036020526040902090565b80546000190190556001600160a01b038116600090815260036020526040902060018154019055610d88856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b505050505050608460405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152fd5b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380610e5f846106ab565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b60009081526002602052604090205461071f906001600160a01b0316151561065e565b9081602091031261037257516102d6816102ab565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526102d6929101906102e7565b3d15610f20573d90610f06826104ac565b91610f14604051938461048a565b82523d6000602084013e565b606090565b92909190823b15610fd457610f58926020926000604051809681958294630a85bd0160e11b9a8b85523360048601610ec4565b03926001600160a01b03165af160009181610fb4575b50610fa657505050610f7e610ef5565b80519081610fa157505060405162461bcd60e51b815280610b8c60048201610b90565b602001fd5b6001600160e01b0319161490565b610fcd919250610fc43d8261048a565b3d810190610eaf565b9038610f6e565b5050505060019056fea36469706673582212207341beeb116ac88653092f156dc916cbdfba989da77948e9da9d95813dac835e6c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x19D JUMPI PUSH3 0x14AB DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x1B9 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP3 DUP3 SUB SLT PUSH3 0x196 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 SWAP1 DUP3 DUP2 GT PUSH3 0x18D JUMPI DUP2 PUSH3 0x4F SWAP2 DUP6 ADD PUSH3 0x1EE JUMP JUMPDEST SWAP3 PUSH1 0x20 SWAP2 DUP3 DUP3 ADD MLOAD DUP5 DUP2 GT PUSH3 0x182 JUMPI PUSH3 0x6B SWAP3 ADD PUSH3 0x1EE JUMP JUMPDEST SWAP2 DUP4 MLOAD SWAP1 DUP2 GT PUSH3 0x172 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH3 0x91 DUP3 PUSH3 0x8B DUP6 SLOAD PUSH3 0x294 JUMP JUMPDEST PUSH3 0x2D3 JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH3 0xE4 JUMPI POP DUP2 SWAP1 PUSH3 0xC8 SWAP6 DUP5 SWAP3 PUSH3 0xD8 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE PUSH3 0x387 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1021 SWAP1 DUP2 PUSH3 0x48A DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xAE JUMP JUMPDEST PUSH1 0x0 DUP1 MSTORE SWAP2 SWAP5 PUSH1 0x1F NOT DUP7 AND PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP4 DUP6 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH3 0x159 JUMPI POP POP SWAP2 PUSH1 0x1 SWAP4 SWAP2 DUP8 PUSH3 0xC8 SWAP9 SWAP5 LT PUSH3 0x13F JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x387 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x131 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP7 SWAP8 DUP3 SWAP5 SWAP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP7 ADD SWAP5 ADD SWAP1 PUSH3 0x114 JUMP JUMPDEST PUSH3 0x17C PUSH3 0x1A2 JUMP JUMPDEST PUSH3 0x77 JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x1DF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH3 0x1E9 PUSH3 0x1A2 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH3 0x28C JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH3 0x27C JUMPI JUMPDEST PUSH1 0x20 SWAP1 PUSH3 0x224 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x1B9 JUMP JUMPDEST SWAP4 DUP4 DUP6 MSTORE DUP3 DUP5 DUP4 ADD ADD GT PUSH3 0x272 JUMPI DUP3 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP4 DUP4 LT PUSH3 0x259 JUMPI POP POP GT PUSH3 0x24F JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 SWAP4 POP DUP3 DUP2 SWAP4 SWAP3 ADD ADD MLOAD DUP3 DUP3 DUP9 ADD ADD MSTORE ADD DUP4 SWAP2 PUSH3 0x239 JUMP JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x286 PUSH3 0x1A2 JUMP JUMPDEST PUSH3 0x20D JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH3 0x2C8 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH3 0x2B0 JUMPI JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH3 0x2A4 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH3 0x2E0 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 DUP1 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH3 0x320 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x314 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x307 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH3 0x2FE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP3 GT PUSH3 0x339 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH3 0x37C JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x371 JUMPI POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE DUP4 ADD PUSH3 0x363 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH3 0x35A JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x479 JUMPI JUMPDEST PUSH1 0x1 SWAP1 PUSH3 0x3B6 DUP2 PUSH3 0x3B0 DUP5 SLOAD PUSH3 0x294 JUMP JUMPDEST PUSH3 0x32B JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH3 0x3F4 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH3 0x3E8 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x3D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x1F NOT DUP4 AND SWAP6 SWAP1 SWAP2 SWAP1 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH3 0x461 JUMPI POP POP DUP4 DUP6 SWAP7 SWAP8 LT PUSH3 0x447 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x43D JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH3 0x428 JUMP JUMPDEST PUSH3 0x483 PUSH3 0x1A2 JUMP JUMPDEST PUSH3 0x39C JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x121 JUMPI PUSH4 0xE985E9C5 EQ PUSH2 0xB1 JUMPI POP PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x108 PUSH2 0x101 PUSH2 0xEA PUSH2 0xCD CALLDATASIZE PUSH2 0x56E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x13D PUSH2 0x138 CALLDATASIZE PUSH2 0x349 JUMP JUMPDEST PUSH2 0x87D JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x338 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x15A CALLDATASIZE PUSH2 0x4D7 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0xB47 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x178 CALLDATASIZE PUSH2 0x419 JUMP JUMPDEST SWAP1 PUSH2 0x9F2 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x192 CALLDATASIZE PUSH2 0x2D9 JUMP JUMPDEST PUSH2 0x13D PUSH2 0x7C0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x1B6 PUSH2 0x1B1 CALLDATASIZE PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0x5E5 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x1E1 PUSH2 0x1DC CALLDATASIZE PUSH2 0x349 JUMP JUMPDEST PUSH2 0x6AB JUMP JUMPDEST SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x20C CALLDATASIZE PUSH2 0x3B7 JUMP JUMPDEST SWAP2 PUSH2 0xB2F JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x224 CALLDATASIZE PUSH2 0x3B7 JUMP JUMPDEST SWAP2 PUSH2 0xB12 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x23C CALLDATASIZE PUSH2 0x390 JUMP JUMPDEST SWAP1 PUSH2 0x8A8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x1E1 PUSH2 0x259 CALLDATASIZE PUSH2 0x349 JUMP JUMPDEST PUSH2 0x9CE JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x272 CALLDATASIZE PUSH2 0x2D9 JUMP JUMPDEST PUSH2 0x13D PUSH2 0x6CE JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x2A8 JUMPI POP PUSH1 0x7F NOT PUSH2 0x2A3 PUSH2 0x299 PUSH2 0x294 CALLDATASIZE PUSH2 0x2BE JUMP JUMPDEST PUSH2 0x5A1 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x80 MSTORE PUSH1 0xA0 SWAP1 JUMP JUMPDEST ADD PUSH1 0x80 RETURN JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND EQ ISZERO PUSH2 0xF JUMPI JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2D6 DUP2 PUSH2 0x2AB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 SWAP1 JUMPDEST DUP5 DUP3 LT PUSH2 0x320 JUMPI POP SWAP3 DUP1 PUSH1 0x20 SWAP4 SWAP5 GT PUSH2 0x313 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH2 0x307 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP1 DUP3 DUP6 ADD ADD MLOAD SWAP1 DUP3 DUP7 ADD ADD MSTORE ADD SWAP1 PUSH2 0x2F3 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x2D6 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x2E7 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 EQ ISZERO PUSH2 0x372 JUMPI JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 EQ ISZERO PUSH2 0x372 JUMPI JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x372 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x372 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x372 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x47D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x485 PUSH2 0x44A JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x47D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4CA JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D2 PUSH2 0x44A JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST SWAP1 PUSH1 0x80 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x372 JUMPI PUSH2 0x4EC PUSH2 0x35B JUMP JUMPDEST SWAP2 PUSH2 0x4F5 PUSH2 0x379 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x563 JUMPI DUP2 PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x563 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x526 DUP3 PUSH2 0x4AC JUMP JUMPDEST SWAP3 PUSH2 0x534 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x48A JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x24 DUP4 DUP4 ADD ADD GT PUSH2 0x557 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x5D4 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x5C6 JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x5B5E139F PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x605 JUMPI PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x665 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2D6 DUP2 ISZERO ISZERO PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 DUP2 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x7B6 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0x79A JUMPI DUP6 DUP9 MSTORE DUP8 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x782 JUMPI POP PUSH1 0x1 EQ PUSH2 0x721 JUMPI JUMPDEST POP POP POP PUSH2 0x71F SWAP3 POP SUB DUP4 PUSH2 0x48A JUMP JUMPDEST JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0x74F PUSH1 0x0 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x76C JUMPI POP POP POP PUSH2 0x71F SWAP4 POP ADD CODESIZE DUP1 DUP1 PUSH2 0x710 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0x754 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 MSTORE POP PUSH2 0x71F SWAP6 POP POP ADD SWAP1 POP CODESIZE DUP1 DUP1 PUSH2 0x710 JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE POP POP PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP4 POP SWAP2 POP POP REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x6E8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 PUSH1 0x1 SWAP1 DUP2 SLOAD SWAP2 DUP3 DUP2 SHR SWAP3 DUP2 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x873 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0x79A JUMPI DUP6 DUP9 MSTORE DUP8 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x782 JUMPI POP PUSH1 0x1 EQ PUSH2 0x811 JUMPI POP POP POP PUSH2 0x71F SWAP3 POP SUB DUP4 PUSH2 0x48A JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0x840 PUSH1 0x1 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x85D JUMPI POP POP POP PUSH2 0x71F SWAP4 POP ADD CODESIZE DUP1 DUP1 PUSH2 0x710 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0x845 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x7DB JUMP JUMPDEST PUSH2 0x886 SWAP1 PUSH2 0xE8C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x894 DUP2 PUSH2 0x461 JUMP JUMPDEST MSTORE PUSH1 0x40 MLOAD PUSH2 0x8A1 DUP2 PUSH2 0x461 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x8B2 DUP2 PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP1 DUP5 AND DUP2 EQ PUSH2 0x97B JUMPI CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x94D JUMPI JUMPDEST POP ISZERO PUSH2 0x8DF JUMPI PUSH2 0x71F SWAP2 PUSH2 0xE26 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP2 POP REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0xFF SWAP2 POP PUSH2 0x973 SWAP1 CALLER SWAP1 PUSH2 0xEA JUMP JUMPDEST SLOAD AND CODESIZE PUSH2 0x8D0 JUMP JUMPDEST POP POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x9D7 DUP2 PUSH2 0xE8C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 SWAP1 CALLER DUP4 EQ PUSH2 0xA67 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SWAP1 ISZERO ISZERO SWAP1 PUSH1 0xFF NOT DUP2 SLOAD AND PUSH1 0xFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 JUMP JUMPDEST POP POP POP POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0xAB6 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x71F SWAP3 SWAP2 PUSH2 0xB2A PUSH2 0xB25 DUP5 CALLER PUSH2 0xBE3 JUMP JUMPDEST PUSH2 0xAAF JUMP JUMPDEST PUSH2 0xCB6 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x71F SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH2 0xB42 DUP5 PUSH2 0x461 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE JUMPDEST SWAP1 PUSH2 0xB6B SWAP4 SWAP3 SWAP2 PUSH2 0xB5B PUSH2 0xB25 DUP5 CALLER PUSH2 0xBE3 JUMP JUMPDEST PUSH2 0xB66 DUP4 DUP4 DUP4 PUSH2 0xCB6 JUMP JUMPDEST PUSH2 0xF25 JUMP JUMPDEST ISZERO PUSH2 0xB72 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB8C PUSH1 0x4 DUP3 ADD PUSH2 0xB90 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0xBF5 DUP5 PUSH2 0x6AB JUMP JUMPDEST AND SWAP3 DUP2 DUP4 AND SWAP3 DUP5 DUP5 EQ SWAP5 DUP6 ISZERO PUSH2 0xC2B JUMPI JUMPDEST POP POP DUP4 ISZERO PUSH2 0xC15 JUMPI JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xC21 SWAP2 SWAP3 SWAP4 POP PUSH2 0x9CE JUMP JUMPDEST AND EQ CODESIZE DUP1 DUP1 PUSH2 0xC0F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP4 POP CODESIZE DUP1 PUSH2 0xC06 JUMP JUMPDEST ISZERO PUSH2 0xC62 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0xCDA SWAP1 PUSH2 0xCC3 DUP5 PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP4 SWAP1 SWAP2 DUP3 AND DUP5 EQ PUSH2 0xC5B JUMP JUMPDEST DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0xDD0 JUMPI PUSH2 0xD4D PUSH2 0xDA7 SWAP3 PUSH2 0xD0C DUP6 PUSH2 0xD06 PUSH2 0xCFA DUP11 PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST EQ PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xD33 PUSH2 0xD23 DUP9 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE PUSH2 0xD88 DUP6 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0xE5F DUP5 PUSH2 0x6AB JUMP JUMPDEST AND SWAP2 AND SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x71F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x65E JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x372 JUMPI MLOAD PUSH2 0x2D6 DUP2 PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x2D6 SWAP3 SWAP2 ADD SWAP1 PUSH2 0x2E7 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xF20 JUMPI RETURNDATASIZE SWAP1 PUSH2 0xF06 DUP3 PUSH2 0x4AC JUMP JUMPDEST SWAP2 PUSH2 0xF14 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x48A JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0xFD4 JUMPI PUSH2 0xF58 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP11 DUP12 DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD PUSH2 0xEC4 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xFB4 JUMPI JUMPDEST POP PUSH2 0xFA6 JUMPI POP POP POP PUSH2 0xF7E PUSH2 0xEF5 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 PUSH2 0xFA1 JUMPI POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB8C PUSH1 0x4 DUP3 ADD PUSH2 0xB90 JUMP JUMPDEST PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ SWAP1 JUMP JUMPDEST PUSH2 0xFCD SWAP2 SWAP3 POP PUSH2 0xFC4 RETURNDATASIZE DUP3 PUSH2 0x48A JUMP JUMPDEST RETURNDATASIZE DUP2 ADD SWAP1 PUSH2 0xEAF JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xF6E JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x41BEEB116AC88653092F156DC916CBDFBA989DA7 PUSH26 0x48E9DA9D95813DAC835E6C6578706572696D656E74616CF56473 PUSH16 0x6C634300080C00410000000000000000 ",
              "sourceMap": "628:16327:0:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;1456:13:0;628:16327;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;1456:13;628:16327;;;;-1:-1:-1;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;-1:-1:-1;628:16327:0;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;628:16327:0;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;-1:-1:-1;;628:16327:0;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;628:16327:0;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;1456:13;628:16327;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;;;:::o;:::-;1479:17;-1:-1:-1;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;628:16327:0;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;628:16327:0;;;;;1479:17;628:16327;;-1:-1:-1;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 729,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 889,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_decode_address_7578": {
                  "entryPoint": 859,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_decode_addresst_address": {
                  "entryPoint": 1390,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 951,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 3
                },
                "abi_decode_addresst_addresst_uint256t_bytes": {
                  "entryPoint": 1239,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 4
                },
                "abi_decode_addresst_bool": {
                  "entryPoint": 1049,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_addresst_uint256": {
                  "entryPoint": 912,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_bytes4": {
                  "entryPoint": 702,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_bytes4_fromMemory": {
                  "entryPoint": 3759,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 1014,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 841,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address_address_uint256_bytes": {
                  "entryPoint": 3780,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool_4683": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 824,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_to_string": {
                  "entryPoint": 743,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1e76": {
                  "entryPoint": 2960,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 1196,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage_7581": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string": {
                  "entryPoint": 1742,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string_4693": {
                  "entryPoint": 1984,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 3829,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 1162,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "finalize_allocation_7582": {
                  "entryPoint": 1121,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun__approve": {
                  "entryPoint": 3622,
                  "id": 776,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_approve": {
                  "entryPoint": 2216,
                  "id": 256,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_balanceOf": {
                  "entryPoint": 1509,
                  "id": 117,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_checkOnERC721Received": {
                  "entryPoint": 3877,
                  "id": 884,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "fun_getApproved": {
                  "entryPoint": 2510,
                  "id": 274,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_isApprovedOrOwner": {
                  "entryPoint": 3043,
                  "id": 479,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_ownerOf": {
                  "entryPoint": 1707,
                  "id": 145,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireMinted": {
                  "entryPoint": 3724,
                  "id": 822,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_safeTransferFrom": {
                  "entryPoint": 2863,
                  "id": 355,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_safeTransferFrom_385": {
                  "entryPoint": 2887,
                  "id": 385,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_setApprovalForAll": {
                  "entryPoint": 2546,
                  "id": 291,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_supportsInterface": {
                  "entryPoint": 1441,
                  "id": 93,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_tokenURI": {
                  "entryPoint": 2173,
                  "id": 204,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_transfer": {
                  "entryPoint": 3254,
                  "id": 752,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_transferFrom": {
                  "entryPoint": 2834,
                  "id": 336,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_4698": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_4714": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_4712": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 1098,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "read_from_storage_split_offset_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_12a8": {
                  "entryPoint": 2735,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_277f": {
                  "entryPoint": 3163,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_b08d": {
                  "entryPoint": 1630,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_storage_value_address_to_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 683,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x121 JUMPI PUSH4 0xE985E9C5 EQ PUSH2 0xB1 JUMPI POP PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x108 PUSH2 0x101 PUSH2 0xEA PUSH2 0xCD CALLDATASIZE PUSH2 0x56E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x13D PUSH2 0x138 CALLDATASIZE PUSH2 0x349 JUMP JUMPDEST PUSH2 0x87D JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x338 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x15A CALLDATASIZE PUSH2 0x4D7 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0xB47 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x178 CALLDATASIZE PUSH2 0x419 JUMP JUMPDEST SWAP1 PUSH2 0x9F2 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x192 CALLDATASIZE PUSH2 0x2D9 JUMP JUMPDEST PUSH2 0x13D PUSH2 0x7C0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x1B6 PUSH2 0x1B1 CALLDATASIZE PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0x5E5 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x1E1 PUSH2 0x1DC CALLDATASIZE PUSH2 0x349 JUMP JUMPDEST PUSH2 0x6AB JUMP JUMPDEST SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x20C CALLDATASIZE PUSH2 0x3B7 JUMP JUMPDEST SWAP2 PUSH2 0xB2F JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x224 CALLDATASIZE PUSH2 0x3B7 JUMP JUMPDEST SWAP2 PUSH2 0xB12 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x163 PUSH2 0x23C CALLDATASIZE PUSH2 0x390 JUMP JUMPDEST SWAP1 PUSH2 0x8A8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x1E1 PUSH2 0x259 CALLDATASIZE PUSH2 0x349 JUMP JUMPDEST PUSH2 0x9CE JUMP JUMPDEST POP CALLVALUE PUSH2 0x11D JUMPI PUSH2 0x119 SWAP2 POP PUSH2 0x272 CALLDATASIZE PUSH2 0x2D9 JUMP JUMPDEST PUSH2 0x13D PUSH2 0x6CE JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x2A8 JUMPI POP PUSH1 0x7F NOT PUSH2 0x2A3 PUSH2 0x299 PUSH2 0x294 CALLDATASIZE PUSH2 0x2BE JUMP JUMPDEST PUSH2 0x5A1 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x80 MSTORE PUSH1 0xA0 SWAP1 JUMP JUMPDEST ADD PUSH1 0x80 RETURN JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND EQ ISZERO PUSH2 0xF JUMPI JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2D6 DUP2 PUSH2 0x2AB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 SWAP1 JUMPDEST DUP5 DUP3 LT PUSH2 0x320 JUMPI POP SWAP3 DUP1 PUSH1 0x20 SWAP4 SWAP5 GT PUSH2 0x313 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH2 0x307 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP1 DUP3 DUP6 ADD ADD MLOAD SWAP1 DUP3 DUP7 ADD ADD MSTORE ADD SWAP1 PUSH2 0x2F3 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x2D6 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x2E7 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 EQ ISZERO PUSH2 0x372 JUMPI JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 EQ ISZERO PUSH2 0x372 JUMPI JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x372 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x372 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x372 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x47D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x485 PUSH2 0x44A JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x47D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4CA JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D2 PUSH2 0x44A JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST SWAP1 PUSH1 0x80 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x372 JUMPI PUSH2 0x4EC PUSH2 0x35B JUMP JUMPDEST SWAP2 PUSH2 0x4F5 PUSH2 0x379 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x563 JUMPI DUP2 PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x563 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x526 DUP3 PUSH2 0x4AC JUMP JUMPDEST SWAP3 PUSH2 0x534 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x48A JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x24 DUP4 DUP4 ADD ADD GT PUSH2 0x557 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x3EE JUMPI SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x5D4 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x5C6 JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x5B5E139F PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x605 JUMPI PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x665 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2D6 DUP2 ISZERO ISZERO PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 DUP2 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x7B6 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0x79A JUMPI DUP6 DUP9 MSTORE DUP8 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x782 JUMPI POP PUSH1 0x1 EQ PUSH2 0x721 JUMPI JUMPDEST POP POP POP PUSH2 0x71F SWAP3 POP SUB DUP4 PUSH2 0x48A JUMP JUMPDEST JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0x74F PUSH1 0x0 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x76C JUMPI POP POP POP PUSH2 0x71F SWAP4 POP ADD CODESIZE DUP1 DUP1 PUSH2 0x710 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0x754 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 MSTORE POP PUSH2 0x71F SWAP6 POP POP ADD SWAP1 POP CODESIZE DUP1 DUP1 PUSH2 0x710 JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE POP POP PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP4 POP SWAP2 POP POP REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x6E8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 PUSH1 0x1 SWAP1 DUP2 SLOAD SWAP2 DUP3 DUP2 SHR SWAP3 DUP2 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x873 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0x79A JUMPI DUP6 DUP9 MSTORE DUP8 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x782 JUMPI POP PUSH1 0x1 EQ PUSH2 0x811 JUMPI POP POP POP PUSH2 0x71F SWAP3 POP SUB DUP4 PUSH2 0x48A JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0x840 PUSH1 0x1 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x85D JUMPI POP POP POP PUSH2 0x71F SWAP4 POP ADD CODESIZE DUP1 DUP1 PUSH2 0x710 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0x845 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x7DB JUMP JUMPDEST PUSH2 0x886 SWAP1 PUSH2 0xE8C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x894 DUP2 PUSH2 0x461 JUMP JUMPDEST MSTORE PUSH1 0x40 MLOAD PUSH2 0x8A1 DUP2 PUSH2 0x461 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x8B2 DUP2 PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP1 DUP5 AND DUP2 EQ PUSH2 0x97B JUMPI CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x94D JUMPI JUMPDEST POP ISZERO PUSH2 0x8DF JUMPI PUSH2 0x71F SWAP2 PUSH2 0xE26 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP2 POP REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0xFF SWAP2 POP PUSH2 0x973 SWAP1 CALLER SWAP1 PUSH2 0xEA JUMP JUMPDEST SLOAD AND CODESIZE PUSH2 0x8D0 JUMP JUMPDEST POP POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x9D7 DUP2 PUSH2 0xE8C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 SWAP1 CALLER DUP4 EQ PUSH2 0xA67 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SWAP1 ISZERO ISZERO SWAP1 PUSH1 0xFF NOT DUP2 SLOAD AND PUSH1 0xFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 JUMP JUMPDEST POP POP POP POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0xAB6 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x71F SWAP3 SWAP2 PUSH2 0xB2A PUSH2 0xB25 DUP5 CALLER PUSH2 0xBE3 JUMP JUMPDEST PUSH2 0xAAF JUMP JUMPDEST PUSH2 0xCB6 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x71F SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH2 0xB42 DUP5 PUSH2 0x461 JUMP JUMPDEST PUSH1 0x0 DUP5 MSTORE JUMPDEST SWAP1 PUSH2 0xB6B SWAP4 SWAP3 SWAP2 PUSH2 0xB5B PUSH2 0xB25 DUP5 CALLER PUSH2 0xBE3 JUMP JUMPDEST PUSH2 0xB66 DUP4 DUP4 DUP4 PUSH2 0xCB6 JUMP JUMPDEST PUSH2 0xF25 JUMP JUMPDEST ISZERO PUSH2 0xB72 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB8C PUSH1 0x4 DUP3 ADD PUSH2 0xB90 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0xBF5 DUP5 PUSH2 0x6AB JUMP JUMPDEST AND SWAP3 DUP2 DUP4 AND SWAP3 DUP5 DUP5 EQ SWAP5 DUP6 ISZERO PUSH2 0xC2B JUMPI JUMPDEST POP POP DUP4 ISZERO PUSH2 0xC15 JUMPI JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xC21 SWAP2 SWAP3 SWAP4 POP PUSH2 0x9CE JUMP JUMPDEST AND EQ CODESIZE DUP1 DUP1 PUSH2 0xC0F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP4 POP CODESIZE DUP1 PUSH2 0xC06 JUMP JUMPDEST ISZERO PUSH2 0xC62 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0xCDA SWAP1 PUSH2 0xCC3 DUP5 PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP4 SWAP1 SWAP2 DUP3 AND DUP5 EQ PUSH2 0xC5B JUMP JUMPDEST DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0xDD0 JUMPI PUSH2 0xD4D PUSH2 0xDA7 SWAP3 PUSH2 0xD0C DUP6 PUSH2 0xD06 PUSH2 0xCFA DUP11 PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST EQ PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xD33 PUSH2 0xD23 DUP9 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE PUSH2 0xD88 DUP6 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0xE5F DUP5 PUSH2 0x6AB JUMP JUMPDEST AND SWAP2 AND SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x71F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x65E JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x372 JUMPI MLOAD PUSH2 0x2D6 DUP2 PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x2D6 SWAP3 SWAP2 ADD SWAP1 PUSH2 0x2E7 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xF20 JUMPI RETURNDATASIZE SWAP1 PUSH2 0xF06 DUP3 PUSH2 0x4AC JUMP JUMPDEST SWAP2 PUSH2 0xF14 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x48A JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0xFD4 JUMPI PUSH2 0xF58 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP11 DUP12 DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD PUSH2 0xEC4 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xFB4 JUMPI JUMPDEST POP PUSH2 0xFA6 JUMPI POP POP POP PUSH2 0xF7E PUSH2 0xEF5 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 PUSH2 0xFA1 JUMPI POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB8C PUSH1 0x4 DUP3 ADD PUSH2 0xB90 JUMP JUMPDEST PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ SWAP1 JUMP JUMPDEST PUSH2 0xFCD SWAP2 SWAP3 POP PUSH2 0xFC4 RETURNDATASIZE DUP3 PUSH2 0x48A JUMP JUMPDEST RETURNDATASIZE DUP2 ADD SWAP1 PUSH2 0xEAF JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xF6E JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x41BEEB116AC88653092F156DC916CBDFBA989DA7 PUSH26 0x48E9DA9D95813DAC835E6C6578706572696D656E74616CF56473 PUSH16 0x6C634300080C00410000000000000000 ",
              "sourceMap": "628:16327:0:-:0;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4508:35;;:25;628:16327;;;:::i;:::-;-1:-1:-1;;;;;628:16327:0;;;;;;;4508:18;628:16327;;;;;4508:25;;628:16327;4508:25;628:16327;;;;;;;;;;;;;;;;4508:35;628:16327;;;;;4508:35;628:16327;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;;628:16327:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;628:16327:0;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;628:16327:0;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;628:16327:0;;;:::o;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;628:16327:0;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;:::o;1570:300::-;628:16327;;;;1722:25;;;1707:40;;:104;;;;;1570:300;1707:156;;;;1688:175;1570:300;:::o;1707:156::-;-1:-1:-1;;;937:40:9;;1570:300:0;-1:-1:-1;1570:300:0:o;1707:104::-;-1:-1:-1;;;1763:48:0;;;-1:-1:-1;1707:104:0;;1929:204;-1:-1:-1;;;;;628:16327:0;2028:19;;628:16327;;2045:1;628:16327;2110:9;628:16327;;;2045:1;628:16327;;1929:204;:::o;628:16327::-;-1:-1:-1;;628:16327:0;;-1:-1:-1;;;628:16327:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;628:16327:0;;;;;;;;;;;:::o;:::-;-1:-1:-1;628:16327:0;;-1:-1:-1;;;628:16327:0;;;;;;;;;;;;;;;;;;;;2190:219;-1:-1:-1;628:16327:0;;;6930:7;628:16327;;;;;;-1:-1:-1;;;;;628:16327:0;2324:56;2332:19;;;2324:56;:::i;628:16327::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;-1:-1:-1;;628:16327:0;;;-1:-1:-1;628:16327:0;;-1:-1:-1;;628:16327:0;;-1:-1:-1;628:16327:0;;;;;;-1:-1:-1;;;;;628:16327:0;;-1:-1:-1;;628:16327:0;;;;;-1:-1:-1;628:16327:0;-1:-1:-1;;628:16327:0;;;;;;;;;;;;-1:-1:-1;2721:7:0;628:16327;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2721:7;628:16327;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;628:16327:0;;;;;;;;;;;;;2801:276;2914:7;2801:276;2914:7;:::i;:::-;-1:-1:-1;628:16327:0;;;;;:::i;:::-;;;;;;;:::i;:::-;-1:-1:-1;628:16327:0;;2801:276;:::o;3468:406::-;;3564:23;;;:::i;:::-;-1:-1:-1;;;;;628:16327:0;;;;;;3605:11;;628:16327;;719:10:6;3686:21:0;:62;;;;;3468:406;628:16327;;;;3859:7;;;:::i;628:16327::-;-1:-1:-1;;628:16327:0;;-1:-1:-1;;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;628:16327:0;3686:62;-1:-1:-1;;;;;628:16327:0;;;;;4508:18;628:16327;;;;;;;-1:-1:-1;4508:35:0;;719:10:6;;4508:25:0;628:16327;4508:35;628:16327;;3686:62;;;628:16327;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;628:16327:0;;;;;3935:167;4045:7;;;:::i;:::-;-1:-1:-1;628:16327:0;;;4071:15;628:16327;;;;;;-1:-1:-1;;;;;628:16327:0;;3935:167::o;4169:153::-;-1:-1:-1;;;;;628:16327:0;;;4169:153;719:10:6;13216:17:0;;628:16327;;719:10:6;-1:-1:-1;628:16327:0;;;13273:18;628:16327;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13334:41;628:16327;719:10:6;13334:41:0;;4169:153::o;628:16327::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;628:16327:0;;-1:-1:-1;;;628:16327:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;628:16327:0;;;;;;;4612:326;;4923:7;4612:326;;4793:99;4801:41;719:10:6;;4801:41:0;:::i;:::-;4793:99;:::i;:::-;4923:7;:::i;5004:179::-;;;5137:39;5004:179;628:16327;;;;;;:::i;:::-;;;;5249:314;;6620:47;5249:314;;;5409:99;5417:41;719:10:6;;5417:41:0;:::i;5409:99::-;6594:7;;;;;:::i;:::-;6620:47;:::i;:::-;628:16327;;;5249:314::o;628:16327::-;-1:-1:-1;628:16327:0;;-1:-1:-1;;;628:16327:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;628:16327:0;;;;;;:::o;7540:261::-;-1:-1:-1;;;;;628:16327:0;7665:23;;;:::i;:::-;628:16327;;;;;7706:16;;;;:52;;;;;7540:261;7706:87;;;;;;7540:261;7698:96;;;7540:261;:::o;7706:87::-;7762:20;;;;;;:::i;:::-;628:16327;7762:31;7706:87;;;;;:52;-1:-1:-1;628:16327:0;;;4508:18;628:16327;;;;;;;;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;;-1:-1:-1;7706:52:0;;;;628:16327;;;;:::o;:::-;-1:-1:-1;628:16327:0;;-1:-1:-1;;;628:16327:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;628:16327:0;;;;;;;11423:1233;11542:81;11423:1233;11550:23;;;:::i;:::-;-1:-1:-1;;;;;628:16327:0;;;;;;;;11550:31;;11542:81;:::i;:::-;628:16327;;11641:16;;;628:16327;;12461:15;12533:21;11851:23;11843:81;11851:23;:31;:23;;;:::i;:::-;-1:-1:-1;;;;;628:16327:0;;;11851:31;;11843:81;:::i;:::-;628:16327;11993:24;;628:16327;;11993:15;628:16327;;;;;;;11993:24;628:16327;;-1:-1:-1;;;;;;628:16327:0;;;;;-1:-1:-1;;;;;628:16327:0;;;;;12461:9;628:16327;;;;;;;12461:15;628:16327;;-1:-1:-1;;628:16327:0;;;-1:-1:-1;;;;;628:16327:0;;;;;;12461:9;628:16327;;;;;;;;;;;12533:16;;628:16327;;12533:7;628:16327;;;;;;;12533:16;628:16327;;-1:-1:-1;;;;;;628:16327:0;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;12533:21;12570:27;628:16327;;;12570:27;11423:1233::o;628:16327::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;628:16327:0;;;;;12768:171;-1:-1:-1;628:16327:0;;;12842:15;628:16327;;;;;;;-1:-1:-1;;;;;;628:16327:0;-1:-1:-1;;;;;628:16327:0;;;;;-1:-1:-1;;;;;628:16327:0;12895:23;;;:::i;:::-;628:16327;;;;12886:46;-1:-1:-1;628:16327:0;;12886:46;12768:171::o;13466:133::-;-1:-1:-1;628:16327:0;;;6930:7;628:16327;;;;;;13539:53;;-1:-1:-1;;;;;628:16327:0;7344:31;;13539:53;:::i;628:16327::-;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;628:16327:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;628:16327:0;;;;:::o;:::-;;;:::o;14151:831::-;;;;;1465:19:4;;:23;14320:15:0;;14355:71;628:16327;14355:71;628:16327;;;;;;;;;;;;;14355:71;;;;719:10:6;14355:71:0;;;;:::i;:::-;;;-1:-1:-1;;;;;628:16327:0;14355:71;;628:16327;;14355:71;;;14316:660;-1:-1:-1;14351:573:0;;14543:381;;;;;:::i;:::-;628:16327;;;14593:18;;;-1:-1:-1;;628:16327:0;;-1:-1:-1;;;14635:60:0;;628:16327;14635:60;14355:71;14635:60;;;:::i;14589:321::-;14355:71;14797:95;;14351:573;-1:-1:-1;;;;;;628:16327:0;14476:51;;14469:58::o;14355:71::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;14316:660;14954:11;;;;14961:4;14954:11;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "825800",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "approve(address,uint256)": "infinite",
                "balanceOf(address)": "2659",
                "getApproved(uint256)": "4777",
                "isApprovedForAll(address,address)": "2917",
                "name()": "infinite",
                "ownerOf(uint256)": "2651",
                "safeTransferFrom(address,address,uint256)": "infinite",
                "safeTransferFrom(address,address,uint256,bytes)": "infinite",
                "setApprovalForAll(address,bool)": "26717",
                "supportsInterface(bytes4)": "438",
                "symbol()": "infinite",
                "tokenURI(uint256)": "infinite",
                "transferFrom(address,address,uint256)": "infinite"
              },
              "internal": {
                "_afterTokenTransfer(address,address,uint256,uint256)": "infinite",
                "_approve(address,uint256)": "infinite",
                "_baseURI()": "infinite",
                "_beforeTokenTransfer(address,address,uint256,uint256)": "infinite",
                "_burn(uint256)": "infinite",
                "_checkOnERC721Received(address,address,uint256,bytes memory)": "infinite",
                "_exists(uint256)": "infinite",
                "_isApprovedOrOwner(address,uint256)": "infinite",
                "_mint(address,uint256)": "infinite",
                "_ownerOf(uint256)": "infinite",
                "_requireMinted(uint256)": "infinite",
                "_safeMint(address,uint256)": "infinite",
                "_safeMint(address,uint256,bytes memory)": "infinite",
                "_safeTransfer(address,address,uint256,bytes memory)": "infinite",
                "_setApprovalForAll(address,address,bool)": "infinite",
                "_transfer(address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenURI(uint256)": "c87b56dd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 25,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_name",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
              },
              {
                "astId": 27,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_symbol",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 31,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_owners",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 35,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_balances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 39,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_tokenApprovals",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 45,
                "contract": "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
                "label": "_operatorApprovals",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "IERC721": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                { "internalType": "bool", "name": "_approved", "type": "bool" }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Required interface of an ERC721 compliant contract.",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
              },
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
              }
            },
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens in ``owner``'s account."
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
              },
              "ownerOf(uint256)": {
                "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
        "IERC721Receiver": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" }
              ],
              "name": "onERC721Received",
              "outputs": [
                { "internalType": "bytes4", "name": "", "type": "bytes4" }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
            "kind": "dev",
            "methods": {
              "onERC721Received(address,address,uint256,bytes)": {
                "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
              }
            },
            "title": "ERC721 token receiver interface",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "onERC721Received(address,address,uint256,bytes)": "150b7a02"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "IERC721Metadata": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                { "internalType": "bool", "name": "_approved", "type": "bool" }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "See https://eips.ethereum.org/EIPS/eip-721",
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens in ``owner``'s account."
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
              },
              "name()": { "details": "Returns the token collection name." },
              "ownerOf(uint256)": {
                "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              },
              "symbol()": { "details": "Returns the token collection symbol." },
              "tokenURI(uint256)": {
                "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
              }
            },
            "title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenURI(uint256)": "c87b56dd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea36469706673582212205c4921b6ce58fb99a0c7c7347b0d1dfa7dde8e8c06f0d3aec68cef7848fb5b896c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0x49 0x21 0xB6 0xCE PC 0xFB SWAP10 LOG0 0xC7 0xC7 CALLVALUE PUSH28 0xD1DFA7DDE8E8C06F0D3AEC68CEF7848FB5B896C6578706572696D65 PUSH15 0x74616CF564736F6C634300080C0041 ",
              "sourceMap": "194:8964:4:-:0;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea36469706673582212205c4921b6ce58fb99a0c7c7347b0d1dfa7dde8e8c06f0d3aec68cef7848fb5b896c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0x49 0x21 0xB6 0xCE PC 0xFB SWAP10 LOG0 0xC7 0xC7 CALLVALUE PUSH28 0xD1DFA7DDE8E8C06F0D3AEC68CEF7848FB5B896C6578706572696D65 PUSH15 0x74616CF564736F6C634300080C0041 ",
              "sourceMap": "194:8964:4:-:0;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "_revert(bytes memory,string memory)": "infinite",
                "functionCall(address,bytes memory)": "infinite",
                "functionCall(address,bytes memory,string memory)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
                "functionDelegateCall(address,bytes memory)": "infinite",
                "functionDelegateCall(address,bytes memory,string memory)": "infinite",
                "functionStaticCall(address,bytes memory)": "infinite",
                "functionStaticCall(address,bytes memory,string memory)": "infinite",
                "isContract(address)": "infinite",
                "sendValue(address payable,uint256)": "infinite",
                "verifyCallResult(bool,bytes memory,string memory)": "infinite",
                "verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/Base64.sol": {
        "Base64": {
          "abi": [],
          "devdoc": {
            "details": "Provides a set of functions to operate with Base64 strings. _Available since v4.5._",
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "_TABLE": { "details": "Base64 Encoding/Decoding Table" }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea3646970667358221220f53aee1709b42a10d73f689acdb6ce2bfa74aaf9439a1d407a7f25a1618e62626c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 GASPRICE 0xEE OR MULMOD 0xB4 0x2A LT 0xD7 EXTCODEHASH PUSH9 0x9ACDB6CE2BFA74AAF9 NUMBER SWAP11 SAR BLOCKHASH PUSH27 0x7F25A1618E62626C6578706572696D656E74616CF564736F6C6343 STOP ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "231:3302:5:-:0;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea3646970667358221220f53aee1709b42a10d73f689acdb6ce2bfa74aaf9439a1d407a7f25a1618e62626c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 GASPRICE 0xEE OR MULMOD 0xB4 0x2A LT 0xD7 EXTCODEHASH PUSH9 0x9ACDB6CE2BFA74AAF9 NUMBER SWAP11 SAR BLOCKHASH PUSH27 0x7F25A1618E62626C6578706572696D656E74616CF564736F6C6343 STOP ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "231:3302:5:-:0;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": { "encode(bytes memory)": "infinite" }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides a set of functions to operate with Base64 strings. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_TABLE\":{\"details\":\"Base64 Encoding/Decoding Table\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Base64.sol\":\"Base64\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "devdoc": {
            "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/Counters.sol": {
        "Counters": {
          "abi": [],
          "devdoc": {
            "author": "Matt Condon (@shrugs)",
            "details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
            "kind": "dev",
            "methods": {},
            "title": "Counters",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea3646970667358221220e3c757c4f67e1204cd4031133648b2752719778436270c2f1411891273eccf396c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0xC7 JUMPI 0xC4 0xF6 PUSH31 0x1204CD4031133648B2752719778436270C2F1411891273ECCF396C65787065 PUSH19 0x696D656E74616CF564736F6C634300080C0041 ",
              "sourceMap": "424:971:7:-:0;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea3646970667358221220e3c757c4f67e1204cd4031133648b2752719778436270c2f1411891273eccf396c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0xC7 JUMPI 0xC4 0xF6 PUSH31 0x1204CD4031133648B2752719778436270C2F1411891273ECCF396C65787065 PUSH19 0x696D656E74616CF564736F6C634300080C0041 ",
              "sourceMap": "424:971:7:-:0;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "current(struct Counters.Counter storage pointer)": "infinite",
                "decrement(struct Counters.Counter storage pointer)": "infinite",
                "increment(struct Counters.Counter storage pointer)": "infinite",
                "reset(struct Counters.Counter storage pointer)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "Strings": {
          "abi": [],
          "devdoc": {
            "details": "String operations.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea3646970667358221220fe4fccea1955916cca1df8d23149425ee69148d3fa2627a6a040bd109b2df4836c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID 0x4F 0xCC 0xEA NOT SSTORE SWAP2 PUSH13 0xCA1DF8D23149425EE69148D3FA 0x26 0x27 0xA6 LOG0 BLOCKHASH 0xBD LT SWAP12 0x2D DELEGATECALL DUP4 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "188:2065:8:-:0;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea3646970667358221220fe4fccea1955916cca1df8d23149425ee69148d3fa2627a6a040bd109b2df4836c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID 0x4F 0xCC 0xEA NOT SSTORE SWAP2 PUSH13 0xCA1DF8D23149425EE69148D3FA 0x26 0x27 0xA6 LOG0 BLOCKHASH 0xBD LT SWAP12 0x2D DELEGATECALL DUP4 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "188:2065:8:-:0;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "toHexString(address)": "infinite",
                "toHexString(uint256)": "infinite",
                "toHexString(uint256,uint256)": "infinite",
                "toString(uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
        "ERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": { "supportsInterface(bytes4)": "01ffc9a7" }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": { "supportsInterface(bytes4)": "01ffc9a7" }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/math/Math.sol": {
        "Math": {
          "abi": [],
          "devdoc": {
            "details": "Standard math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea3646970667358221220f3c23b926d2ac73ff51325ab43bab42dca22efe3034d3716c57adaec487e5c1d6c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN 0xC2 EXTCODESIZE SWAP3 PUSH14 0x2AC73FF51325AB43BAB42DCA22EF 0xE3 SUB 0x4D CALLDATACOPY AND 0xC5 PUSH27 0xDAEC487E5C1D6C6578706572696D656E74616CF564736F6C634300 ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "202:12302:11:-:0;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea3646970667358221220f3c23b926d2ac73ff51325ab43bab42dca22efe3034d3716c57adaec487e5c1d6c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN 0xC2 EXTCODESIZE SWAP3 PUSH14 0x2AC73FF51325AB43BAB42DCA22EF 0xE3 SUB 0x4D CALLDATACOPY AND 0xC5 PUSH27 0xDAEC487E5C1D6C6578706572696D656E74616CF564736F6C634300 ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "202:12302:11:-:0;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "average(uint256,uint256)": "infinite",
                "ceilDiv(uint256,uint256)": "infinite",
                "log10(uint256)": "infinite",
                "log10(uint256,enum Math.Rounding)": "infinite",
                "log2(uint256)": "infinite",
                "log2(uint256,enum Math.Rounding)": "infinite",
                "log256(uint256)": "infinite",
                "log256(uint256,enum Math.Rounding)": "infinite",
                "max(uint256,uint256)": "infinite",
                "min(uint256,uint256)": "infinite",
                "mulDiv(uint256,uint256,uint256)": "infinite",
                "mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
                "sqrt(uint256)": "infinite",
                "sqrt(uint256,enum Math.Rounding)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "contracts/FleekAccessControl.sol": {
        "FleekAccessControl": {
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "byAddress",
                  "type": "address"
                }
              ],
              "name": "CollectionRoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "byAddress",
                  "type": "address"
                }
              ],
              "name": "CollectionRoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "byAddress",
                  "type": "address"
                }
              ],
              "name": "TokenRoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "byAddress",
                  "type": "address"
                }
              ],
              "name": "TokenRoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "name": "getCollectionRoleMembers",
              "outputs": [
                { "internalType": "address[]", "name": "", "type": "address[]" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "name": "getTokenRoleMembers",
              "outputs": [
                { "internalType": "address[]", "name": "", "type": "address[]" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantCollectionRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantTokenRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasCollectionRole",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasTokenRole",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeCollectionRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeTokenRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract by granting the `Owner` role to the deployer."
              },
              "getCollectionRoleMembers(uint8)": {
                "details": "Returns an array of addresses that all have the collection role."
              },
              "getTokenRoleMembers(uint256,uint8)": {
                "details": "Returns an array of addresses that all have the same token role for a certain tokenId."
              },
              "grantCollectionRole(uint8,address)": {
                "details": "Grants the collection role to an address. Requirements: - the caller should have the collection role."
              },
              "grantTokenRole(uint256,uint8,address)": {
                "details": "Grants the token role to an address. Requirements: - the caller should have the token role."
              },
              "hasCollectionRole(uint8,address)": {
                "details": "Returns `True` if a certain address has the collection role."
              },
              "hasTokenRole(uint256,uint8,address)": {
                "details": "Returns `True` if a certain address has the token role."
              },
              "revokeCollectionRole(uint8,address)": {
                "details": "Revokes the collection role of an address. Requirements: - the caller should have the collection role."
              },
              "revokeTokenRole(uint256,uint8,address)": {
                "details": "Revokes the token role of an address. Requirements: - the caller should have the token role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_encode_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080604052346100f85760008054815260016020908152604080832083805282528083203384529182905282205415610072575b506040513380825291907fcf081ed2b728e3115904be00eb8927b2375ff3401839b37f7accfa1bb2bee15c90602090a3604051610a8490816100fe8239f35b600181018054680100000000000000008110156100e157600181018083558110156100ca57818452602080852090910180546001600160a01b0319163390811790915591546000928352929052604090205538610033565b5050634e487b7160e01b8252506032600452602490fd5b5050634e487b7160e01b8252506041600452602490fd5b600080fdfe6040608081526004361015610015575b50600080fd5b600090813560e01c806301468deb146101a25780632d957aad1461018a5780632f1e8f0a14610126578063353b07a4146100ff5780638c3c0a44146100e7578063a27d0b27146100cc578063b42dbe38146100af5763e94472501461007a575061000f565b346100ab576100a79150610096610090366101ff565b90610659565b905190151581529081906020820190565b0390f35b5080fd5b50346100ab576100a791506100966100c6366101ba565b916106cc565b50346100ab576100e46100de366101ba565b91610420565b51f35b50346100ab576100e46100f9366101ff565b906104db565b50346100ab576100a7915061011b61011636610299565b61078e565b905191829182610255565b50346100ab576100a7915061011b600161018461017f61014536610236565b919061017061015e826000526002602052604060002090565b54916000526003602052604060002090565b90600052602052604060002090565b61060f565b01610715565b50346100ab576100e461019c366101ff565b90610317565b50346100ab576100e46101b4366101ba565b9161056d565b606090600319011261000f576004359060243560028110156101f757906044356001600160a01b0381168114156101ee5790565b50505050600080fd5b505050600080fd5b604090600319011261000f57600435600281101561022f57906024356001600160a01b0381168114156101f75790565b5050600080fd5b604090600319011261000f576004359060243560028110156101f75790565b6020908160408183019282815285518094520193019160005b82811061027c575050505090565b83516001600160a01b03168552938101939281019260010161026e565b602090600319011261000f57600435600281101561022f5790565b156102bb57565b5060405162461bcd60e51b815260206004820152602d60248201527f466c65656b416363657373436f6e74726f6c3a206d757374206861766520636f60448201526c6c6c656374696f6e20726f6c6560981b6064820152608490fd5b61032033610627565b80156103ae575b610330906102b4565b60005460005260016020526103528261034d83604060002061060f565b610850565b6002811015610395576040513381526001600160a01b03909216917fcf081ed2b728e3115904be00eb8927b2375ff3401839b37f7accfa1bb2bee15c90602090a3565b505050634e487b7160e01b600052602160045260246000fd5b506103306103bb33610627565b9050610327565b156103c957565b5060405162461bcd60e51b815260206004820152602860248201527f466c65656b416363657373436f6e74726f6c3a206d757374206861766520746f6044820152676b656e20726f6c6560c01b6064820152608490fd5b61042a338261068d565b80156104c6575b61043a906103c2565b6000818152600260205260408120546003602052604082209082526020526104698461034d856040852061060f565b60028310156104ad57506040513381526001600160a01b03909316927f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c23990602090a4565b634e487b7160e01b815260216004526024945092505050fd5b5061043a6104d4338361068d565b9050610431565b6104e433610627565b8015610559575b6104f4906102b4565b60005460005260016020526105168261051183604060002061060f565b610908565b6002811015610395576040513381526001600160a01b03909216917faeff57f0f5e4d3d10a37d4a70fde8ed67a95e67b251d5c512c0ea98c380d2f9590602090a3565b506104f461056633610627565b90506104eb565b610577338261068d565b80156105fa575b610587906103c2565b6000818152600260205260408120546003602052604082209082526020526105b684610511856040852061060f565b60028310156104ad57506040513381526001600160a01b03909316927fe52d746e4c78c98c6bfa291b273406905c3e8550b7d911a6bea686368c2dc79d90602090a4565b50610587610608338361068d565b905061057e565b90600281101561039557600052602052604060002090565b60008054815260016020908152604080832083805282528083206001600160a01b039094168352929052205b54151590565b90610676610653926000546000526001602052604060002061060f565b9060018060a01b0316600052602052604060002090565b60009081526002602090815260408083205460038352818420908452825280832083805282528083206001600160a01b03909416835292905220610653565b61065392916106769160005260026020526040600020546003602052604060002090600052602052604060002061060f565b50634e487b7160e01b600052604160045260246000fd5b906040519180548084526020908185019260005281600020916000905b82821061076e5750505050829003601f01601f1916820167ffffffffffffffff81118382101761076157604052565b6107696106fe565b604052565b83546001600160a01b031685529384019360019384019390910190610732565b600080548152600190816107aa6020948286526040842061060f565b01916040518094808554928381520194845280842093905b828210610801575050505050819003601f01601f1916810167ffffffffffffffff8111828210176107f4575b60405290565b6107fc6106fe565b6107ee565b84546001600160a01b031686529485019493830193908301906107c2565b80548210156108375760005260206000200190600090565b505050634e487b7160e01b600052603260045260246000fd5b6001600160a01b03821660009081526020829052604090209091905415610875575050565b6108e190600183016108c8826108a48354680100000000000000008110156108e4575b6001810185558461081f565b90919082549060031b9160018060a01b039283811b93849216901b16911916179055565b54929060018060a01b0316600052602052604060002090565b55565b6108ec6106fe565b610898565b50634e487b7160e01b600052601160045260246000fd5b6001600160a01b03821660009081526020829052604090209091905461092c575050565b6001600160a01b0381166000908152602083905260409020549060018210610a33575b6000199283830160018201936109ba61097487875460018110610a26575b018761081f565b90546001600160a01b039460039290921b1c841690610997826108a4838b61081f565b60011910610a19575b6001600160a01b0316600090815260208590526040902090565b5583549384156109fc576000956108e19501916109d7838361081f565b909182549160031b1b19169055559060018060a01b0316600052602052604060002090565b50505050505050634e487b7160e01b600052603160045260246000fd5b610a216108f1565b6109a0565b610a2e6108f1565b61096d565b610a3b6108f1565b61094f56fea3646970667358221220a184634af80636a286b6f1fb7d6788b947d3f1d83bd3f0581be6417bf67d25226c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP3 KECCAK256 SLOAD ISZERO PUSH2 0x72 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD CALLER DUP1 DUP3 MSTORE SWAP2 SWAP1 PUSH32 0xCF081ED2B728E3115904BE00EB8927B2375FF3401839B37F7ACCFA1BB2BEE15C SWAP1 PUSH1 0x20 SWAP1 LOG3 PUSH1 0x40 MLOAD PUSH2 0xA84 SWAP1 DUP2 PUSH2 0xFE DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0xE1 JUMPI PUSH1 0x1 DUP2 ADD DUP1 DUP4 SSTORE DUP2 LT ISZERO PUSH2 0xCA JUMPI DUP2 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 SLOAD PUSH1 0x0 SWAP3 DUP4 MSTORE SWAP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE CODESIZE PUSH2 0x33 JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE POP PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE POP PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1468DEB EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x2D957AAD EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x2F1E8F0A EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x353B07A4 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x8C3C0A44 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0xA27D0B27 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0xB42DBE38 EQ PUSH2 0xAF JUMPI PUSH4 0xE9447250 EQ PUSH2 0x7A JUMPI POP PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xA7 SWAP2 POP PUSH2 0x96 PUSH2 0x90 CALLDATASIZE PUSH2 0x1FF JUMP JUMPDEST SWAP1 PUSH2 0x659 JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xA7 SWAP2 POP PUSH2 0x96 PUSH2 0xC6 CALLDATASIZE PUSH2 0x1BA JUMP JUMPDEST SWAP2 PUSH2 0x6CC JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xE4 PUSH2 0xDE CALLDATASIZE PUSH2 0x1BA JUMP JUMPDEST SWAP2 PUSH2 0x420 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xE4 PUSH2 0xF9 CALLDATASIZE PUSH2 0x1FF JUMP JUMPDEST SWAP1 PUSH2 0x4DB JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xA7 SWAP2 POP PUSH2 0x11B PUSH2 0x116 CALLDATASIZE PUSH2 0x299 JUMP JUMPDEST PUSH2 0x78E JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x255 JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xA7 SWAP2 POP PUSH2 0x11B PUSH1 0x1 PUSH2 0x184 PUSH2 0x17F PUSH2 0x145 CALLDATASIZE PUSH2 0x236 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x170 PUSH2 0x15E DUP3 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP2 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x60F JUMP JUMPDEST ADD PUSH2 0x715 JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xE4 PUSH2 0x19C CALLDATASIZE PUSH2 0x1FF JUMP JUMPDEST SWAP1 PUSH2 0x317 JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xE4 PUSH2 0x1B4 CALLDATASIZE PUSH2 0x1BA JUMP JUMPDEST SWAP2 PUSH2 0x56D JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1F7 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x1EE JUMPI SWAP1 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x22F JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x1F7 JUMPI SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1F7 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x27C JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x26E JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x22F JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2BB JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B416363657373436F6E74726F6C3A206D757374206861766520636F PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x6C6C656374696F6E20726F6C65 PUSH1 0x98 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x320 CALLER PUSH2 0x627 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3AE JUMPI JUMPDEST PUSH2 0x330 SWAP1 PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x352 DUP3 PUSH2 0x34D DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x60F JUMP JUMPDEST PUSH2 0x850 JUMP JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0xCF081ED2B728E3115904BE00EB8927B2375FF3401839B37F7ACCFA1BB2BEE15C SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x3BB CALLER PUSH2 0x627 JUMP JUMPDEST SWAP1 POP PUSH2 0x327 JUMP JUMPDEST ISZERO PUSH2 0x3C9 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B416363657373436F6E74726F6C3A206D757374206861766520746F PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6B656E20726F6C65 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x42A CALLER DUP3 PUSH2 0x68D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4C6 JUMPI JUMPDEST PUSH2 0x43A SWAP1 PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x469 DUP5 PUSH2 0x34D DUP6 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x60F JUMP JUMPDEST PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x4AD JUMPI POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xBF5A13B362503FCC74B8B9B1598ABA2F3A9AF85D05BA7978F7E9F447F22C239 SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP5 POP SWAP3 POP POP POP REVERT JUMPDEST POP PUSH2 0x43A PUSH2 0x4D4 CALLER DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP1 POP PUSH2 0x431 JUMP JUMPDEST PUSH2 0x4E4 CALLER PUSH2 0x627 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x559 JUMPI JUMPDEST PUSH2 0x4F4 SWAP1 PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x516 DUP3 PUSH2 0x511 DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x60F JUMP JUMPDEST PUSH2 0x908 JUMP JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0xAEFF57F0F5E4D3D10A37D4A70FDE8ED67A95E67B251D5C512C0EA98C380D2F95 SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST POP PUSH2 0x4F4 PUSH2 0x566 CALLER PUSH2 0x627 JUMP JUMPDEST SWAP1 POP PUSH2 0x4EB JUMP JUMPDEST PUSH2 0x577 CALLER DUP3 PUSH2 0x68D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5FA JUMPI JUMPDEST PUSH2 0x587 SWAP1 PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x5B6 DUP5 PUSH2 0x511 DUP6 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x60F JUMP JUMPDEST PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x4AD JUMPI POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xE52D746E4C78C98C6BFA291B273406905C3E8550B7D911A6BEA686368C2DC79D SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST POP PUSH2 0x587 PUSH2 0x608 CALLER DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP1 POP PUSH2 0x57E JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x395 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 JUMPDEST SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x676 PUSH2 0x653 SWAP3 PUSH1 0x0 SLOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x60F JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x3 DUP4 MSTORE DUP2 DUP5 KECCAK256 SWAP1 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 PUSH2 0x653 JUMP JUMPDEST PUSH2 0x653 SWAP3 SWAP2 PUSH2 0x676 SWAP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x60F JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP1 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 SWAP1 DUP2 DUP6 ADD SWAP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x76E JUMPI POP POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x761 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x769 PUSH2 0x6FE JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x732 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 SWAP1 DUP2 PUSH2 0x7AA PUSH1 0x20 SWAP5 DUP3 DUP7 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x60F JUMP JUMPDEST ADD SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP1 DUP6 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP5 DUP5 MSTORE DUP1 DUP5 KECCAK256 SWAP4 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x801 JUMPI POP POP POP POP POP DUP2 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR PUSH2 0x7F4 JUMPI JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x7FC PUSH2 0x6FE JUMP JUMPDEST PUSH2 0x7EE JUMP JUMPDEST DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE SWAP5 DUP6 ADD SWAP5 SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH2 0x7C2 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x837 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 SWAP1 SLOAD ISZERO PUSH2 0x875 JUMPI POP POP JUMP JUMPDEST PUSH2 0x8E1 SWAP1 PUSH1 0x1 DUP4 ADD PUSH2 0x8C8 DUP3 PUSH2 0x8A4 DUP4 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x8E4 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP6 SSTORE DUP5 PUSH2 0x81F JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP2 SHL SWAP4 DUP5 SWAP3 AND SWAP1 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST SLOAD SWAP3 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x8EC PUSH2 0x6FE JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 SWAP1 SLOAD PUSH2 0x92C JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH1 0x1 DUP3 LT PUSH2 0xA33 JUMPI JUMPDEST PUSH1 0x0 NOT SWAP3 DUP4 DUP4 ADD PUSH1 0x1 DUP3 ADD SWAP4 PUSH2 0x9BA PUSH2 0x974 DUP8 DUP8 SLOAD PUSH1 0x1 DUP2 LT PUSH2 0xA26 JUMPI JUMPDEST ADD DUP8 PUSH2 0x81F JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR DUP5 AND SWAP1 PUSH2 0x997 DUP3 PUSH2 0x8A4 DUP4 DUP12 PUSH2 0x81F JUMP JUMPDEST PUSH1 0x1 NOT LT PUSH2 0xA19 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE DUP4 SLOAD SWAP4 DUP5 ISZERO PUSH2 0x9FC JUMPI PUSH1 0x0 SWAP6 PUSH2 0x8E1 SWAP6 ADD SWAP2 PUSH2 0x9D7 DUP4 DUP4 PUSH2 0x81F JUMP JUMPDEST SWAP1 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE SSTORE SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP POP POP POP POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xA21 PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0xA2E PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x96D JUMP JUMPDEST PUSH2 0xA3B PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x94F JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 DUP5 PUSH4 0x4AF80636 LOG2 DUP7 0xB6 CALL 0xFB PUSH30 0x6788B947D3F1D83BD3F0581BE6417BF67D25226C6578706572696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "112:7530:12:-:0;;;;;;1292:11;112:7530;;;;4987:16;112:7530;;;;;;;;;;;;;;;;1305:10;112:7530;;;;;;;;;6359:26;6355:140;;-1:-1:-1;;112:7530:12;;1305:10;112:7530;;;1305:10;;5050:48;;112:7530;;5050:48;112:7530;;;;;;;;;6355:140;4987:16;6401:12;;112:7530;;;;;;;;4987:16;112:7530;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;112:7530:12;1305:10;112:7530;;;;;;;;-1:-1:-1;112:7530:12;;;;;;;;;;6355:140;;;112:7530;-1:-1:-1;;;;;112:7530:12;;-1:-1:-1;112:7530:12;;;;;;;-1:-1:-1;;;;;112:7530:12;;-1:-1:-1;112:7530:12;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_enum_Roles": {
                  "entryPoint": 665,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_enum_Rolest_address": {
                  "entryPoint": 511,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_uint256t_enum_Roles": {
                  "entryPoint": 566,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_uint256t_enum_Rolest_address": {
                  "entryPoint": 442,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 3
                },
                "abi_encode_array_address_dyn": {
                  "entryPoint": 597,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_array_address_dyn": {
                  "entryPoint": 1813,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getCollectionRoleMembers": {
                  "entryPoint": 1934,
                  "id": 2974,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_grantRole": {
                  "entryPoint": 2128,
                  "id": 3182,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_hasCollectionRole": {
                  "entryPoint": 1625,
                  "id": 2915,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_hasCollectionRole_3789": {
                  "entryPoint": 1575,
                  "id": 2915,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_hasTokenRole": {
                  "entryPoint": 1740,
                  "id": 2950,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_hasTokenRole_3793": {
                  "entryPoint": 1677,
                  "id": 2950,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_revokeRole": {
                  "entryPoint": 2312,
                  "id": 3255,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_enum_Roles_struct_Role_storage_of_enum_Roles": {
                  "entryPoint": 1551,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_mapping_enum_Roles_struct_Role_storage_of_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_mapping_enum_Roles_struct_Role_storage_of_uint256_3782": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_mapping_enum_Roles_struct_Role_storage_of_uint256_3783": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_requireCollectionRole": {
                  "entryPoint": 791,
                  "id": 2774,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireCollectionRole_2855": {
                  "entryPoint": 1243,
                  "id": 2774,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole": {
                  "entryPoint": 1056,
                  "id": 2802,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole_2877": {
                  "entryPoint": 1389,
                  "id": 2802,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "panic_error_0x11": {
                  "entryPoint": 2289,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 1790,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 692,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_eb1c": {
                  "entryPoint": 962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "storage_array_index_access_address_dyn_ptr": {
                  "entryPoint": 2079,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "update_storage_value_address_to_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6040608081526004361015610015575b50600080fd5b600090813560e01c806301468deb146101a25780632d957aad1461018a5780632f1e8f0a14610126578063353b07a4146100ff5780638c3c0a44146100e7578063a27d0b27146100cc578063b42dbe38146100af5763e94472501461007a575061000f565b346100ab576100a79150610096610090366101ff565b90610659565b905190151581529081906020820190565b0390f35b5080fd5b50346100ab576100a791506100966100c6366101ba565b916106cc565b50346100ab576100e46100de366101ba565b91610420565b51f35b50346100ab576100e46100f9366101ff565b906104db565b50346100ab576100a7915061011b61011636610299565b61078e565b905191829182610255565b50346100ab576100a7915061011b600161018461017f61014536610236565b919061017061015e826000526002602052604060002090565b54916000526003602052604060002090565b90600052602052604060002090565b61060f565b01610715565b50346100ab576100e461019c366101ff565b90610317565b50346100ab576100e46101b4366101ba565b9161056d565b606090600319011261000f576004359060243560028110156101f757906044356001600160a01b0381168114156101ee5790565b50505050600080fd5b505050600080fd5b604090600319011261000f57600435600281101561022f57906024356001600160a01b0381168114156101f75790565b5050600080fd5b604090600319011261000f576004359060243560028110156101f75790565b6020908160408183019282815285518094520193019160005b82811061027c575050505090565b83516001600160a01b03168552938101939281019260010161026e565b602090600319011261000f57600435600281101561022f5790565b156102bb57565b5060405162461bcd60e51b815260206004820152602d60248201527f466c65656b416363657373436f6e74726f6c3a206d757374206861766520636f60448201526c6c6c656374696f6e20726f6c6560981b6064820152608490fd5b61032033610627565b80156103ae575b610330906102b4565b60005460005260016020526103528261034d83604060002061060f565b610850565b6002811015610395576040513381526001600160a01b03909216917fcf081ed2b728e3115904be00eb8927b2375ff3401839b37f7accfa1bb2bee15c90602090a3565b505050634e487b7160e01b600052602160045260246000fd5b506103306103bb33610627565b9050610327565b156103c957565b5060405162461bcd60e51b815260206004820152602860248201527f466c65656b416363657373436f6e74726f6c3a206d757374206861766520746f6044820152676b656e20726f6c6560c01b6064820152608490fd5b61042a338261068d565b80156104c6575b61043a906103c2565b6000818152600260205260408120546003602052604082209082526020526104698461034d856040852061060f565b60028310156104ad57506040513381526001600160a01b03909316927f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c23990602090a4565b634e487b7160e01b815260216004526024945092505050fd5b5061043a6104d4338361068d565b9050610431565b6104e433610627565b8015610559575b6104f4906102b4565b60005460005260016020526105168261051183604060002061060f565b610908565b6002811015610395576040513381526001600160a01b03909216917faeff57f0f5e4d3d10a37d4a70fde8ed67a95e67b251d5c512c0ea98c380d2f9590602090a3565b506104f461056633610627565b90506104eb565b610577338261068d565b80156105fa575b610587906103c2565b6000818152600260205260408120546003602052604082209082526020526105b684610511856040852061060f565b60028310156104ad57506040513381526001600160a01b03909316927fe52d746e4c78c98c6bfa291b273406905c3e8550b7d911a6bea686368c2dc79d90602090a4565b50610587610608338361068d565b905061057e565b90600281101561039557600052602052604060002090565b60008054815260016020908152604080832083805282528083206001600160a01b039094168352929052205b54151590565b90610676610653926000546000526001602052604060002061060f565b9060018060a01b0316600052602052604060002090565b60009081526002602090815260408083205460038352818420908452825280832083805282528083206001600160a01b03909416835292905220610653565b61065392916106769160005260026020526040600020546003602052604060002090600052602052604060002061060f565b50634e487b7160e01b600052604160045260246000fd5b906040519180548084526020908185019260005281600020916000905b82821061076e5750505050829003601f01601f1916820167ffffffffffffffff81118382101761076157604052565b6107696106fe565b604052565b83546001600160a01b031685529384019360019384019390910190610732565b600080548152600190816107aa6020948286526040842061060f565b01916040518094808554928381520194845280842093905b828210610801575050505050819003601f01601f1916810167ffffffffffffffff8111828210176107f4575b60405290565b6107fc6106fe565b6107ee565b84546001600160a01b031686529485019493830193908301906107c2565b80548210156108375760005260206000200190600090565b505050634e487b7160e01b600052603260045260246000fd5b6001600160a01b03821660009081526020829052604090209091905415610875575050565b6108e190600183016108c8826108a48354680100000000000000008110156108e4575b6001810185558461081f565b90919082549060031b9160018060a01b039283811b93849216901b16911916179055565b54929060018060a01b0316600052602052604060002090565b55565b6108ec6106fe565b610898565b50634e487b7160e01b600052601160045260246000fd5b6001600160a01b03821660009081526020829052604090209091905461092c575050565b6001600160a01b0381166000908152602083905260409020549060018210610a33575b6000199283830160018201936109ba61097487875460018110610a26575b018761081f565b90546001600160a01b039460039290921b1c841690610997826108a4838b61081f565b60011910610a19575b6001600160a01b0316600090815260208590526040902090565b5583549384156109fc576000956108e19501916109d7838361081f565b909182549160031b1b19169055559060018060a01b0316600052602052604060002090565b50505050505050634e487b7160e01b600052603160045260246000fd5b610a216108f1565b6109a0565b610a2e6108f1565b61096d565b610a3b6108f1565b61094f56fea3646970667358221220a184634af80636a286b6f1fb7d6788b947d3f1d83bd3f0581be6417bf67d25226c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1468DEB EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x2D957AAD EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x2F1E8F0A EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x353B07A4 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x8C3C0A44 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0xA27D0B27 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0xB42DBE38 EQ PUSH2 0xAF JUMPI PUSH4 0xE9447250 EQ PUSH2 0x7A JUMPI POP PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xA7 SWAP2 POP PUSH2 0x96 PUSH2 0x90 CALLDATASIZE PUSH2 0x1FF JUMP JUMPDEST SWAP1 PUSH2 0x659 JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xA7 SWAP2 POP PUSH2 0x96 PUSH2 0xC6 CALLDATASIZE PUSH2 0x1BA JUMP JUMPDEST SWAP2 PUSH2 0x6CC JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xE4 PUSH2 0xDE CALLDATASIZE PUSH2 0x1BA JUMP JUMPDEST SWAP2 PUSH2 0x420 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xE4 PUSH2 0xF9 CALLDATASIZE PUSH2 0x1FF JUMP JUMPDEST SWAP1 PUSH2 0x4DB JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xA7 SWAP2 POP PUSH2 0x11B PUSH2 0x116 CALLDATASIZE PUSH2 0x299 JUMP JUMPDEST PUSH2 0x78E JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x255 JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xA7 SWAP2 POP PUSH2 0x11B PUSH1 0x1 PUSH2 0x184 PUSH2 0x17F PUSH2 0x145 CALLDATASIZE PUSH2 0x236 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x170 PUSH2 0x15E DUP3 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP2 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x60F JUMP JUMPDEST ADD PUSH2 0x715 JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xE4 PUSH2 0x19C CALLDATASIZE PUSH2 0x1FF JUMP JUMPDEST SWAP1 PUSH2 0x317 JUMP JUMPDEST POP CALLVALUE PUSH2 0xAB JUMPI PUSH2 0xE4 PUSH2 0x1B4 CALLDATASIZE PUSH2 0x1BA JUMP JUMPDEST SWAP2 PUSH2 0x56D JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1F7 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x1EE JUMPI SWAP1 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x22F JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x1F7 JUMPI SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1F7 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x27C JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x26E JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x22F JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2BB JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B416363657373436F6E74726F6C3A206D757374206861766520636F PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x6C6C656374696F6E20726F6C65 PUSH1 0x98 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x320 CALLER PUSH2 0x627 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3AE JUMPI JUMPDEST PUSH2 0x330 SWAP1 PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x352 DUP3 PUSH2 0x34D DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x60F JUMP JUMPDEST PUSH2 0x850 JUMP JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0xCF081ED2B728E3115904BE00EB8927B2375FF3401839B37F7ACCFA1BB2BEE15C SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x3BB CALLER PUSH2 0x627 JUMP JUMPDEST SWAP1 POP PUSH2 0x327 JUMP JUMPDEST ISZERO PUSH2 0x3C9 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B416363657373436F6E74726F6C3A206D757374206861766520746F PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6B656E20726F6C65 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x42A CALLER DUP3 PUSH2 0x68D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4C6 JUMPI JUMPDEST PUSH2 0x43A SWAP1 PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x469 DUP5 PUSH2 0x34D DUP6 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x60F JUMP JUMPDEST PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x4AD JUMPI POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xBF5A13B362503FCC74B8B9B1598ABA2F3A9AF85D05BA7978F7E9F447F22C239 SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP5 POP SWAP3 POP POP POP REVERT JUMPDEST POP PUSH2 0x43A PUSH2 0x4D4 CALLER DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP1 POP PUSH2 0x431 JUMP JUMPDEST PUSH2 0x4E4 CALLER PUSH2 0x627 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x559 JUMPI JUMPDEST PUSH2 0x4F4 SWAP1 PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x516 DUP3 PUSH2 0x511 DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x60F JUMP JUMPDEST PUSH2 0x908 JUMP JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0xAEFF57F0F5E4D3D10A37D4A70FDE8ED67A95E67B251D5C512C0EA98C380D2F95 SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST POP PUSH2 0x4F4 PUSH2 0x566 CALLER PUSH2 0x627 JUMP JUMPDEST SWAP1 POP PUSH2 0x4EB JUMP JUMPDEST PUSH2 0x577 CALLER DUP3 PUSH2 0x68D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5FA JUMPI JUMPDEST PUSH2 0x587 SWAP1 PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x5B6 DUP5 PUSH2 0x511 DUP6 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x60F JUMP JUMPDEST PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x4AD JUMPI POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xE52D746E4C78C98C6BFA291B273406905C3E8550B7D911A6BEA686368C2DC79D SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST POP PUSH2 0x587 PUSH2 0x608 CALLER DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP1 POP PUSH2 0x57E JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x395 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 JUMPDEST SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x676 PUSH2 0x653 SWAP3 PUSH1 0x0 SLOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x60F JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x3 DUP4 MSTORE DUP2 DUP5 KECCAK256 SWAP1 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 PUSH2 0x653 JUMP JUMPDEST PUSH2 0x653 SWAP3 SWAP2 PUSH2 0x676 SWAP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x60F JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP1 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 SWAP1 DUP2 DUP6 ADD SWAP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x76E JUMPI POP POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x761 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x769 PUSH2 0x6FE JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x732 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x1 SWAP1 DUP2 PUSH2 0x7AA PUSH1 0x20 SWAP5 DUP3 DUP7 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x60F JUMP JUMPDEST ADD SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP1 DUP6 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP5 DUP5 MSTORE DUP1 DUP5 KECCAK256 SWAP4 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x801 JUMPI POP POP POP POP POP DUP2 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR PUSH2 0x7F4 JUMPI JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x7FC PUSH2 0x6FE JUMP JUMPDEST PUSH2 0x7EE JUMP JUMPDEST DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE SWAP5 DUP6 ADD SWAP5 SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH2 0x7C2 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x837 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 SWAP1 SLOAD ISZERO PUSH2 0x875 JUMPI POP POP JUMP JUMPDEST PUSH2 0x8E1 SWAP1 PUSH1 0x1 DUP4 ADD PUSH2 0x8C8 DUP3 PUSH2 0x8A4 DUP4 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x8E4 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP6 SSTORE DUP5 PUSH2 0x81F JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP2 SHL SWAP4 DUP5 SWAP3 AND SWAP1 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST SLOAD SWAP3 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x8EC PUSH2 0x6FE JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 SWAP1 SLOAD PUSH2 0x92C JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH1 0x1 DUP3 LT PUSH2 0xA33 JUMPI JUMPDEST PUSH1 0x0 NOT SWAP3 DUP4 DUP4 ADD PUSH1 0x1 DUP3 ADD SWAP4 PUSH2 0x9BA PUSH2 0x974 DUP8 DUP8 SLOAD PUSH1 0x1 DUP2 LT PUSH2 0xA26 JUMPI JUMPDEST ADD DUP8 PUSH2 0x81F JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR DUP5 AND SWAP1 PUSH2 0x997 DUP3 PUSH2 0x8A4 DUP4 DUP12 PUSH2 0x81F JUMP JUMPDEST PUSH1 0x1 NOT LT PUSH2 0xA19 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE DUP4 SLOAD SWAP4 DUP5 ISZERO PUSH2 0x9FC JUMPI PUSH1 0x0 SWAP6 PUSH2 0x8E1 SWAP6 ADD SWAP2 PUSH2 0x9D7 DUP4 DUP4 PUSH2 0x81F JUMP JUMPDEST SWAP1 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE SSTORE SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP POP POP POP POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xA21 PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0xA2E PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x96D JUMP JUMPDEST PUSH2 0xA3B PUSH2 0x8F1 JUMP JUMPDEST PUSH2 0x94F JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 DUP5 PUSH4 0x4AF80636 LOG2 DUP7 0xB6 CALL 0xFB PUSH30 0x6788B947D3F1D83BD3F0581BE6417BF67D25226C6578706572696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "112:7530:12:-:0;;;;;;;;;;-1:-1:-1;112:7530:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;2498:202;112:7530;;;:::i;:::-;2498:202;;:::i;:::-;112:7530;;;;;;;2872:154;112:7530;;;:::i;:::-;2872:154;;:::i;112:7530::-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;4697:50;:42;:36;112:7530;;;:::i;:::-;4643:27;;4697:20;4643:27;;112:7530;;4643:18;112:7530;;;;;;;4643:27;112:7530;4697:20;112:7530;;4697:11;112:7530;;;;;;;4697:20;112:7530;;;;;;;;;;4697:36;:42;:::i;:::-;:50;112:7530;:::i;:::-;;;;;2185:152;112:7530;;;:::i;:::-;2185:152;;:::i;112:7530::-;;;;;3188:204;112:7530;;;:::i;:::-;3188:204;;:::i;112:7530::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;112:7530:12;;;;;;;;:::o;:::-;;;;;-1:-1:-1;112:7530:12;;;;;;-1:-1:-1;112:7530:12;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;112:7530:12;;;;;;;;:::o;:::-;;;-1:-1:-1;112:7530:12;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;112:7530:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;-1:-1:-1;112:7530:12;;-1:-1:-1;;;112:7530:12;;;;;;;;;;;;;;;;;-1:-1:-1;;;112:7530:12;;;;;;;1404:244;1478:35;1502:10;1478:35;:::i;:::-;:81;;;;1404:244;1457:173;;;:::i;:::-;2272:11;112:7530;2272:11;112:7530;4987:16;112:7530;;4976:59;112:7530;4987:38;112:7530;;2272:11;112:7530;4987:38;:::i;:::-;4976:59;:::i;:::-;112:7530;;;;;;;;1502:10;112:7530;;-1:-1:-1;;;;;112:7530:12;;;;5050:48;;112:7530;;5050:48;1404:244::o;112:7530::-;;;;;;;2272:11;112:7530;;;;;2272:11;112:7530;1478:81;1502:10;1457:173;1517:42;1502:10;1517:42;:::i;:::-;1478:81;;;;112:7530;;;;:::o;:::-;-1:-1:-1;112:7530:12;;-1:-1:-1;;;112:7530:12;;;;;;;;;;;;;;;;;-1:-1:-1;;;112:7530:12;;;;;;;1755:259;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;2631:11;112:7530;;;5645:18;112:7530;;;;;;5703:11;112:7530;;;;;;;;;;5692:63;112:7530;5703:42;112:7530;;;;5703:42;:::i;5692:63::-;5645:18;112:7530;;;;;-1:-1:-1;112:7530:12;;1869:10;112:7530;;-1:-1:-1;;;;;112:7530:12;;;;5770:52;;112:7530;;5770:52;1755:259::o;112:7530::-;-1:-1:-1;;;112:7530:12;;;;;;;-1:-1:-1;112:7530:12;-1:-1:-1;;;112:7530:12;1841:89;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;1404:244;1478:35;1502:10;1478:35;:::i;:::-;:81;;;;1404:244;1457:173;;;:::i;:::-;2960:11;112:7530;2960:11;112:7530;5341:16;112:7530;;5329:60;112:7530;5341:38;112:7530;;2960:11;112:7530;5341:38;:::i;:::-;5329:60;:::i;:::-;112:7530;;;;;;;;1502:10;112:7530;;-1:-1:-1;;;;;112:7530:12;;;;5404:48;;112:7530;;5404:48;1404:244::o;1478:81::-;1502:10;1457:173;1517:42;1502:10;1517:42;:::i;:::-;1478:81;;;;1755:259;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;3322:11;112:7530;;;6017:18;112:7530;;;;;;6076:11;112:7530;;;;;;;;;;6064:64;112:7530;6076:42;112:7530;;;;6076:42;:::i;6064:64::-;6017:18;112:7530;;;;;-1:-1:-1;112:7530:12;;1869:10;112:7530;;-1:-1:-1;;;;;112:7530:12;;;;6143:52;;112:7530;;6143:52;1755:259::o;1841:89::-;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;112:7530;;;;;;;;-1:-1:-1;112:7530:12;;;;-1:-1:-1;112:7530:12;;:::o;3487:236::-;2272:11;112:7530;;;;3656:16;112:7530;;;;;;;;;;;;;;;;-1:-1:-1;;;;;112:7530:12;;;;;;;;;3656:55;112:7530;3656:60;;3487:236;:::o;:::-;;3656:38;:55;3487:236;3605:23;112:7530;3605:23;112:7530;3656:16;112:7530;;;3605:23;112:7530;3656:38;:::i;:::-;112:7530;;;;;;;;;;;;;;;;3813:255;2631:11;112:7530;;;3943:18;112:7530;;;;;;;;;3997:11;112:7530;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;112:7530:12;;;;;;;;;3997:59;112:7530;3813:255;3997:59;3813:255;;3997:42;3813:255;-1:-1:-1;112:7530:12;3943:18;112:7530;;;-1:-1:-1;112:7530:12;;3997:11;112:7530;;;-1:-1:-1;112:7530:12;;-1:-1:-1;112:7530:12;;;;-1:-1:-1;112:7530:12;3997:42;:::i;112:7530::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;112:7530:12;;-1:-1:-1;112:7530:12;;-1:-1:-1;112:7530:12;;;;;;;-1:-1:-1;;;;112:7530:12;;;;;-1:-1:-1;;112:7530:12;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;-1:-1:-1;;;;;112:7530:12;;;;;;;;;;;;;;;;;;4167:223;4287:23;112:7530;;;;4337:16;112:7530;;4337:38;112:7530;;;;;;;;4337:38;:::i;:::-;:46;112:7530;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;112:7530:12;;;;;-1:-1:-1;;112:7530:12;;;;;;;;;;;;;;;4167:223;:::o;112:7530::-;;;:::i;:::-;;;;;;-1:-1:-1;;;;;112:7530:12;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;112:7530:12;;-1:-1:-1;112:7530:12;;;-1:-1:-1;112:7530:12;:::o;:::-;;;;;;;;;;;;;;;6280:221;-1:-1:-1;;;;;112:7530:12;;;;;;;;;;;;;6280:221;;;112:7530;6359:26;6355:140;;6280:221;;:::o;6355:140::-;6441:21;6401:12;;;;112:7530;;;;;;;;;;;6355:140;6401:12;112:7530;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6441:21;112:7530;;;;;;;;;;;;;;;;6441:21;112:7530;6280:221::o;112:7530::-;;;:::i;:::-;;;;;;;;;;;;;;;;6582:470;-1:-1:-1;;;;;112:7530:12;;;;;;;;;;;;;6582:470;;;112:7530;6658:388;;6582:470;;:::o;6658:388::-;-1:-1:-1;;;;;112:7530:12;;;;;;;;;;;;;;;6744:1;112:7530;;;;6658:388;112:7530;;;;;;6744:1;6779:12;;112:7530;6923:25;6838:23;112:7530;;;6744:1;112:7530;;;;6658:388;112:7530;6838:23;;:::i;:::-;112:7530;;-1:-1:-1;;;;;112:7530:12;;;;;;;;;;6876:33;112:7530;6876:19;112:7530;6876:19;;:::i;:33::-;-1:-1:-1;;;112:7530:12;;6658:388;-1:-1:-1;;;;;112:7530:12;;;;;;;;;;;;;;6923:25;112:7530;;;;;;;;;;7014:21;112:7530;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "538400",
                "executionCost": "79665",
                "totalCost": "618065"
              },
              "external": {
                "getCollectionRoleMembers(uint8)": "infinite",
                "getTokenRoleMembers(uint256,uint8)": "infinite",
                "grantCollectionRole(uint8,address)": "infinite",
                "grantTokenRole(uint256,uint8,address)": "infinite",
                "hasCollectionRole(uint8,address)": "4986",
                "hasTokenRole(uint256,uint8,address)": "5098",
                "revokeCollectionRole(uint8,address)": "infinite",
                "revokeTokenRole(uint256,uint8,address)": "infinite"
              },
              "internal": {
                "_clearAllTokenRoles(uint256)": "infinite",
                "_clearAllTokenRoles(uint256,address)": "infinite",
                "_grantCollectionRole(enum FleekAccessControl.Roles,address)": "infinite",
                "_grantRole(struct FleekAccessControl.Role storage pointer,address)": "77300",
                "_grantTokenRole(uint256,enum FleekAccessControl.Roles,address)": "infinite",
                "_revokeCollectionRole(enum FleekAccessControl.Roles,address)": "infinite",
                "_revokeRole(struct FleekAccessControl.Role storage pointer,address)": "infinite",
                "_revokeTokenRole(uint256,enum FleekAccessControl.Roles,address)": "infinite"
              }
            },
            "methodIdentifiers": {
              "getCollectionRoleMembers(uint8)": "353b07a4",
              "getTokenRoleMembers(uint256,uint8)": "2f1e8f0a",
              "grantCollectionRole(uint8,address)": "2d957aad",
              "grantTokenRole(uint256,uint8,address)": "a27d0b27",
              "hasCollectionRole(uint8,address)": "e9447250",
              "hasTokenRole(uint256,uint8,address)": "b42dbe38",
              "revokeCollectionRole(uint8,address)": "8c3c0a44",
              "revokeTokenRole(uint256,uint8,address)": "01468deb"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"CollectionRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"CollectionRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"TokenRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"TokenRoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getCollectionRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getTokenRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCollectionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantTokenRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCollectionRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTokenRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCollectionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTokenRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract by granting the `Owner` role to the deployer.\"},\"getCollectionRoleMembers(uint8)\":{\"details\":\"Returns an array of addresses that all have the collection role.\"},\"getTokenRoleMembers(uint256,uint8)\":{\"details\":\"Returns an array of addresses that all have the same token role for a certain tokenId.\"},\"grantCollectionRole(uint8,address)\":{\"details\":\"Grants the collection role to an address. Requirements: - the caller should have the collection role.\"},\"grantTokenRole(uint256,uint8,address)\":{\"details\":\"Grants the token role to an address. Requirements: - the caller should have the token role.\"},\"hasCollectionRole(uint8,address)\":{\"details\":\"Returns `True` if a certain address has the collection role.\"},\"hasTokenRole(uint256,uint8,address)\":{\"details\":\"Returns `True` if a certain address has the token role.\"},\"revokeCollectionRole(uint8,address)\":{\"details\":\"Revokes the collection role of an address. Requirements: - the caller should have the collection role.\"},\"revokeTokenRole(uint256,uint8,address)\":{\"details\":\"Revokes the token role of an address. Requirements: - the caller should have the token role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FleekAccessControl.sol\":\"FleekAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/FleekAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract FleekAccessControl {\\n    using Counters for Counters.Counter;\\n\\n    enum Roles {\\n        Owner,\\n        Controller\\n    }\\n\\n    event TokenRoleGranted(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event TokenRoleRevoked(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleGranted(Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleRevoked(Roles indexed role, address indexed toAddress, address byAddress);\\n\\n    struct Role {\\n        mapping(address => uint256) indexes;\\n        address[] members;\\n    }\\n\\n    Counters.Counter private _collectionRolesVersion;\\n    // _collectionRoles[version][role]\\n    mapping(uint256 => mapping(Roles => Role)) private _collectionRoles;\\n\\n    mapping(uint256 => Counters.Counter) private _tokenRolesVersion;\\n    // _tokenRoles[tokenId][version][role]\\n    mapping(uint256 => mapping(uint256 => mapping(Roles => Role))) private _tokenRoles;\\n\\n    /**\\n     * @dev Initializes the contract by granting the `Owner` role to the deployer.\\n     */\\n    constructor() {\\n        _grantCollectionRole(Roles.Owner, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Checks if the `msg.sender` has a certain role.\\n     */\\n    modifier requireCollectionRole(Roles role) {\\n        require(\\n            hasCollectionRole(role, msg.sender) || hasCollectionRole(Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have collection role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if the `msg.sender` has the `Token` role for a certain `tokenId`.\\n     */\\n    modifier requireTokenRole(uint256 tokenId, Roles role) {\\n        require(\\n            hasTokenRole(tokenId, role, msg.sender) || hasTokenRole(tokenId, Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have token role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function grantCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _grantCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function grantTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _grantTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function revokeCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _revokeCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function revokeTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _revokeTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the collection role.\\n     */\\n    function hasCollectionRole(Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n\\n        return _collectionRoles[currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the token role.\\n     */\\n    function hasTokenRole(uint256 tokenId, Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the collection role.\\n     */\\n    function getCollectionRoleMembers(Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        return _collectionRoles[currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the same token role for a certain tokenId.\\n     */\\n    function getTokenRoleMembers(uint256 tokenId, Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     */\\n    function _grantCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _grantRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     */\\n    function _revokeCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _revokeRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     */\\n    function _grantTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _grantRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleGranted(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     */\\n    function _revokeTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _revokeRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleRevoked(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants a certain role to a certain address.\\n     */\\n    function _grantRole(Role storage role, address account) internal {\\n        if (role.indexes[account] == 0) {\\n            role.members.push(account);\\n            role.indexes[account] = role.members.length;\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes a certain role from a certain address.\\n     */\\n    function _revokeRole(Role storage role, address account) internal {\\n        if (role.indexes[account] != 0) {\\n            uint256 index = role.indexes[account] - 1;\\n            uint256 lastIndex = role.members.length - 1;\\n            address lastAccount = role.members[lastIndex];\\n\\n            role.members[index] = lastAccount;\\n            role.indexes[lastAccount] = index + 1;\\n\\n            role.members.pop();\\n            delete role.indexes[account];\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId.\\n     * Should only be used for burning tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId) internal {\\n        _tokenRolesVersion[tokenId].increment();\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId and grants the owner role to a new address.\\n     * Should only be used for transferring tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId, address newOwner) internal {\\n        _clearAllTokenRoles(tokenId);\\n        _grantTokenRole(tokenId, Roles.Owner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x116e95aebf5f69698c91d6b4605e934f19427ee43939eaf970df90d178d64cc0\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 2715,
                "contract": "contracts/FleekAccessControl.sol:FleekAccessControl",
                "label": "_collectionRolesVersion",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(Counter)1510_storage"
              },
              {
                "astId": 2723,
                "contract": "contracts/FleekAccessControl.sol:FleekAccessControl",
                "label": "_collectionRoles",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))"
              },
              {
                "astId": 2728,
                "contract": "contracts/FleekAccessControl.sol:FleekAccessControl",
                "label": "_tokenRolesVersion",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_struct(Counter)1510_storage)"
              },
              {
                "astId": 2738,
                "contract": "contracts/FleekAccessControl.sol:FleekAccessControl",
                "label": "_tokenRoles",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)))"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
              },
              "t_enum(Roles)2664": {
                "encoding": "inplace",
                "label": "enum FleekAccessControl.Roles",
                "numberOfBytes": "1"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)": {
                "encoding": "mapping",
                "key": "t_enum(Roles)2664",
                "label": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)",
                "numberOfBytes": "32",
                "value": "t_struct(Role)2712_storage"
              },
              "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)"
              },
              "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))"
              },
              "t_mapping(t_uint256,t_struct(Counter)1510_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct Counters.Counter)",
                "numberOfBytes": "32",
                "value": "t_struct(Counter)1510_storage"
              },
              "t_struct(Counter)1510_storage": {
                "encoding": "inplace",
                "label": "struct Counters.Counter",
                "members": [
                  {
                    "astId": 1509,
                    "contract": "contracts/FleekAccessControl.sol:FleekAccessControl",
                    "label": "_value",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "32"
              },
              "t_struct(Role)2712_storage": {
                "encoding": "inplace",
                "label": "struct FleekAccessControl.Role",
                "members": [
                  {
                    "astId": 2708,
                    "contract": "contracts/FleekAccessControl.sol:FleekAccessControl",
                    "label": "indexes",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_mapping(t_address,t_uint256)"
                  },
                  {
                    "astId": 2711,
                    "contract": "contracts/FleekAccessControl.sol:FleekAccessControl",
                    "label": "members",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_array(t_address)dyn_storage"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "contracts/FleekERC721.sol": {
        "FleekERC721": {
          "abi": [
            {
              "inputs": [
                { "internalType": "string", "name": "_name", "type": "string" },
                {
                  "internalType": "string",
                  "name": "_symbol",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "approved",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "apName",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "bool",
                  "name": "verified",
                  "type": "bool"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "ChangeAccessPointContentVerify",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "apName",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "bool",
                  "name": "verified",
                  "type": "bool"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "ChangeAccessPointNameVerify",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "apName",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "score",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "ChangeAccessPointScore",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "byAddress",
                  "type": "address"
                }
              ],
              "name": "CollectionRoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "byAddress",
                  "type": "address"
                }
              ],
              "name": "CollectionRoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "apName",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "NewAccessPoint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "token",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "commitHash",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "NewBuild",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "token",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "NewTokenDescription",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "token",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "ENS",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "NewTokenENS",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "token",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "externalURL",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "NewTokenExternalURL",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "token",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "image",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "NewTokenImage",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "token",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "triggeredBy",
                  "type": "address"
                }
              ],
              "name": "NewTokenName",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "string",
                  "name": "apName",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "RemoveAccessPoint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "byAddress",
                  "type": "address"
                }
              ],
              "name": "TokenRoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "byAddress",
                  "type": "address"
                }
              ],
              "name": "TokenRoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                { "internalType": "string", "name": "apName", "type": "string" }
              ],
              "name": "addAccessPoint",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "appAccessPoints",
              "outputs": [
                { "internalType": "string[]", "name": "", "type": "string[]" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                { "internalType": "uint256", "name": "", "type": "uint256" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "burn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "string", "name": "apName", "type": "string" }
              ],
              "name": "decreaseAccessPointScore",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "string", "name": "apName", "type": "string" }
              ],
              "name": "getAccessPointJSON",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                { "internalType": "address", "name": "", "type": "address" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "name": "getCollectionRoleMembers",
              "outputs": [
                { "internalType": "address[]", "name": "", "type": "address[]" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "name": "getTokenRoleMembers",
              "outputs": [
                { "internalType": "address[]", "name": "", "type": "address[]" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantCollectionRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantTokenRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasCollectionRole",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasTokenRole",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "string", "name": "apName", "type": "string" }
              ],
              "name": "increaseAccessPointScore",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "string", "name": "apName", "type": "string" }
              ],
              "name": "isAccessPointNameVerified",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "to", "type": "address" },
                { "internalType": "string", "name": "name", "type": "string" },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "externalURL",
                  "type": "string"
                },
                { "internalType": "string", "name": "ENS", "type": "string" },
                {
                  "internalType": "string",
                  "name": "commitHash",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "gitRepository",
                  "type": "string"
                }
              ],
              "name": "mint",
              "outputs": [
                { "internalType": "uint256", "name": "", "type": "uint256" }
              ],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                { "internalType": "address", "name": "", "type": "address" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "string", "name": "apName", "type": "string" }
              ],
              "name": "removeAccessPoint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeCollectionRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum FleekAccessControl.Roles",
                  "name": "role",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeTokenRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "apName",
                  "type": "string"
                },
                { "internalType": "bool", "name": "verified", "type": "bool" }
              ],
              "name": "setAccessPointContentVerify",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "apName",
                  "type": "string"
                },
                { "internalType": "bool", "name": "verified", "type": "bool" }
              ],
              "name": "setAccessPointNameVerify",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                { "internalType": "bool", "name": "approved", "type": "bool" }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "_commitHash",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "_gitRepository",
                  "type": "string"
                }
              ],
              "name": "setTokenBuild",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "_tokenDescription",
                  "type": "string"
                }
              ],
              "name": "setTokenDescription",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "_tokenENS",
                  "type": "string"
                }
              ],
              "name": "setTokenENS",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "_tokenExternalURL",
                  "type": "string"
                }
              ],
              "name": "setTokenExternalURL",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "_tokenName",
                  "type": "string"
                }
              ],
              "name": "setTokenName",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                { "internalType": "bool", "name": "", "type": "bool" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                { "internalType": "string", "name": "", "type": "string" }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                { "internalType": "address", "name": "to", "type": "address" },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "addAccessPoint(uint256,string)": {
                "details": "Add a new AccessPoint register for an app token. The AP name should be a DNS or ENS url and it should be unique. Anyone can add an AP but it should requires a payment. May emit a {NewAccessPoint} event. Requirements: - the tokenId must be minted and valid. IMPORTANT: The payment is not set yet"
              },
              "appAccessPoints(uint256)": {
                "details": "A view function to gether the list of mirrros for a given app. Requirements: - the tokenId must be minted and valid."
              },
              "approve(address,uint256)": {
                "details": "See {IERC721-approve}."
              },
              "balanceOf(address)": { "details": "See {IERC721-balanceOf}." },
              "burn(uint256)": {
                "details": "Burns a previously minted `tokenId`. May emit a {Transfer} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenOwner` role."
              },
              "constructor": {
                "details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."
              },
              "decreaseAccessPointScore(string)": {
                "details": "Decreases the score of a AccessPoint registry if is greater than 0. May emit a {ChangeAccessPointScore} event. Requirements: - the AP must exist."
              },
              "getAccessPointJSON(string)": {
                "details": "A view function to gether information about an AccessPoint. It returns a JSON string representing the AccessPoint information. Requirements: - the AP must exist."
              },
              "getApproved(uint256)": {
                "details": "See {IERC721-getApproved}."
              },
              "getCollectionRoleMembers(uint8)": {
                "details": "Returns an array of addresses that all have the collection role."
              },
              "getTokenRoleMembers(uint256,uint8)": {
                "details": "Returns an array of addresses that all have the same token role for a certain tokenId."
              },
              "grantCollectionRole(uint8,address)": {
                "details": "Grants the collection role to an address. Requirements: - the caller should have the collection role."
              },
              "grantTokenRole(uint256,uint8,address)": {
                "details": "Grants the token role to an address. Requirements: - the caller should have the token role."
              },
              "hasCollectionRole(uint8,address)": {
                "details": "Returns `True` if a certain address has the collection role."
              },
              "hasTokenRole(uint256,uint8,address)": {
                "details": "Returns `True` if a certain address has the token role."
              },
              "increaseAccessPointScore(string)": {
                "details": "Increases the score of a AccessPoint registry. May emit a {ChangeAccessPointScore} event. Requirements: - the AP must exist."
              },
              "isAccessPointNameVerified(string)": {
                "details": "A view function to check if a AccessPoint is verified. Requirements: - the AP must exist."
              },
              "isApprovedForAll(address,address)": {
                "details": "See {IERC721-isApprovedForAll}."
              },
              "mint(address,string,string,string,string,string,string)": {
                "details": "Mints a token and returns a tokenId. If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event. Requirements: - the caller must have ``collectionOwner``'s admin role."
              },
              "name()": { "details": "See {IERC721Metadata-name}." },
              "ownerOf(uint256)": { "details": "See {IERC721-ownerOf}." },
              "removeAccessPoint(string)": {
                "details": "Remove an AccessPoint registry for an app token. It will also remove the AP from the app token APs list. May emit a {RemoveAccessPoint} event. Requirements: - the AP must exist. - must be called by the AP owner."
              },
              "revokeCollectionRole(uint8,address)": {
                "details": "Revokes the collection role of an address. Requirements: - the caller should have the collection role."
              },
              "revokeTokenRole(uint256,uint8,address)": {
                "details": "Revokes the token role of an address. Requirements: - the caller should have the token role."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "See {IERC721-safeTransferFrom}."
              },
              "setAccessPointContentVerify(string,bool)": {
                "details": "Set the content verification of a AccessPoint registry. May emit a {ChangeAccessPointContentVerify} event. Requirements: - the AP must exist. - the sender must have the token controller role."
              },
              "setAccessPointNameVerify(string,bool)": {
                "details": "Set the name verification of a AccessPoint registry. May emit a {ChangeAccessPointNameVerify} event. Requirements: - the AP must exist. - the sender must have the token controller role."
              },
              "setApprovalForAll(address,bool)": {
                "details": "See {IERC721-setApprovalForAll}."
              },
              "setTokenBuild(uint256,string,string)": {
                "details": "Adds a new build to a minted `tokenId`'s builds mapping. May emit a {NewBuild} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
              },
              "setTokenDescription(uint256,string)": {
                "details": "Updates the `description` metadata field of a minted `tokenId`. May emit a {NewTokenDescription} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
              },
              "setTokenENS(uint256,string)": {
                "details": "Updates the `ENS` metadata field of a minted `tokenId`. May emit a {NewTokenENS} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
              },
              "setTokenExternalURL(uint256,string)": {
                "details": "Updates the `externalURL` metadata field of a minted `tokenId`. May emit a {NewTokenExternalURL} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
              },
              "setTokenName(uint256,string)": {
                "details": "Updates the `name` metadata field of a minted `tokenId`. May emit a {NewTokenName} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              },
              "symbol()": { "details": "See {IERC721Metadata-symbol}." },
              "tokenURI(uint256)": {
                "details": "Returns the token metadata associated with the `tokenId`. Returns a based64 encoded string value of the URI. Requirements: - the tokenId must be minted and valid."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC721-transferFrom}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_string_fromMemory": {
                  "entryPoint": 505,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 452,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage_1838": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 822,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "clean_up_bytearray_end_slots_string_storage_1837": {
                  "entryPoint": 734,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_byte_array_to_storage_from_string_to_string": {
                  "entryPoint": 914,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "extract_byte_array_length": {
                  "entryPoint": 671,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_grantCollectionRole": {
                  "entryPoint": 1172,
                  "id": 3036,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 429,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234620001a85762004bf4803803806200001d81620001c4565b9283398101604082820312620001a15781516001600160401b0391908281116200019857816200004f918501620001f9565b92602091828201518481116200018d576200006b9201620001f9565b9183519081116200017d575b60009162000091826200008b85546200029f565b620002de565b80601f8311600114620000ef57508190620000c8958492620000e3575b50508160011b916000199060031b1c191617905562000392565b620000d33362000494565b60405161465e9081620005968239f35b015190503880620000ae565b600080529194601f1986167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639385905b82821062000164575050916001939187620000c89894106200014a575b505050811b01905562000392565b015160001960f88460031b161c191690553880806200013c565b806001869782949787015181550196019401906200011f565b62000187620001ad565b62000077565b505050505050600080fd5b50505050600080fd5b5050600080fd5b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620001ea57604052565b620001f4620001ad565b604052565b81601f8201121562000297578051906001600160401b03821162000287575b6020906200022f601f8401601f19168301620001c4565b938385528284830101116200027d5782906000905b8383831062000264575050116200025a57505090565b6000918301015290565b8193508281939201015182828801015201839162000244565b5050505050600080fd5b62000291620001ad565b62000218565b505050600080fd5b90600182811c92168015620002d3575b6020831014620002bb57565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691620002af565b601f8111620002eb575050565b60009081805260208220906020601f850160051c830194106200032b575b601f0160051c01915b8281106200031f57505050565b81815560010162000312565b909250829062000309565b90601f821162000344575050565b60019160009083825260208220906020601f850160051c8301941062000387575b601f0160051c01915b8281106200037c5750505050565b81815583016200036e565b909250829062000365565b80519091906001600160401b03811162000484575b600190620003c181620003bb84546200029f565b62000336565b602080601f8311600114620003ff575081929394600092620003f3575b5050600019600383901b1c191690821b179055565b015190503880620003de565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b8882106200046c575050838596971062000452575b505050811b019055565b015160001960f88460031b161c1916905538808062000448565b80878596829496860151815501950193019062000433565b6200048e620001ad565b620003a7565b600654600090815260076020908152604080832083805282528083206001600160a01b0385168452918290528220541562000506575b506040513381526001600160a01b0392909216917fcf081ed2b728e3115904be00eb8927b2375ff3401839b37f7accfa1bb2bee15c90602090a3565b6001810180546801000000000000000081101562000585575b600181018083558110156200056b57818452602080852090910180546001600160a01b0319166001600160a01b03871690811790915591546000928352929052604090205538620004ca565b5050634e487b7160e01b8252506032600452602492509050fd5b6200058f620001ad565b6200051f56fe6040608081526004361015610015575b50600080fd5b600090813560e01c806301468deb1461063f57806301ffc9a71461062357806306fdde0314610607578063081812fc146105eb578063095ea7b3146105d357806323b872dd146105bb578063246a908b146105a357806327dc5cec146105875780632d957aad1461056f5780632f1e8f0a1461050b578063353b07a4146104e45780633806f152146104cc57806342842e0e146104b457806342966c681461049d57806342e44bbf146104855780636352211e1461045057806370a08231146104345780637469a03b1461041d57806378278cca146104055780638c3c0a44146103ed57806394ec65c5146103d657806395d89b41146103ba578063a22cb465146103a2578063a27d0b271461038a578063a397c83014610373578063aba8112514610346578063b20b94f11461032e578063b30437a01461031b578063b42dbe38146102fe578063b88d4fde146102e3578063c87b56dd146102bc578063cdb0e89e146102a4578063d7a75be114610288578063e94472501461026b578063e985e9c514610202578063f6be6b78146101d75763f9315177146101b9575061000f565b346101d3576101d06101ca36610900565b90612914565b51f35b5080fd5b50346101d3576101fe91506101f36101ee36610761565b61341c565b905191829182610c5c565b0390f35b50346101d3576101fe915061025a61025361023c61021f36610c29565b6001600160a01b0390911660009081526005602052604090209091565b9060018060a01b0316600052602052604060002090565b5460ff1690565b905190151581529081906020820190565b50346101d3576101fe915061025a61028236610959565b90611aec565b50346101d3576101fe915061025a61029f3661092f565b613154565b50346101d3576101d06102b636610900565b90612a74565b50346101d3576101fe91506102d86102d336610761565b6124fc565b905191829182610750565b50346101d3576101d06102f536610bb9565b929190916112c7565b50346101d3576101fe915061025a61031536610675565b91611b88565b506101d061032836610900565b90612c8a565b50346101d3576101d061034036610a4d565b906132e3565b506101fe915061036461035836610adc565b95949094939193612011565b90519081529081906020820190565b50346101d3576101d06103853661092f565b613208565b50346101d3576101d061039c36610675565b916118b1565b50346101d3576101d06103b436610aab565b90611131565b50346101d3576101fe91506103ce366106e8565b6102d8610e97565b50346101d3576101d06103e83661092f565b61317c565b50346101d3576101d06103ff36610959565b9061196c565b50346101d3576101d061041736610900565b906129d4565b50346101d3576101d061042f3661092f565b612e09565b50346101d3576101fe915061036461044b36610a88565b610cbe565b50346101d3576101fe915061046c61046736610761565b610d84565b90516001600160a01b0390911681529081906020820190565b50346101d3576101d061049736610a4d565b90613395565b50346101d3576101d06104af36610761565b6135a8565b50346101d3576101d06104c63661079a565b9161128d565b50346101d3576101d06104de36610a07565b916134bc565b50346101d3576101fe91506105006104fb366109ec565b611c12565b9051918291826109a8565b50346101d3576101fe9150610500600161056961056461052a36610989565b9190610555610543826000526008602052604060002090565b54916000526009602052604060002090565b90600052602052604060002090565b611aa0565b01611bba565b50346101d3576101d061058136610959565b906117a8565b50346101d3576101fe91506102d861059e3661092f565b612fdf565b50346101d3576101d06105b536610900565b90612b11565b50346101d3576101d06105cd3661079a565b9161125d565b50346101d3576101d06105e536610773565b90610fcd565b50346101d3576101fe915061046c61060236610761565b6110f3565b50346101d3576101fe915061061b366106e8565b6102d8610de3565b50346101d3576101fe915061025a61063a366106cd565b612855565b50346101d3576101d061065136610675565b916119fe565b600435906001600160a01b03821682141561066e57565b5050600080fd5b606090600319011261000f576004359060243560028110156106b257906044356001600160a01b0381168114156106a95790565b50505050600080fd5b505050600080fd5b6001600160e01b03198116141561000f57565b602090600319011261000f576004356106e5816106ba565b90565b600090600319011261000f57565b918091926000905b82821061071657501161070f575050565b6000910152565b915080602091830151818601520182916106fe565b90602091610744815180928185528580860191016106f6565b601f01601f1916010190565b9060206106e592818152019061072b565b602090600319011261000f5760043590565b604090600319011261000f576004356001600160a01b03811681141561066e579060243590565b606090600319011261000f576001600160a01b03906004358281168114156106b257916024359081168114156106b2579060443590565b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761080357604052565b61080b6107d1565b604052565b602081019081106001600160401b0382111761080357604052565b90601f801991011681019081106001600160401b0382111761080357604052565b60405190610859826107e8565b565b6040519060c082018281106001600160401b0382111761080357604052565b6020906001600160401b038111610897575b601f01601f19160190565b61089f6107d1565b61088c565b9291926108b08261087a565b916108be604051938461082b565b8294818452818301116108db578281602093846000960137010152565b5050505050600080fd5b9080601f830112156106b2578160206106e5933591016108a4565b90604060031983011261066e5760043591602435906001600160401b0382116106a9576106e5916004016108e5565b602060031982011261066e57600435906001600160401b0382116106b2576106e5916004016108e5565b604090600319011261000f57600435600281101561066e57906024356001600160a01b0381168114156106b25790565b604090600319011261000f576004359060243560028110156106b25790565b6020908160408183019282815285518094520193019160005b8281106109cf575050505090565b83516001600160a01b0316855293810193928101926001016109c1565b602090600319011261000f57600435600281101561066e5790565b606060031982011261066e57600435916001600160401b036024358181116108db5783610a36916004016108e5565b926044359182116108db576106e5916004016108e5565b604060031982011261066e57600435906001600160401b0382116106b257610a77916004016108e5565b906024358015158114156106b25790565b602090600319011261000f576004356001600160a01b03811681141561066e5790565b604090600319011261000f576004356001600160a01b03811681141561066e57906024358015158114156106b25790565b60e060031982011261066e57610af0610657565b916024356001600160401b03928382116108db57610b128160049384016108e5565b93604435818111610bad5782610b299185016108e5565b93606435828111610ba05783610b409186016108e5565b93608435838111610b925784610b579183016108e5565b9360a435848111610b835781610b6e9184016108e5565b9360c435908111610b83576106e592016108e5565b50505050505050505050600080fd5b505050505050505050600080fd5b5050505050505050600080fd5b50505050505050600080fd5b90608060031983011261066e576001600160a01b03916004358381168114156106a957926024359081168114156106a9579160443591606435906001600160401b038211610c1e5780602383011215610c1e578160246106e5936004013591016108a4565b505050505050600080fd5b604090600319011261000f576001600160a01b03906004358281168114156106b257916024359081168114156106b25790565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610c905750505050505090565b9091929394958480610cae600193603f198682030187528a5161072b565b9801930193019194939290610c80565b6001600160a01b03168015610cde57600052600360205260406000205490565b505060405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b15610d3e57565b5060405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b03166106e5811515610d37565b90600182811c92168015610dd9575b6020831014610dc157565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691610db6565b60405190600082815491610df683610da7565b80835292600190818116908115610e7a5750600114610e1d575b506108599250038361082b565b600080805291507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b848310610e5f5750610859935050810160200138610e10565b81935090816020925483858a01015201910190918592610e46565b94505050505060ff19166020830152610859826040810138610e10565b60405190600082600191825492610ead84610da7565b80845293818116908115610e7a5750600114610ed057506108599250038361082b565b600081815291507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b848310610f125750610859935050810160200138610e10565b81935090816020925483858a01015201910190918592610ef9565b9060405191826000825492610f4184610da7565b908184526001948581169081600014610fae5750600114610f6b575b50506108599250038361082b565b9093915060005260209081600020936000915b818310610f9657505061085993508201013880610f5d565b85548884018501529485019487945091830191610f7e565b9550505050505060ff1916602083015261085982604081013880610f5d565b90610fd781610d84565b6001600160a01b0381811690841681146110a0573314908115611072575b501561100457610859916115b1565b505060405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260849150fd5b6001600160a01b0316600090815260056020526040902060ff915061109890339061023c565b541638610ff5565b5050505050608460405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b600081815260026020526040902054611116906001600160a01b03161515610d37565b6000908152600460205260409020546001600160a01b031690565b6001600160a01b03811691903383146111b257816111716111829233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b60405190151581527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3565b50505050606460405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b1561120157565b5060405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b9061085992916112756112708433611363565b6111fa565b611436565b6040519061128782610810565b60008252565b90916108599260405192602084018481106001600160401b038211176112ba575b604052600084526112c7565b6112c26107d1565b6112ae565b906112eb9392916112db6112708433611363565b6112e6838383611436565b61168d565b156112f257565b5060405162461bcd60e51b81528061130c60048201611310565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6001600160a01b038061137584610d84565b1692818316928484149485156113ab575b50508315611395575b50505090565b6113a1919293506110f3565b161438808061138f565b60009081526005602090815260408083206001600160a01b03949094168352929052205460ff1693503880611386565b156113e257565b5060405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b61145a9061144384610d84565b6001600160a01b03828116939091821684146113db565b831692831561155b576114d882611475878461153296612899565b611497856114916114858a610d84565b6001600160a01b031690565b146113db565b6114be6114ae886000526004602052604060002090565b80546001600160a01b0319169055565b6001600160a01b0316600090815260036020526040902090565b80546000190190556001600160a01b038116600090815260036020526040902060018154019055611513856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b505050505050608460405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152fd5b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b03806115ea84610d84565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261066e57516106e5816106ba565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526106e59291019061072b565b3d15611688573d9061166e8261087a565b9161167c604051938461082b565b82523d6000602084013e565b606090565b92909190823b1561173c576116c0926020926000604051809681958294630a85bd0160e11b9a8b8552336004860161162c565b03926001600160a01b03165af16000918161171c575b5061170e575050506116e661165d565b8051908161170957505060405162461bcd60e51b81528061130c60048201611310565b602001fd5b6001600160e01b0319161490565b61173591925061172c3d8261082b565b3d810190611617565b90386116d6565b50505050600190565b1561174c57565b5060405162461bcd60e51b815260206004820152602d60248201527f466c65656b416363657373436f6e74726f6c3a206d757374206861766520636f60448201526c6c6c656374696f6e20726f6c6560981b6064820152608490fd5b6117b133611ab8565b801561183f575b6117c190611745565b60065460005260076020526117e3826117de836040600020611aa0565b611de9565b6002811015611826576040513381526001600160a01b03909216917fcf081ed2b728e3115904be00eb8927b2375ff3401839b37f7accfa1bb2bee15c90602090a3565b505050634e487b7160e01b600052602160045260246000fd5b506117c161184c33611ab8565b90506117b8565b1561185a57565b5060405162461bcd60e51b815260206004820152602860248201527f466c65656b416363657373436f6e74726f6c3a206d757374206861766520746f6044820152676b656e20726f6c6560c01b6064820152608490fd5b6118bb3382611b09565b8015611957575b6118cb90611853565b6000818152600860205260408120546009602052604082209082526020526118fa846117de8560408520611aa0565b600283101561193e57506040513381526001600160a01b03909316927f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c23990602090a4565b634e487b7160e01b815260216004526024945092505050fd5b506118cb6119653383611b09565b90506118c2565b61197533611ab8565b80156119ea575b61198590611745565b60065460005260076020526119a7826119a2836040600020611aa0565b611eec565b6002811015611826576040513381526001600160a01b03909216917faeff57f0f5e4d3d10a37d4a70fde8ed67a95e67b251d5c512c0ea98c380d2f9590602090a3565b506119856119f733611ab8565b905061197c565b611a083382611b09565b8015611a8b575b611a1890611853565b600081815260086020526040812054600960205260408220908252602052611a47846119a28560408520611aa0565b600283101561193e57506040513381526001600160a01b03909316927fe52d746e4c78c98c6bfa291b273406905c3e8550b7d911a6bea686368c2dc79d90602090a4565b50611a18611a993383611b09565b9050611a0f565b90600281101561182657600052602052604060002090565b600654600090815260076020908152604080832083805282528083206001600160a01b039094168352929052205b54151590565b9061023c611ae69260065460005260076020526040600020611aa0565b60009081526008602090815260408083205460098352818420908452825280832083805282528083206001600160a01b03909416835292905220611ae6565b6000908152600860209081526040808320546009835281842090845282528083206001845282528083206001600160a01b03909416835292905220611ae6565b611ae6929161023c91600052600860205260406000205460096020526040600020906000526020526040600020611aa0565b9060405191828154918282526020928383019160005283600020936000905b828210611bef575050506108599250038361082b565b85546001600160a01b031684526001958601958895509381019390910190611bd9565b611c32906006546000526020906007825260019283916040600020611aa0565b01604051918293849382845491828152019360005282600020926000905b828210611c68575050505050906106e591038261082b565b84546001600160a01b03168652879650948501949383019390830190611c50565b600081819282527f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c23960206008815260408085205460098352818620908652825280852085805282528085208083528186205415611ce9575b5051338152a4565b60018101611d0b8154600160401b811015611d2f575b60018101835582611dc3565b81549060018060a01b039060031b1b19169055549086805283528186205538611ce1565b611d376107d1565b611cff565b6000908082526008602052604082205460096020526040832090835260205260408220828052602052611d728360408420611de9565b6040513381526001600160a01b03909316927f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c23990602090a4565b50634e487b7160e01b600052603260045260246000fd5b8054821015611ddc575b60005260206000200190600090565b611de4611dac565b611dcd565b6001600160a01b03821660009081526020829052604090209091905415611e0e575050565b611e759060018301611e5c82611e388354600160401b811015611e78575b60018101855584611dc3565b90919082549060031b9160018060a01b039283811b93849216901b16911916179055565b54929060018060a01b0316600052602052604060002090565b55565b611e806107d1565b611e2c565b50634e487b7160e01b600052601160045260246000fd5b60018110611eac575b6000190190565b611eb4611e85565b611ea5565b6002906002198111611ec9570190565b611ed1611e85565b0190565b50634e487b7160e01b600052603160045260246000fd5b6001600160a01b038216600090815260208290526040902054611f0d575050565b6001600160a01b03821660009081526020829052604081209092611e759290915460018110612004575b841990818101916001840191611fa2611f5c83855460018110611ff7575b0185611dc3565b90546001600160a01b039660039290921b1c861690611f7f82611e388389611dc3565b60011910611fea575b6001600160a01b0316600090815260208790526040902090565b5581548015611fdd575b0191611fb88383611dc3565b909182549160031b1b19169055559060018060a01b0316600052602052604060002090565b611fe5611ed5565b611fac565b611ff2611e85565b611f88565b611fff611e85565b611f55565b61200c611e85565b611f37565b9294919590939561202133611ab8565b80156121ea575b61203190611745565b600a54966001600160a01b03851694851561219c576106e597612147612159948b61218b996120ea6121509661208b61208661208286600052600260205260018060a01b0360406000205416151590565b1590565b61249c565b6120958185611d3c565b6000848152600260205260409020546120b7906001600160a01b03161561249c565b6001600160a01b038116600090815260036020526040902060018154019055611513846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a46121206001600a5401600a55565b61213e6121378d600052600b602052604060002090565b9a8b612271565b60018a01612271565b60028801612271565b60038601612271565b6000600485015561216861084c565b91825260208201526121866005840160008052602052604060002090565b61234d565b6006612195612369565b9101612408565b50505050505050505050606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b506120316121f733611ab8565b9050612028565b50634e487b7160e01b600052600060045260246000fd5b818110612220575050565b60008155600101612215565b9190601f811161223b57505050565b610859926000526020600020906020601f840160051c83019310612267575b601f0160051c0190612215565b909150819061225a565b91909182516001600160401b038111612340575b612299816122938454610da7565b8461222c565b602080601f83116001146122d55750819293946000926122ca575b50508160011b916000199060031b1c1916179055565b0151905038806122b4565b90601f198316956122eb85600052602060002090565b926000905b8882106123285750508360019596971061230f575b505050811b019055565b015160001960f88460031b161c19169055388080612305565b806001859682949686015181550195019301906122f0565b6123486107d1565b612285565b6001602061085993612360815185612271565b01519101612271565b60405161237581610810565b6000815290565b6001600160fe1b038111600116612394575b60021b90565b61239c611e85565b61238e565b6123ab8154610da7565b90816123b5575050565b81601f600093116001146123c7575055565b818352602083206123e391601f0160051c810190600101612215565b8160208120915555565b61085992916123fb57612271565b6124036121fe565b612271565b815191600160401b831161248f575b8154838355808410612460575b50602080910191600052806000206000925b848410612444575050505050565b6001838261245483945186612271565b01920193019290612436565b8260005283602060002091820191015b81811061247d5750612424565b806124896001926123a1565b01612470565b6124976107d1565b612417565b156124a357565b5060405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b90611ed1602092828151948592016106f6565b6000818152600260205260409020546001600160a01b0316151561251f90610d37565b61252881610d84565b90600052600b602052604060002060405191612543836107e8565b601d83527f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602084015261257f906001600160a01b0316613b88565b6003820161258c83610f2d565b61259582610f2d565b61259e91613c37565b9060058401600485015491816125bf84809490600052602052604060002090565b926125d39190600052602052604060002090565b600101926125e0906139da565b604051607b60f81b602082015267113730b6b2911d1160c11b6021820152968796919591612611602989018361395d565b61088b60f21b81526002016e113232b9b1b934b83a34b7b7111d1160891b8152600f01612641906001840161395d565b61088b60f21b8152600201681137bbb732b9111d1160b91b8152600901612667916124e9565b61088b60f21b81526002016f1132bc3a32b93730b62fbab936111d1160811b81526010016126979160020161395d565b61088b60f21b8152600201681134b6b0b3b2911d1160b91b81526009016126bd916124e9565b61088b60f21b81526002016e2261747472696275746573223a205b60881b8152600f017f7b2274726169745f74797065223a2022454e53222c202276616c7565223a22008152601f0161270f9161395d565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a2022436f6d6d69742048617368222c20227681526630b63ab2911d1160c91b602082015260270161275a9161395d565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a20225265706f7369746f7279222c20227661815265363ab2911d1160d11b60208201526026016127a49161395d565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a202256657273696f6e222c202276616c7565815262111d1160e91b60208201526023016127eb916124e9565b61227d60f01b8152600201605d60f81b8152600101607d60f81b81526001010390601f1991828101825261281f908261082b565b61282890613882565b916040519283916020830161283c916124e9565b612845916124e9565b0390810182526106e5908261082b565b63ffffffff60e01b166380ac58cd60e01b8114908115612888575b811561287a575090565b6301ffc9a760e01b14919050565b635b5e139f60e01b81149150612870565b6001600160a01b0390811615801580612909575b156128d7575050816128d2610859936000526008602052604060002060018154019055565b611d3c565b156128e6575061085991611d3c565b16156128ef5750565b610859906000526008602052604060002060018154019055565b5081831615156128ad565b61291e3382611b48565b801561299f575b61292e90611853565b600081815260026020526040902054612951906001600160a01b03161515610d37565b80600052600b60205261296b826002604060002001612271565b61297533926129b4565b907fedbf1209b3baa7c1b5c43052ce5c511e243b3241d9f67733141d14f1da88cba16000604051a4565b5061292e6129ad3383611b09565b9050612925565b6129cc906020604051928284809451938492016106f6565b810103902090565b6129de3382611b48565b8015612a5f575b6129ee90611853565b600081815260026020526040902054612a11906001600160a01b03161515610d37565b80600052600b602052612a2b826003604060002001612271565b612a3533926129b4565b907f91ce7fcd4462481791c3fe849f7049373c5b43ef44aed48e7f1ecce781586e156000604051a4565b506129ee612a6d3383611b09565b90506129e5565b612a7e3382611b48565b8015612afc575b612a8e90611853565b600081815260026020526040902054612ab1906001600160a01b03161515610d37565b80600052600b602052612ac8826040600020612271565b612ad233926129b4565b907ffbbfca16a2770c7ca6e7063ab1a7eea5fe441ffef818325db51752066a6b128a6000604051a4565b50612a8e612b0a3383611b09565b9050612a85565b612b1b3382611b48565b8015612b9c575b612b2b90611853565b600081815260026020526040902054612b4e906001600160a01b03161515610d37565b80600052600b602052612b68826001604060002001612271565b612b7233926129b4565b907fd771eaa1c1382b0a9867125fcd921fdeddd211538b5381353a877abfbe3b50a46000604051a4565b50612b2b612baa3383611b09565b9050612b22565b6020612bca9181604051938285809451938492016106f6565b8101600c81520301902090565b600360a0918351815560208401516001820155604084015160028201550191612c1260608201511515849060ff801983541691151516179055565b6080810151835461ff00191690151560081b61ff00161783550151815462010000600160b01b03191660109190911b62010000600160b01b0316179055565b90612c7461085992805490600160401b821015612c7d575b600182018155611dc3565b6123fb57612271565b612c856107d1565b612c69565b600081815260026020526040902054612cad906001600160a01b03161515610d37565b6001600160a01b036003612cc084612bb1565b015460101c16612d7457612d216006612ce383600052600b602052604060002090565b0154612ced61085b565b83815260208101919091526000604082018190526060820181905260808201523360a0820152612d1c84612bb1565b612bd7565b612d41826006612d3b84600052600b602052604060002090565b01612c51565b612d4b33926129b4565b7f8140554c907b4ba66a04ea1f43b882cba992d3db4cd5c49298a56402d7b36ca26000604051a4565b505060405162461bcd60e51b815260206004820152601e60248201527f466c65656b4552433732313a20415020616c7265616479206578697374730000604482015260649150fd5b15612dc357565b5060405162461bcd60e51b815260206004820152601760248201527f466c65656b4552433732313a20696e76616c69642041500000000000000000006044820152606490fd5b6001600160a01b03612e2d816003612e2085612bb1565b015460101c161515612dbc565b6003612e3883612bb1565b015460101c16331415612f1257612ee6612e5182612bb1565b5491612ebd612e6a84600052600b602052604060002090565b60066001612e7785612bb1565b01549101906001612eb6612e9d612e97612e918654611e9c565b86611dc3565b50610f2d565b612eb181612eab8688611dc3565b906123ed565b612bb1565b0155612f59565b612ee1612ec982612bb1565b60036000918281558260018201558260028201550155565b6129b4565b9033917fef2f6bed86b96d79b41799f5285f73b31274bb303ebe5d55a3cb48c567ab2db06000604051a4565b505060405162461bcd60e51b815260206004820152601d60248201527f466c65656b4552433732313a206d757374206265204150206f776e65720000006044820152606490fd5b80548015612fd2575b6000190190612f718282611dc3565b612fc5575b612f808154610da7565b9081612f8b57505055565b81601f60009311600114612f9e57505555565b81835260208320612fba91601f0160051c810190600101612215565b816020812091555555565b612fcd6121fe565b612f76565b612fda611ed5565b612f62565b6001600160a01b039081612ff282612bb1565b6003015460101c16151561300590612dbc565b61300e90612bb1565b90815461301a906139da565b906002830154613029906139da565b92600301548060081c60ff1661303e906145d4565b9161304b60ff83166145d4565b9160101c1661305990613b88565b604051607b60f81b60208201529485949193916021860169113a37b5b2b724b2111d60b11b8152600a0161308c916124e9565b600b60fa1b8152600101671139b1b7b932911d60c11b81526008016130b0916124e9565b600b60fa1b81526001016e113730b6b2ab32b934b334b2b2111d60891b8152600f016130db916124e9565b600b60fa1b8152600101711131b7b73a32b73a2b32b934b334b2b2111d60711b8152601201613109916124e9565b600b60fa1b8152600101681137bbb732b9111d1160b91b815260090161312e916124e9565b601160f91b8152600101607d60f81b815260010103601f19810182526106e5908261082b565b60ff9060039061317390612eb16001600160a01b0384612e2084612bb1565b015460081c1690565b6131926001600160a01b036003612e2084612bb1565b600261319d82612bb1565b016131a881546131f8565b90556131b381612bb1565b546131ca60026131c284612bb1565b0154926129b4565b6040519283527f3ea1c0fcf71b86fca8f96ccac3cf26fba8983d3bbbe7bd720f1865d67fbaee4360203394a4565b6001906000198114611ec9570190565b61321e6001600160a01b036003612e2084612bb1565b600261322982612bb1565b01541561329057600261323b82612bb1565b0161324681546132d6565b905561325181612bb1565b5461326060026131c284612bb1565b60405192835233927f3ea1c0fcf71b86fca8f96ccac3cf26fba8983d3bbbe7bd720f1865d67fbaee4390602090a4565b5050606460405162461bcd60e51b815260206004820152602060248201527f466c65656b4552433732313a2073636f72652063616e74206265206c6f7765726044820152fd5b8015611eac576000190190565b6132f96001600160a01b036003612e2084612bb1565b61331e61330582612bb1565b546133103382611b48565b908115613383575b50611853565b61333f82600361332d84612bb1565b019060ff801983541691151516179055565b61335261334b82612bb1565b54916129b4565b6040519182527fe2e598f7ff2dfd4bc3bd989635401b4c56846b7893cb7eace51d099f21e69bff60203394151593a4565b61338f91503390611b09565b38613318565b6133ab6001600160a01b036003612e2084612bb1565b6133b761330582612bb1565b6133df8260036133c684612bb1565b019061ff00825491151560081b169061ff001916179055565b6133eb61334b82612bb1565b6040519182527f17bd9b465aa0cdc6b308874903e9c38b13f561ecb1f2edaa8bf3969fe603d11c60203394151593a4565b60008181526002602052604090205461343f906001600160a01b03161515610d37565b6000526020600b815260066040600020018054906001600160401b0382116134af575b60405192613475818460051b018561082b565b82845260009182528082208185015b84841061349357505050505090565b60018381926134a185610f2d565b815201920193019290613484565b6134b76107d1565b613462565b9190916134c93382611b48565b8015613593575b6134d990611853565b6000818152600260205260409020546134fc906001600160a01b03161515610d37565b7f73b929bf4db6be678cdbc6d41a5fe0a2cbb84ca95572062c4a978d8bd80a41b16040928351908482018281106001600160401b03821117613586575b85528582526020820152613577600091848352600b60205260058684200160048785200161356781546131f8565b809155845260205285832061234d565b61358133956129b4565b9351a4565b61358e6107d1565b613539565b506134d96135a13383611b09565b90506134d0565b6135b23382611b09565b8015613706575b6135c290611853565b806001600160a01b03806135d583610d84565b16158015806136fe575b156136d157506135ff826000526008602052604060002060018154019055565b61360882611c89565b61361182610d84565b600083815260046020526040812080546001600160a01b0319169055911680825260036020526040822060001981540190558282526002602052613669604083206bffffffffffffffffffffffff60a01b8154169055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a46136ae60026136a883600052600b602052604060002090565b0161371b565b6136b55750565b6136cc61085991600052600b602052604060002090565b613725565b156136e4576136df82611c89565b613608565b6136df826000526008602052604060002060018154019055565b5060006135df565b506135c26137143383611b09565b90506135b9565b6106e59054610da7565b61372e816123a1565b600660019161373e8382016123a1565b61374a600282016123a1565b613756600382016123a1565b6000600482015501805490600081558161376f57505050565b6000526020600020908101905b81811061378857505050565b8061379384926123a1565b0161377c565b60405190606082018281106001600160401b03821117613809575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b6138116107d1565b6137b4565b60405190606082018281106001600160401b03821117613843575b604052602a8252604082602036910137565b61384b6107d1565b613831565b9061385a8261087a565b613867604051918261082b565b8281528092613878601f199161087a565b0190602036910137565b80511561395457613891613799565b6138b56138b06138ab6138a48551611eb9565b6003900490565b61237c565b613850565b9160208301918182518301915b828210613902575050506003905106806001146138ef576002146138e4575090565b603d90600019015390565b50603d9081600019820153600119015390565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c16880101516002860153168501015190820153019391906138c2565b506106e561127a565b60009291815461396c81610da7565b926001918083169081156139c55750600114613989575b50505050565b90919293945060005260209081600020906000915b8583106139b45750505050019038808080613983565b80548584015291830191810161399e565b60ff1916845250505001915038808080613983565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015613b0f575b506d04ee2d6d415b85acef810000000080831015613b00575b50662386f26fc1000080831015613af1575b506305f5e10080831015613ae2575b5061271080831015613ad3575b506064821015613ac3575b600a80921015613ab9575b600190816021613a71828701613850565b95860101905b613a83575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215613ab457919082613a77565b613a7c565b9160010191613a60565b9190606460029104910191613a55565b60049193920491019138613a4a565b60089193920491019138613a3d565b60109193920491019138613a2e565b60209193920491019138613a1c565b604093508104915038613a03565b906020918051821015613b2f57010190565b613b37611dac565b010190565b15613b4357565b50606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b613b90613816565b90815115613c2a575b603060208301538151600190811015613c1d575b90607860218401536029915b808311613bcc57506106e5915015613b3c565b9080600f613c0992166010811015613c10575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a613bff8587613b1d565b5360041c926132d6565b9190613bb9565b613c18611dac565b613bdf565b613c25611dac565b613bad565b613c32611dac565b613b99565b604080517f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060208201527f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e918101919091527f77332e6f72672f313939392f786c696e6b222076657273696f6e3d22312e312260608201527f2077696474683d2236343022206865696768743d22343830222076696577426f60808201527f783d2230203020363430203438302220786d6c3a73706163653d22707265736560a082015264393b32911f60d91b60c0820152651e3232b3399f60d11b60c582015291829160cb8301661e17b232b3399f60c91b81526007017f3c67207472616e73666f726d3d226d617472697828332e34322030203020332e8152741a1910199818171c9c10191a99171c9c149110101f60591b60208201526035017f3c706f6c79676f6e207374796c653d227374726f6b653a2072676228302c302c81527f30293b207374726f6b652d77696474683a20383b207374726f6b652d6461736860208201527f61727261793a206e6f6e653b207374726f6b652d6c696e656361703a2062757460408201527f743b207374726f6b652d646173686f66667365743a20303b207374726f6b652d60608201527f6c696e656a6f696e3a206d697465723b207374726f6b652d6d697465726c696d60808201527f69743a20343b2066696c6c3a20726762283135322c3135322c313833293b206660a08201527f696c6c2d72756c653a206e6f6e7a65726f3b206f7061636974793a20313b222060c08201527f766563746f722d6566666563743d226e6f6e2d7363616c696e672d7374726f6b60e08201527f65222020706f696e74733d222d35302c2d3530202d35302c35302035302c35306101008201526b101a9816169a98101110179f60a11b61012082015261012c01631e17b39f60e11b81526004017f3c67207472616e73666f726d3d226d617472697828312030203020312033303381527f2e35203131352e36372922207374796c653d222220203e00000000000000000060208201526037017f3c7465787420786d6c3a73706163653d2270726573657276652220666f6e742d81527f66616d696c793d224f70656e2053616e732220666f6e742d73697a653d22323460208201527f2220666f6e742d7374796c653d226e6f726d616c2220666f6e742d776569676860408201527f743d226e6f726d616c22207374796c653d227374726f6b653a206e6f6e653b2060608201527f7374726f6b652d77696474683a20313b207374726f6b652d646173686172726160808201527f793a206e6f6e653b207374726f6b652d6c696e656361703a20627574743b207360a08201527f74726f6b652d646173686f66667365743a20303b207374726f6b652d6c696e6560c08201527f6a6f696e3a206d697465723b207374726f6b652d6d697465726c696d69743a2060e08201527f343b2066696c6c3a2072676228302c302c30293b2066696c6c2d72756c653a206101008201527f6e6f6e7a65726f3b206f7061636974793a20313b2077686974652d73706163656101208201527f3a207072653b22203e3c747370616e20783d222d34352e372220793d22352e366101408201527f3522207374796c653d227374726f6b652d77696474683a20313b20666f6e742d6101608201527f66616d696c793a20224f70656e2053616e73222c2073616e732d73657269663b6101808201527f20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206e6f6101a08201527f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6c3a6101c08201527f2072676228302c302c30293b20223e466c65656b204e4641733c2f747370616e6101e0820152671f1e17ba32bc3a1f60c11b61020082015261020801631e17b39f60e11b81526004017f3c67207472616e73666f726d3d226d617472697828312030203020312033303281527410191b18971a1b94911039ba3cb6329e911110101f60591b60208201526035017f3c7465787420786d6c3a73706163653d2270726573657276652220666f6e742d81527f66616d696c793d224f70656e2053616e732220666f6e742d73697a653d22323860208201527f2220666f6e742d7374796c653d226e6f726d616c2220666f6e742d776569676860408201527f743d226e6f726d616c22207374796c653d227374726f6b653a206e6f6e653b2060608201527f7374726f6b652d77696474683a20313b207374726f6b652d646173686172726160808201527f793a206e6f6e653b207374726f6b652d6c696e656361703a20627574743b207360a08201527f74726f6b652d646173686f66667365743a20303b207374726f6b652d6c696e6560c08201527f6a6f696e3a206d697465723b207374726f6b652d6d697465726c696d69743a2060e08201527f343b2066696c6c3a2072676228302c302c30293b2066696c6c2d72756c653a206101008201527f6e6f6e7a65726f3b206f7061636974793a20313b2077686974652d73706163656101208201527f3a207072653b22203e3c747370616e20783d222d34342e32362220793d222d366101408201527f2e313422207374796c653d227374726f6b652d77696474683a20313b20666f6e6101608201527f742d66616d696c793a20224f70656e2053616e73222c2073616e732d736572696101808201527f663b20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206101a08201527f6e6f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6101c082015270361d103933b1141816181618149d90111f60791b6101e08201526101f10161446c916124e9565b7f3c2f747370616e3e3c747370616e20783d222d33372e31342220793d2231372e81527f343522207374796c653d227374726f6b652d77696474683a20313b20666f6e7460208201527f2d66616d696c793a20224f70656e2053616e73222c2073616e732d736572696660408201527f3b20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206e60608201527f6f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6c60808201526f1d103933b1141816181618149d90111f60811b60a082015260b00161454c916124e9565b6e1e17ba39b830b71f1e17ba32bc3a1f60891b8152600f01631e17b39f60e11b8152600401651e17b9bb339f60d11b81526006010390601f19918281018252614595908261082b565b61459e90613882565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d820161283c565b156145f9576040516145e5816107e8565b60048152637472756560e01b602082015290565b604051614605816107e8565b600581526466616c736560d81b60208201529056fea364697066735822122068c2c48eb3ccede8f14a554da8bfac0598abe0dcf3e1d816e4b1ceb4e255c8866c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x1A8 JUMPI PUSH3 0x4BF4 DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x1C4 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP3 DUP3 SUB SLT PUSH3 0x1A1 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 SWAP1 DUP3 DUP2 GT PUSH3 0x198 JUMPI DUP2 PUSH3 0x4F SWAP2 DUP6 ADD PUSH3 0x1F9 JUMP JUMPDEST SWAP3 PUSH1 0x20 SWAP2 DUP3 DUP3 ADD MLOAD DUP5 DUP2 GT PUSH3 0x18D JUMPI PUSH3 0x6B SWAP3 ADD PUSH3 0x1F9 JUMP JUMPDEST SWAP2 DUP4 MLOAD SWAP1 DUP2 GT PUSH3 0x17D JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH3 0x91 DUP3 PUSH3 0x8B DUP6 SLOAD PUSH3 0x29F JUMP JUMPDEST PUSH3 0x2DE JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH3 0xEF JUMPI POP DUP2 SWAP1 PUSH3 0xC8 SWAP6 DUP5 SWAP3 PUSH3 0xE3 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE PUSH3 0x392 JUMP JUMPDEST PUSH3 0xD3 CALLER PUSH3 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x465E SWAP1 DUP2 PUSH3 0x596 DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xAE JUMP JUMPDEST PUSH1 0x0 DUP1 MSTORE SWAP2 SWAP5 PUSH1 0x1F NOT DUP7 AND PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP4 DUP6 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH3 0x164 JUMPI POP POP SWAP2 PUSH1 0x1 SWAP4 SWAP2 DUP8 PUSH3 0xC8 SWAP9 SWAP5 LT PUSH3 0x14A JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x392 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x13C JUMP JUMPDEST DUP1 PUSH1 0x1 DUP7 SWAP8 DUP3 SWAP5 SWAP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP7 ADD SWAP5 ADD SWAP1 PUSH3 0x11F JUMP JUMPDEST PUSH3 0x187 PUSH3 0x1AD JUMP JUMPDEST PUSH3 0x77 JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x1EA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH3 0x1F4 PUSH3 0x1AD JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH3 0x297 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH3 0x287 JUMPI JUMPDEST PUSH1 0x20 SWAP1 PUSH3 0x22F PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x1C4 JUMP JUMPDEST SWAP4 DUP4 DUP6 MSTORE DUP3 DUP5 DUP4 ADD ADD GT PUSH3 0x27D JUMPI DUP3 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP4 DUP4 LT PUSH3 0x264 JUMPI POP POP GT PUSH3 0x25A JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 SWAP4 POP DUP3 DUP2 SWAP4 SWAP3 ADD ADD MLOAD DUP3 DUP3 DUP9 ADD ADD MSTORE ADD DUP4 SWAP2 PUSH3 0x244 JUMP JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x291 PUSH3 0x1AD JUMP JUMPDEST PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH3 0x2D3 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH3 0x2BB JUMPI JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH3 0x2AF JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH3 0x2EB JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 DUP1 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH3 0x32B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x31F JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x312 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH3 0x309 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP3 GT PUSH3 0x344 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH3 0x387 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x37C JUMPI POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE DUP4 ADD PUSH3 0x36E JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH3 0x365 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x484 JUMPI JUMPDEST PUSH1 0x1 SWAP1 PUSH3 0x3C1 DUP2 PUSH3 0x3BB DUP5 SLOAD PUSH3 0x29F JUMP JUMPDEST PUSH3 0x336 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH3 0x3FF JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH3 0x3F3 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x3DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x1F NOT DUP4 AND SWAP6 SWAP1 SWAP2 SWAP1 PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH3 0x46C JUMPI POP POP DUP4 DUP6 SWAP7 SWAP8 LT PUSH3 0x452 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x448 JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH3 0x433 JUMP JUMPDEST PUSH3 0x48E PUSH3 0x1AD JUMP JUMPDEST PUSH3 0x3A7 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP3 KECCAK256 SLOAD ISZERO PUSH3 0x506 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH32 0xCF081ED2B728E3115904BE00EB8927B2375FF3401839B37F7ACCFA1BB2BEE15C SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH3 0x585 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 DUP4 SSTORE DUP2 LT ISZERO PUSH3 0x56B JUMPI DUP2 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 SLOAD PUSH1 0x0 SWAP3 DUP4 MSTORE SWAP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE CODESIZE PUSH3 0x4CA JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE POP PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP3 POP SWAP1 POP REVERT JUMPDEST PUSH3 0x58F PUSH3 0x1AD JUMP JUMPDEST PUSH3 0x51F JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1468DEB EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x623 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x5EB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x5D3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x5BB JUMPI DUP1 PUSH4 0x246A908B EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0x27DC5CEC EQ PUSH2 0x587 JUMPI DUP1 PUSH4 0x2D957AAD EQ PUSH2 0x56F JUMPI DUP1 PUSH4 0x2F1E8F0A EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0x353B07A4 EQ PUSH2 0x4E4 JUMPI DUP1 PUSH4 0x3806F152 EQ PUSH2 0x4CC JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x42E44BBF EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0x7469A03B EQ PUSH2 0x41D JUMPI DUP1 PUSH4 0x78278CCA EQ PUSH2 0x405 JUMPI DUP1 PUSH4 0x8C3C0A44 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0x94EC65C5 EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3BA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0xA27D0B27 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xA397C830 EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0xABA81125 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0xB20B94F1 EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0xB30437A0 EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0xB42DBE38 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xCDB0E89E EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0xD7A75BE1 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xE9447250 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xF6BE6B78 EQ PUSH2 0x1D7 JUMPI PUSH4 0xF9315177 EQ PUSH2 0x1B9 JUMPI POP PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x1CA CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x2914 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x1F3 PUSH2 0x1EE CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0x341C JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xC5C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x253 PUSH2 0x23C PUSH2 0x21F CALLDATASIZE PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x282 CALLDATASIZE PUSH2 0x959 JUMP JUMPDEST SWAP1 PUSH2 0x1AEC JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x29F CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x3154 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x2B6 CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x2A74 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x2D8 PUSH2 0x2D3 CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0x24FC JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x750 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x2F5 CALLDATASIZE PUSH2 0xBB9 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x12C7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x315 CALLDATASIZE PUSH2 0x675 JUMP JUMPDEST SWAP2 PUSH2 0x1B88 JUMP JUMPDEST POP PUSH2 0x1D0 PUSH2 0x328 CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x2C8A JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x340 CALLDATASIZE PUSH2 0xA4D JUMP JUMPDEST SWAP1 PUSH2 0x32E3 JUMP JUMPDEST POP PUSH2 0x1FE SWAP2 POP PUSH2 0x364 PUSH2 0x358 CALLDATASIZE PUSH2 0xADC JUMP JUMPDEST SWAP6 SWAP5 SWAP1 SWAP5 SWAP4 SWAP2 SWAP4 PUSH2 0x2011 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x385 CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x3208 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x39C CALLDATASIZE PUSH2 0x675 JUMP JUMPDEST SWAP2 PUSH2 0x18B1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x3B4 CALLDATASIZE PUSH2 0xAAB JUMP JUMPDEST SWAP1 PUSH2 0x1131 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x3CE CALLDATASIZE PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x2D8 PUSH2 0xE97 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x3E8 CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x317C JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x3FF CALLDATASIZE PUSH2 0x959 JUMP JUMPDEST SWAP1 PUSH2 0x196C JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x417 CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x29D4 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x42F CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x2E09 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x364 PUSH2 0x44B CALLDATASIZE PUSH2 0xA88 JUMP JUMPDEST PUSH2 0xCBE JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x46C PUSH2 0x467 CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0xD84 JUMP JUMPDEST SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x497 CALLDATASIZE PUSH2 0xA4D JUMP JUMPDEST SWAP1 PUSH2 0x3395 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x4AF CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0x35A8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x4C6 CALLDATASIZE PUSH2 0x79A JUMP JUMPDEST SWAP2 PUSH2 0x128D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x4DE CALLDATASIZE PUSH2 0xA07 JUMP JUMPDEST SWAP2 PUSH2 0x34BC JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x500 PUSH2 0x4FB CALLDATASIZE PUSH2 0x9EC JUMP JUMPDEST PUSH2 0x1C12 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x9A8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x500 PUSH1 0x1 PUSH2 0x569 PUSH2 0x564 PUSH2 0x52A CALLDATASIZE PUSH2 0x989 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x555 PUSH2 0x543 DUP3 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP2 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1AA0 JUMP JUMPDEST ADD PUSH2 0x1BBA JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x581 CALLDATASIZE PUSH2 0x959 JUMP JUMPDEST SWAP1 PUSH2 0x17A8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x2D8 PUSH2 0x59E CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x2FDF JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x5B5 CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x2B11 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x5CD CALLDATASIZE PUSH2 0x79A JUMP JUMPDEST SWAP2 PUSH2 0x125D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x5E5 CALLDATASIZE PUSH2 0x773 JUMP JUMPDEST SWAP1 PUSH2 0xFCD JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x46C PUSH2 0x602 CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0x10F3 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x61B CALLDATASIZE PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x2D8 PUSH2 0xDE3 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x63A CALLDATASIZE PUSH2 0x6CD JUMP JUMPDEST PUSH2 0x2855 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x651 CALLDATASIZE PUSH2 0x675 JUMP JUMPDEST SWAP2 PUSH2 0x19FE JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 EQ ISZERO PUSH2 0x66E JUMPI JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x6B2 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x6A9 JUMPI SWAP1 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND EQ ISZERO PUSH2 0xF JUMPI JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x6E5 DUP2 PUSH2 0x6BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI JUMP JUMPDEST SWAP2 DUP1 SWAP2 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x716 JUMPI POP GT PUSH2 0x70F JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST SWAP2 POP DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP7 ADD MSTORE ADD DUP3 SWAP2 PUSH2 0x6FE JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x744 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x6E5 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x72B JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x66E JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x803 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80B PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x803 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x803 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x859 DUP3 PUSH2 0x7E8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xC0 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x803 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x897 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x89F PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x8B0 DUP3 PUSH2 0x87A JUMP JUMPDEST SWAP2 PUSH2 0x8BE PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x82B JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x8DB JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x6B2 JUMPI DUP2 PUSH1 0x20 PUSH2 0x6E5 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x8A4 JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x6A9 JUMPI PUSH2 0x6E5 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x6B2 JUMPI PUSH2 0x6E5 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x66E JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x9CF JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x66E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x8DB JUMPI DUP4 PUSH2 0xA36 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x8DB JUMPI PUSH2 0x6E5 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x6B2 JUMPI PUSH2 0xA77 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x66E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x66E JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x66E JUMPI PUSH2 0xAF0 PUSH2 0x657 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP3 GT PUSH2 0x8DB JUMPI PUSH2 0xB12 DUP2 PUSH1 0x4 SWAP4 DUP5 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xBAD JUMPI DUP3 PUSH2 0xB29 SWAP2 DUP6 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0x64 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xBA0 JUMPI DUP4 PUSH2 0xB40 SWAP2 DUP7 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0x84 CALLDATALOAD DUP4 DUP2 GT PUSH2 0xB92 JUMPI DUP5 PUSH2 0xB57 SWAP2 DUP4 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0xA4 CALLDATALOAD DUP5 DUP2 GT PUSH2 0xB83 JUMPI DUP2 PUSH2 0xB6E SWAP2 DUP5 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0xC4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xB83 JUMPI PUSH2 0x6E5 SWAP3 ADD PUSH2 0x8E5 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x80 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x4 CALLDATALOAD DUP4 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6A9 JUMPI SWAP3 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6A9 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xC1E JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xC1E JUMPI DUP2 PUSH1 0x24 PUSH2 0x6E5 SWAP4 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x8A4 JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 PUSH1 0x40 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0xC90 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH2 0xCAE PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE DUP11 MLOAD PUSH2 0x72B JUMP JUMPDEST SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0xC80 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xCDE JUMPI PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xD3E JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6E5 DUP2 ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xDD9 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xDC1 JUMPI JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 DUP2 SLOAD SWAP2 PUSH2 0xDF6 DUP4 PUSH2 0xDA7 JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0xE7A JUMPI POP PUSH1 0x1 EQ PUSH2 0xE1D JUMPI JUMPDEST POP PUSH2 0x859 SWAP3 POP SUB DUP4 PUSH2 0x82B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 MSTORE SWAP2 POP PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 JUMPDEST DUP5 DUP4 LT PUSH2 0xE5F JUMPI POP PUSH2 0x859 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0xE10 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0xE46 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH1 0xFF NOT AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x859 DUP3 PUSH1 0x40 DUP2 ADD CODESIZE PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x1 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0xEAD DUP5 PUSH2 0xDA7 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP4 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0xE7A JUMPI POP PUSH1 0x1 EQ PUSH2 0xED0 JUMPI POP PUSH2 0x859 SWAP3 POP SUB DUP4 PUSH2 0x82B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE SWAP2 POP PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 JUMPDEST DUP5 DUP4 LT PUSH2 0xF12 JUMPI POP PUSH2 0x859 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0xE10 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0xEF9 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0xF41 DUP5 PUSH2 0xDA7 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xFAE JUMPI POP PUSH1 0x1 EQ PUSH2 0xF6B JUMPI JUMPDEST POP POP PUSH2 0x859 SWAP3 POP SUB DUP4 PUSH2 0x82B JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0xF96 JUMPI POP POP PUSH2 0x859 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0xF5D JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0xF7E JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH1 0xFF NOT AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x859 DUP3 PUSH1 0x40 DUP2 ADD CODESIZE DUP1 PUSH2 0xF5D JUMP JUMPDEST SWAP1 PUSH2 0xFD7 DUP2 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP1 DUP5 AND DUP2 EQ PUSH2 0x10A0 JUMPI CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x1072 JUMPI JUMPDEST POP ISZERO PUSH2 0x1004 JUMPI PUSH2 0x859 SWAP2 PUSH2 0x15B1 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP2 POP REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0xFF SWAP2 POP PUSH2 0x1098 SWAP1 CALLER SWAP1 PUSH2 0x23C JUMP JUMPDEST SLOAD AND CODESIZE PUSH2 0xFF5 JUMP JUMPDEST POP POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1116 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 SWAP1 CALLER DUP4 EQ PUSH2 0x11B2 JUMPI DUP2 PUSH2 0x1171 PUSH2 0x1182 SWAP3 CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 JUMP JUMPDEST POP POP POP POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x1201 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x859 SWAP3 SWAP2 PUSH2 0x1275 PUSH2 0x1270 DUP5 CALLER PUSH2 0x1363 JUMP JUMPDEST PUSH2 0x11FA JUMP JUMPDEST PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1287 DUP3 PUSH2 0x810 JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x859 SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD DUP5 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x12BA JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP5 MSTORE PUSH2 0x12C7 JUMP JUMPDEST PUSH2 0x12C2 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x12AE JUMP JUMPDEST SWAP1 PUSH2 0x12EB SWAP4 SWAP3 SWAP2 PUSH2 0x12DB PUSH2 0x1270 DUP5 CALLER PUSH2 0x1363 JUMP JUMPDEST PUSH2 0x12E6 DUP4 DUP4 DUP4 PUSH2 0x1436 JUMP JUMPDEST PUSH2 0x168D JUMP JUMPDEST ISZERO PUSH2 0x12F2 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x130C PUSH1 0x4 DUP3 ADD PUSH2 0x1310 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x1375 DUP5 PUSH2 0xD84 JUMP JUMPDEST AND SWAP3 DUP2 DUP4 AND SWAP3 DUP5 DUP5 EQ SWAP5 DUP6 ISZERO PUSH2 0x13AB JUMPI JUMPDEST POP POP DUP4 ISZERO PUSH2 0x1395 JUMPI JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x13A1 SWAP2 SWAP3 SWAP4 POP PUSH2 0x10F3 JUMP JUMPDEST AND EQ CODESIZE DUP1 DUP1 PUSH2 0x138F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP4 POP CODESIZE DUP1 PUSH2 0x1386 JUMP JUMPDEST ISZERO PUSH2 0x13E2 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x145A SWAP1 PUSH2 0x1443 DUP5 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP4 SWAP1 SWAP2 DUP3 AND DUP5 EQ PUSH2 0x13DB JUMP JUMPDEST DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x155B JUMPI PUSH2 0x14D8 DUP3 PUSH2 0x1475 DUP8 DUP5 PUSH2 0x1532 SWAP7 PUSH2 0x2899 JUMP JUMPDEST PUSH2 0x1497 DUP6 PUSH2 0x1491 PUSH2 0x1485 DUP11 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST EQ PUSH2 0x13DB JUMP JUMPDEST PUSH2 0x14BE PUSH2 0x14AE DUP9 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE PUSH2 0x1513 DUP6 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x15EA DUP5 PUSH2 0xD84 JUMP JUMPDEST AND SWAP2 AND SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x66E JUMPI MLOAD PUSH2 0x6E5 DUP2 PUSH2 0x6BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x6E5 SWAP3 SWAP2 ADD SWAP1 PUSH2 0x72B JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1688 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x166E DUP3 PUSH2 0x87A JUMP JUMPDEST SWAP2 PUSH2 0x167C PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x82B JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x173C JUMPI PUSH2 0x16C0 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP11 DUP12 DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD PUSH2 0x162C JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x171C JUMPI JUMPDEST POP PUSH2 0x170E JUMPI POP POP POP PUSH2 0x16E6 PUSH2 0x165D JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 PUSH2 0x1709 JUMPI POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x130C PUSH1 0x4 DUP3 ADD PUSH2 0x1310 JUMP JUMPDEST PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1735 SWAP2 SWAP3 POP PUSH2 0x172C RETURNDATASIZE DUP3 PUSH2 0x82B JUMP JUMPDEST RETURNDATASIZE DUP2 ADD SWAP1 PUSH2 0x1617 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x16D6 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x174C JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B416363657373436F6E74726F6C3A206D757374206861766520636F PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x6C6C656374696F6E20726F6C65 PUSH1 0x98 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x17B1 CALLER PUSH2 0x1AB8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x183F JUMPI JUMPDEST PUSH2 0x17C1 SWAP1 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0x17E3 DUP3 PUSH2 0x17DE DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1826 JUMPI PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0xCF081ED2B728E3115904BE00EB8927B2375FF3401839B37F7ACCFA1BB2BEE15C SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x17C1 PUSH2 0x184C CALLER PUSH2 0x1AB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x17B8 JUMP JUMPDEST ISZERO PUSH2 0x185A JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B416363657373436F6E74726F6C3A206D757374206861766520746F PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6B656E20726F6C65 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x18BB CALLER DUP3 PUSH2 0x1B09 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1957 JUMPI JUMPDEST PUSH2 0x18CB SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x18FA DUP5 PUSH2 0x17DE DUP6 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x193E JUMPI POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xBF5A13B362503FCC74B8B9B1598ABA2F3A9AF85D05BA7978F7E9F447F22C239 SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP5 POP SWAP3 POP POP POP REVERT JUMPDEST POP PUSH2 0x18CB PUSH2 0x1965 CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1975 CALLER PUSH2 0x1AB8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19EA JUMPI JUMPDEST PUSH2 0x1985 SWAP1 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0x19A7 DUP3 PUSH2 0x19A2 DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH2 0x1EEC JUMP JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1826 JUMPI PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0xAEFF57F0F5E4D3D10A37D4A70FDE8ED67A95E67B251D5C512C0EA98C380D2F95 SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST POP PUSH2 0x1985 PUSH2 0x19F7 CALLER PUSH2 0x1AB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x197C JUMP JUMPDEST PUSH2 0x1A08 CALLER DUP3 PUSH2 0x1B09 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A8B JUMPI JUMPDEST PUSH2 0x1A18 SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1A47 DUP5 PUSH2 0x19A2 DUP6 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x193E JUMPI POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xE52D746E4C78C98C6BFA291B273406905C3E8550B7D911A6BEA686368C2DC79D SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST POP PUSH2 0x1A18 PUSH2 0x1A99 CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A0F JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1826 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 JUMPDEST SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x23C PUSH2 0x1AE6 SWAP3 PUSH1 0x6 SLOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x9 DUP4 MSTORE DUP2 DUP5 KECCAK256 SWAP1 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x9 DUP4 MSTORE DUP2 DUP5 KECCAK256 SWAP1 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 PUSH2 0x1AE6 JUMP JUMPDEST PUSH2 0x1AE6 SWAP3 SWAP2 PUSH2 0x23C SWAP2 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1BEF JUMPI POP POP POP PUSH2 0x859 SWAP3 POP SUB DUP4 PUSH2 0x82B JUMP JUMPDEST DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0x1C32 SWAP1 PUSH1 0x6 SLOAD PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x7 DUP3 MSTORE PUSH1 0x1 SWAP3 DUP4 SWAP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST ADD PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP4 DUP5 SWAP4 DUP3 DUP5 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP4 PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1C68 JUMPI POP POP POP POP POP SWAP1 PUSH2 0x6E5 SWAP2 SUB DUP3 PUSH2 0x82B JUMP JUMPDEST DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE DUP8 SWAP7 POP SWAP5 DUP6 ADD SWAP5 SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH2 0x1C50 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SWAP3 DUP3 MSTORE PUSH32 0xBF5A13B362503FCC74B8B9B1598ABA2F3A9AF85D05BA7978F7E9F447F22C239 PUSH1 0x20 PUSH1 0x8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SLOAD PUSH1 0x9 DUP4 MSTORE DUP2 DUP7 KECCAK256 SWAP1 DUP7 MSTORE DUP3 MSTORE DUP1 DUP6 KECCAK256 DUP6 DUP1 MSTORE DUP3 MSTORE DUP1 DUP6 KECCAK256 DUP1 DUP4 MSTORE DUP2 DUP7 KECCAK256 SLOAD ISZERO PUSH2 0x1CE9 JUMPI JUMPDEST POP MLOAD CALLER DUP2 MSTORE LOG4 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD PUSH2 0x1D0B DUP2 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x1D2F JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP4 SSTORE DUP3 PUSH2 0x1DC3 JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE SLOAD SWAP1 DUP7 DUP1 MSTORE DUP4 MSTORE DUP2 DUP7 KECCAK256 SSTORE CODESIZE PUSH2 0x1CE1 JUMP JUMPDEST PUSH2 0x1D37 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x1CFF JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP1 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP3 DUP1 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1D72 DUP4 PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xBF5A13B362503FCC74B8B9B1598ABA2F3A9AF85D05BA7978F7E9F447F22C239 SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x1DDC JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1DE4 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x1DCD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 SWAP1 SLOAD ISZERO PUSH2 0x1E0E JUMPI POP POP JUMP JUMPDEST PUSH2 0x1E75 SWAP1 PUSH1 0x1 DUP4 ADD PUSH2 0x1E5C DUP3 PUSH2 0x1E38 DUP4 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x1E78 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP6 SSTORE DUP5 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP2 SHL SWAP4 DUP5 SWAP3 AND SWAP1 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST SLOAD SWAP3 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x1E80 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x1E2C JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 LT PUSH2 0x1EAC JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x1EB4 PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x1EA5 JUMP JUMPDEST PUSH1 0x2 SWAP1 PUSH1 0x2 NOT DUP2 GT PUSH2 0x1EC9 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x1ED1 PUSH2 0x1E85 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1F0D JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 SWAP3 PUSH2 0x1E75 SWAP3 SWAP1 SWAP2 SLOAD PUSH1 0x1 DUP2 LT PUSH2 0x2004 JUMPI JUMPDEST DUP5 NOT SWAP1 DUP2 DUP2 ADD SWAP2 PUSH1 0x1 DUP5 ADD SWAP2 PUSH2 0x1FA2 PUSH2 0x1F5C DUP4 DUP6 SLOAD PUSH1 0x1 DUP2 LT PUSH2 0x1FF7 JUMPI JUMPDEST ADD DUP6 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR DUP7 AND SWAP1 PUSH2 0x1F7F DUP3 PUSH2 0x1E38 DUP4 DUP10 PUSH2 0x1DC3 JUMP JUMPDEST PUSH1 0x1 NOT LT PUSH2 0x1FEA JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE DUP2 SLOAD DUP1 ISZERO PUSH2 0x1FDD JUMPI JUMPDEST ADD SWAP2 PUSH2 0x1FB8 DUP4 DUP4 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE SSTORE SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1FE5 PUSH2 0x1ED5 JUMP JUMPDEST PUSH2 0x1FAC JUMP JUMPDEST PUSH2 0x1FF2 PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x1F88 JUMP JUMPDEST PUSH2 0x1FFF PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x1F55 JUMP JUMPDEST PUSH2 0x200C PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x1F37 JUMP JUMPDEST SWAP3 SWAP5 SWAP2 SWAP6 SWAP1 SWAP4 SWAP6 PUSH2 0x2021 CALLER PUSH2 0x1AB8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x21EA JUMPI JUMPDEST PUSH2 0x2031 SWAP1 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0xA SLOAD SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP5 DUP6 ISZERO PUSH2 0x219C JUMPI PUSH2 0x6E5 SWAP8 PUSH2 0x2147 PUSH2 0x2159 SWAP5 DUP12 PUSH2 0x218B SWAP10 PUSH2 0x20EA PUSH2 0x2150 SWAP7 PUSH2 0x208B PUSH2 0x2086 PUSH2 0x2082 DUP7 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x249C JUMP JUMPDEST PUSH2 0x2095 DUP2 DUP6 PUSH2 0x1D3C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x20B7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x249C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE PUSH2 0x1513 DUP5 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 PUSH1 0x40 MLOAD LOG4 PUSH2 0x2120 PUSH1 0x1 PUSH1 0xA SLOAD ADD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH2 0x213E PUSH2 0x2137 DUP14 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP11 DUP12 PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x2 DUP9 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x3 DUP7 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP6 ADD SSTORE PUSH2 0x2168 PUSH2 0x84C JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2186 PUSH1 0x5 DUP5 ADD PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x234D JUMP JUMPDEST PUSH1 0x6 PUSH2 0x2195 PUSH2 0x2369 JUMP JUMPDEST SWAP2 ADD PUSH2 0x2408 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH2 0x2031 PUSH2 0x21F7 CALLER PUSH2 0x1AB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x2028 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x2220 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2215 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x223B JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x859 SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x2267 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x2215 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x225A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2340 JUMPI JUMPDEST PUSH2 0x2299 DUP2 PUSH2 0x2293 DUP5 SLOAD PUSH2 0xDA7 JUMP JUMPDEST DUP5 PUSH2 0x222C JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x22D5 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x22CA JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x22B4 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x22EB DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x2328 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x230F JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2305 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x22F0 JUMP JUMPDEST PUSH2 0x2348 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x2285 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 PUSH2 0x859 SWAP4 PUSH2 0x2360 DUP2 MLOAD DUP6 PUSH2 0x2271 JUMP JUMPDEST ADD MLOAD SWAP2 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2375 DUP2 PUSH2 0x810 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xFE SHL SUB DUP2 GT PUSH1 0x1 AND PUSH2 0x2394 JUMPI JUMPDEST PUSH1 0x2 SHL SWAP1 JUMP JUMPDEST PUSH2 0x239C PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x238E JUMP JUMPDEST PUSH2 0x23AB DUP2 SLOAD PUSH2 0xDA7 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x23B5 JUMPI POP POP JUMP JUMPDEST DUP2 PUSH1 0x1F PUSH1 0x0 SWAP4 GT PUSH1 0x1 EQ PUSH2 0x23C7 JUMPI POP SSTORE JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 DUP4 KECCAK256 PUSH2 0x23E3 SWAP2 PUSH1 0x1F ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2215 JUMP JUMPDEST DUP2 PUSH1 0x20 DUP2 KECCAK256 SWAP2 SSTORE SSTORE JUMP JUMPDEST PUSH2 0x859 SWAP3 SWAP2 PUSH2 0x23FB JUMPI PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2403 PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x2271 JUMP JUMPDEST DUP2 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x40 SHL DUP4 GT PUSH2 0x248F JUMPI JUMPDEST DUP2 SLOAD DUP4 DUP4 SSTORE DUP1 DUP5 LT PUSH2 0x2460 JUMPI JUMPDEST POP PUSH1 0x20 DUP1 SWAP2 ADD SWAP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x2444 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP4 DUP3 PUSH2 0x2454 DUP4 SWAP5 MLOAD DUP7 PUSH2 0x2271 JUMP JUMPDEST ADD SWAP3 ADD SWAP4 ADD SWAP3 SWAP1 PUSH2 0x2436 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE DUP4 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 DUP3 ADD SWAP2 ADD JUMPDEST DUP2 DUP2 LT PUSH2 0x247D JUMPI POP PUSH2 0x2424 JUMP JUMPDEST DUP1 PUSH2 0x2489 PUSH1 0x1 SWAP3 PUSH2 0x23A1 JUMP JUMPDEST ADD PUSH2 0x2470 JUMP JUMPDEST PUSH2 0x2497 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x2417 JUMP JUMPDEST ISZERO PUSH2 0x24A3 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1ED1 PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x251F SWAP1 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x2528 DUP2 PUSH2 0xD84 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2543 DUP4 PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x1D DUP4 MSTORE PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x257F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B88 JUMP JUMPDEST PUSH1 0x3 DUP3 ADD PUSH2 0x258C DUP4 PUSH2 0xF2D JUMP JUMPDEST PUSH2 0x2595 DUP3 PUSH2 0xF2D JUMP JUMPDEST PUSH2 0x259E SWAP2 PUSH2 0x3C37 JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP5 ADD PUSH1 0x4 DUP6 ADD SLOAD SWAP2 DUP2 PUSH2 0x25BF DUP5 DUP1 SWAP5 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0x25D3 SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 PUSH2 0x25E0 SWAP1 PUSH2 0x39DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x7B PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH8 0x113730B6B2911D11 PUSH1 0xC1 SHL PUSH1 0x21 DUP3 ADD MSTORE SWAP7 DUP8 SWAP7 SWAP2 SWAP6 SWAP2 PUSH2 0x2611 PUSH1 0x29 DUP10 ADD DUP4 PUSH2 0x395D JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH15 0x113232B9B1B934B83A34B7B7111D11 PUSH1 0x89 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH2 0x2641 SWAP1 PUSH1 0x1 DUP5 ADD PUSH2 0x395D JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH9 0x1137BBB732B9111D11 PUSH1 0xB9 SHL DUP2 MSTORE PUSH1 0x9 ADD PUSH2 0x2667 SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH16 0x1132BC3A32B93730B62FBAB936111D11 PUSH1 0x81 SHL DUP2 MSTORE PUSH1 0x10 ADD PUSH2 0x2697 SWAP2 PUSH1 0x2 ADD PUSH2 0x395D JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH9 0x1134B6B0B3B2911D11 PUSH1 0xB9 SHL DUP2 MSTORE PUSH1 0x9 ADD PUSH2 0x26BD SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH15 0x2261747472696275746573223A205B PUSH1 0x88 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH32 0x7B2274726169745F74797065223A2022454E53222C202276616C7565223A2200 DUP2 MSTORE PUSH1 0x1F ADD PUSH2 0x270F SWAP2 PUSH2 0x395D JUMP JUMPDEST PUSH3 0x89F4B PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x3 ADD PUSH32 0x7B2274726169745F74797065223A2022436F6D6D69742048617368222C202276 DUP2 MSTORE PUSH7 0x30B63AB2911D11 PUSH1 0xC9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x27 ADD PUSH2 0x275A SWAP2 PUSH2 0x395D JUMP JUMPDEST PUSH3 0x89F4B PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x3 ADD PUSH32 0x7B2274726169745F74797065223A20225265706F7369746F7279222C20227661 DUP2 MSTORE PUSH6 0x363AB2911D11 PUSH1 0xD1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x26 ADD PUSH2 0x27A4 SWAP2 PUSH2 0x395D JUMP JUMPDEST PUSH3 0x89F4B PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x3 ADD PUSH32 0x7B2274726169745F74797065223A202256657273696F6E222C202276616C7565 DUP2 MSTORE PUSH3 0x111D11 PUSH1 0xE9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x23 ADD PUSH2 0x27EB SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH2 0x227D PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH1 0x5D PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH1 0x7D PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SUB SWAP1 PUSH1 0x1F NOT SWAP2 DUP3 DUP2 ADD DUP3 MSTORE PUSH2 0x281F SWAP1 DUP3 PUSH2 0x82B JUMP JUMPDEST PUSH2 0x2828 SWAP1 PUSH2 0x3882 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x283C SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH2 0x2845 SWAP2 PUSH2 0x24E9 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP3 MSTORE PUSH2 0x6E5 SWAP1 DUP3 PUSH2 0x82B JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x2888 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x287A JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x5B5E139F PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND ISZERO DUP1 ISZERO DUP1 PUSH2 0x2909 JUMPI JUMPDEST ISZERO PUSH2 0x28D7 JUMPI POP POP DUP2 PUSH2 0x28D2 PUSH2 0x859 SWAP4 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1D3C JUMP JUMPDEST ISZERO PUSH2 0x28E6 JUMPI POP PUSH2 0x859 SWAP2 PUSH2 0x1D3C JUMP JUMPDEST AND ISZERO PUSH2 0x28EF JUMPI POP JUMP JUMPDEST PUSH2 0x859 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE JUMP JUMPDEST POP DUP2 DUP4 AND ISZERO ISZERO PUSH2 0x28AD JUMP JUMPDEST PUSH2 0x291E CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x299F JUMPI JUMPDEST PUSH2 0x292E SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2951 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x296B DUP3 PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2975 CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST SWAP1 PUSH32 0xEDBF1209B3BAA7C1B5C43052CE5C511E243B3241D9F67733141D14F1DA88CBA1 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP PUSH2 0x292E PUSH2 0x29AD CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x2925 JUMP JUMPDEST PUSH2 0x29CC SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD SWAP3 DUP3 DUP5 DUP1 SWAP5 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x6F6 JUMP JUMPDEST DUP2 ADD SUB SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x29DE CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2A5F JUMPI JUMPDEST PUSH2 0x29EE SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2A11 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x2A2B DUP3 PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2A35 CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST SWAP1 PUSH32 0x91CE7FCD4462481791C3FE849F7049373C5B43EF44AED48E7F1ECCE781586E15 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP PUSH2 0x29EE PUSH2 0x2A6D CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x29E5 JUMP JUMPDEST PUSH2 0x2A7E CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2AFC JUMPI JUMPDEST PUSH2 0x2A8E SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2AB1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x2AC8 DUP3 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2AD2 CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST SWAP1 PUSH32 0xFBBFCA16A2770C7CA6E7063AB1A7EEA5FE441FFEF818325DB51752066A6B128A PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP PUSH2 0x2A8E PUSH2 0x2B0A CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A85 JUMP JUMPDEST PUSH2 0x2B1B CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B9C JUMPI JUMPDEST PUSH2 0x2B2B SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2B4E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x2B68 DUP3 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2B72 CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST SWAP1 PUSH32 0xD771EAA1C1382B0A9867125FCD921FDEDDD211538B5381353A877ABFBE3B50A4 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP PUSH2 0x2B2B PUSH2 0x2BAA CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B22 JUMP JUMPDEST PUSH1 0x20 PUSH2 0x2BCA SWAP2 DUP2 PUSH1 0x40 MLOAD SWAP4 DUP3 DUP6 DUP1 SWAP5 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x6F6 JUMP JUMPDEST DUP2 ADD PUSH1 0xC DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0xA0 SWAP2 DUP4 MLOAD DUP2 SSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE ADD SWAP2 PUSH2 0x2C12 PUSH1 0x60 DUP3 ADD MLOAD ISZERO ISZERO DUP5 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR DUP4 SSTORE ADD MLOAD DUP2 SLOAD PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB AND OR SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x2C74 PUSH2 0x859 SWAP3 DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT ISZERO PUSH2 0x2C7D JUMPI JUMPDEST PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x1DC3 JUMP JUMPDEST PUSH2 0x23FB JUMPI PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2C85 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x2C69 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2CAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2CC0 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD PUSH1 0x10 SHR AND PUSH2 0x2D74 JUMPI PUSH2 0x2D21 PUSH1 0x6 PUSH2 0x2CE3 DUP4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ADD SLOAD PUSH2 0x2CED PUSH2 0x85B JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE CALLER PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x2D1C DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0x2BD7 JUMP JUMPDEST PUSH2 0x2D41 DUP3 PUSH1 0x6 PUSH2 0x2D3B DUP5 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ADD PUSH2 0x2C51 JUMP JUMPDEST PUSH2 0x2D4B CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST PUSH32 0x8140554C907B4BA66A04EA1F43B882CBA992D3DB4CD5C49298A56402D7B36CA2 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B4552433732313A20415020616C7265616479206578697374730000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP2 POP REVERT JUMPDEST ISZERO PUSH2 0x2DC3 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B4552433732313A20696E76616C6964204150000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x2E2D DUP2 PUSH1 0x3 PUSH2 0x2E20 DUP6 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD PUSH1 0x10 SHR AND ISZERO ISZERO PUSH2 0x2DBC JUMP JUMPDEST PUSH1 0x3 PUSH2 0x2E38 DUP4 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD PUSH1 0x10 SHR AND CALLER EQ ISZERO PUSH2 0x2F12 JUMPI PUSH2 0x2EE6 PUSH2 0x2E51 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD SWAP2 PUSH2 0x2EBD PUSH2 0x2E6A DUP5 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x1 PUSH2 0x2E77 DUP6 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD SWAP2 ADD SWAP1 PUSH1 0x1 PUSH2 0x2EB6 PUSH2 0x2E9D PUSH2 0x2E97 PUSH2 0x2E91 DUP7 SLOAD PUSH2 0x1E9C JUMP JUMPDEST DUP7 PUSH2 0x1DC3 JUMP JUMPDEST POP PUSH2 0xF2D JUMP JUMPDEST PUSH2 0x2EB1 DUP2 PUSH2 0x2EAB DUP7 DUP9 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 PUSH2 0x23ED JUMP JUMPDEST PUSH2 0x2BB1 JUMP JUMPDEST ADD SSTORE PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x2EE1 PUSH2 0x2EC9 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x29B4 JUMP JUMPDEST SWAP1 CALLER SWAP2 PUSH32 0xEF2F6BED86B96D79B41799F5285F73B31274BB303EBE5D55A3CB48C567AB2DB0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B4552433732313A206D757374206265204150206F776E6572000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 SLOAD DUP1 ISZERO PUSH2 0x2FD2 JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x2F71 DUP3 DUP3 PUSH2 0x1DC3 JUMP JUMPDEST PUSH2 0x2FC5 JUMPI JUMPDEST PUSH2 0x2F80 DUP2 SLOAD PUSH2 0xDA7 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x2F8B JUMPI POP POP SSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F PUSH1 0x0 SWAP4 GT PUSH1 0x1 EQ PUSH2 0x2F9E JUMPI POP SSTORE SSTORE JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 DUP4 KECCAK256 PUSH2 0x2FBA SWAP2 PUSH1 0x1F ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2215 JUMP JUMPDEST DUP2 PUSH1 0x20 DUP2 KECCAK256 SWAP2 SSTORE SSTORE SSTORE JUMP JUMPDEST PUSH2 0x2FCD PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x2F76 JUMP JUMPDEST PUSH2 0x2FDA PUSH2 0x1ED5 JUMP JUMPDEST PUSH2 0x2F62 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH2 0x2FF2 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x3 ADD SLOAD PUSH1 0x10 SHR AND ISZERO ISZERO PUSH2 0x3005 SWAP1 PUSH2 0x2DBC JUMP JUMPDEST PUSH2 0x300E SWAP1 PUSH2 0x2BB1 JUMP JUMPDEST SWAP1 DUP2 SLOAD PUSH2 0x301A SWAP1 PUSH2 0x39DA JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP4 ADD SLOAD PUSH2 0x3029 SWAP1 PUSH2 0x39DA JUMP JUMPDEST SWAP3 PUSH1 0x3 ADD SLOAD DUP1 PUSH1 0x8 SHR PUSH1 0xFF AND PUSH2 0x303E SWAP1 PUSH2 0x45D4 JUMP JUMPDEST SWAP2 PUSH2 0x304B PUSH1 0xFF DUP4 AND PUSH2 0x45D4 JUMP JUMPDEST SWAP2 PUSH1 0x10 SHR AND PUSH2 0x3059 SWAP1 PUSH2 0x3B88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x7B PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP5 DUP6 SWAP5 SWAP2 SWAP4 SWAP2 PUSH1 0x21 DUP7 ADD PUSH10 0x113A37B5B2B724B2111D PUSH1 0xB1 SHL DUP2 MSTORE PUSH1 0xA ADD PUSH2 0x308C SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH8 0x1139B1B7B932911D PUSH1 0xC1 SHL DUP2 MSTORE PUSH1 0x8 ADD PUSH2 0x30B0 SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH15 0x113730B6B2AB32B934B334B2B2111D PUSH1 0x89 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH2 0x30DB SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH18 0x1131B7B73A32B73A2B32B934B334B2B2111D PUSH1 0x71 SHL DUP2 MSTORE PUSH1 0x12 ADD PUSH2 0x3109 SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH9 0x1137BBB732B9111D11 PUSH1 0xB9 SHL DUP2 MSTORE PUSH1 0x9 ADD PUSH2 0x312E SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH1 0x7D PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SUB PUSH1 0x1F NOT DUP2 ADD DUP3 MSTORE PUSH2 0x6E5 SWAP1 DUP3 PUSH2 0x82B JUMP JUMPDEST PUSH1 0xFF SWAP1 PUSH1 0x3 SWAP1 PUSH2 0x3173 SWAP1 PUSH2 0x2EB1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD PUSH1 0x8 SHR AND SWAP1 JUMP JUMPDEST PUSH2 0x3192 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x319D DUP3 PUSH2 0x2BB1 JUMP JUMPDEST ADD PUSH2 0x31A8 DUP2 SLOAD PUSH2 0x31F8 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x31B3 DUP2 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD PUSH2 0x31CA PUSH1 0x2 PUSH2 0x31C2 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD SWAP3 PUSH2 0x29B4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH32 0x3EA1C0FCF71B86FCA8F96CCAC3CF26FBA8983D3BBBE7BD720F1865D67FBAEE43 PUSH1 0x20 CALLER SWAP5 LOG4 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1EC9 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x321E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x3229 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD ISZERO PUSH2 0x3290 JUMPI PUSH1 0x2 PUSH2 0x323B DUP3 PUSH2 0x2BB1 JUMP JUMPDEST ADD PUSH2 0x3246 DUP2 SLOAD PUSH2 0x32D6 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3251 DUP2 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD PUSH2 0x3260 PUSH1 0x2 PUSH2 0x31C2 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE CALLER SWAP3 PUSH32 0x3EA1C0FCF71B86FCA8F96CCAC3CF26FBA8983D3BBBE7BD720F1865D67FBAEE43 SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST POP POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B4552433732313A2073636F72652063616E74206265206C6F776572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 ISZERO PUSH2 0x1EAC JUMPI PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x32F9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0x331E PUSH2 0x3305 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD PUSH2 0x3310 CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x3383 JUMPI JUMPDEST POP PUSH2 0x1853 JUMP JUMPDEST PUSH2 0x333F DUP3 PUSH1 0x3 PUSH2 0x332D DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3352 PUSH2 0x334B DUP3 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD SWAP2 PUSH2 0x29B4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xE2E598F7FF2DFD4BC3BD989635401B4C56846B7893CB7EACE51D099F21E69BFF PUSH1 0x20 CALLER SWAP5 ISZERO ISZERO SWAP4 LOG4 JUMP JUMPDEST PUSH2 0x338F SWAP2 POP CALLER SWAP1 PUSH2 0x1B09 JUMP JUMPDEST CODESIZE PUSH2 0x3318 JUMP JUMPDEST PUSH2 0x33AB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0x33B7 PUSH2 0x3305 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0x33DF DUP3 PUSH1 0x3 PUSH2 0x33C6 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SWAP1 PUSH2 0xFF00 DUP3 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x8 SHL AND SWAP1 PUSH2 0xFF00 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x33EB PUSH2 0x334B DUP3 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17BD9B465AA0CDC6B308874903E9C38B13F561ECB1F2EDAA8BF3969FE603D11C PUSH1 0x20 CALLER SWAP5 ISZERO ISZERO SWAP4 LOG4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x343F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0xB DUP2 MSTORE PUSH1 0x6 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x34AF JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH2 0x3475 DUP2 DUP5 PUSH1 0x5 SHL ADD DUP6 PUSH2 0x82B JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE DUP1 DUP3 KECCAK256 DUP2 DUP6 ADD JUMPDEST DUP5 DUP5 LT PUSH2 0x3493 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP4 DUP2 SWAP3 PUSH2 0x34A1 DUP6 PUSH2 0xF2D JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP4 ADD SWAP3 SWAP1 PUSH2 0x3484 JUMP JUMPDEST PUSH2 0x34B7 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x3462 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x34C9 CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3593 JUMPI JUMPDEST PUSH2 0x34D9 SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x34FC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST PUSH32 0x73B929BF4DB6BE678CDBC6D41A5FE0A2CBB84CA95572062C4A978D8BD80A41B1 PUSH1 0x40 SWAP3 DUP4 MLOAD SWAP1 DUP5 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3586 JUMPI JUMPDEST DUP6 MSTORE DUP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3577 PUSH1 0x0 SWAP2 DUP5 DUP4 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x5 DUP7 DUP5 KECCAK256 ADD PUSH1 0x4 DUP8 DUP6 KECCAK256 ADD PUSH2 0x3567 DUP2 SLOAD PUSH2 0x31F8 JUMP JUMPDEST DUP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x20 MSTORE DUP6 DUP4 KECCAK256 PUSH2 0x234D JUMP JUMPDEST PUSH2 0x3581 CALLER SWAP6 PUSH2 0x29B4 JUMP JUMPDEST SWAP4 MLOAD LOG4 JUMP JUMPDEST PUSH2 0x358E PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x3539 JUMP JUMPDEST POP PUSH2 0x34D9 PUSH2 0x35A1 CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D0 JUMP JUMPDEST PUSH2 0x35B2 CALLER DUP3 PUSH2 0x1B09 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3706 JUMPI JUMPDEST PUSH2 0x35C2 SWAP1 PUSH2 0x1853 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x35D5 DUP4 PUSH2 0xD84 JUMP JUMPDEST AND ISZERO DUP1 ISZERO DUP1 PUSH2 0x36FE JUMPI JUMPDEST ISZERO PUSH2 0x36D1 JUMPI POP PUSH2 0x35FF DUP3 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3608 DUP3 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x3611 DUP3 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP2 AND DUP1 DUP3 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x0 NOT DUP2 SLOAD ADD SWAP1 SSTORE DUP3 DUP3 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x3669 PUSH1 0x40 DUP4 KECCAK256 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP2 SLOAD AND SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP3 PUSH1 0x40 MLOAD LOG4 PUSH2 0x36AE PUSH1 0x2 PUSH2 0x36A8 DUP4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ADD PUSH2 0x371B JUMP JUMPDEST PUSH2 0x36B5 JUMPI POP JUMP JUMPDEST PUSH2 0x36CC PUSH2 0x859 SWAP2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3725 JUMP JUMPDEST ISZERO PUSH2 0x36E4 JUMPI PUSH2 0x36DF DUP3 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x3608 JUMP JUMPDEST PUSH2 0x36DF DUP3 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x35DF JUMP JUMPDEST POP PUSH2 0x35C2 PUSH2 0x3714 CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x35B9 JUMP JUMPDEST PUSH2 0x6E5 SWAP1 SLOAD PUSH2 0xDA7 JUMP JUMPDEST PUSH2 0x372E DUP2 PUSH2 0x23A1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x1 SWAP2 PUSH2 0x373E DUP4 DUP3 ADD PUSH2 0x23A1 JUMP JUMPDEST PUSH2 0x374A PUSH1 0x2 DUP3 ADD PUSH2 0x23A1 JUMP JUMPDEST PUSH2 0x3756 PUSH1 0x3 DUP3 ADD PUSH2 0x23A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 ADD SSTORE ADD DUP1 SLOAD SWAP1 PUSH1 0x0 DUP2 SSTORE DUP2 PUSH2 0x376F JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x3788 JUMPI POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x3793 DUP5 SWAP3 PUSH2 0x23A1 JUMP JUMPDEST ADD PUSH2 0x377C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3809 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392B2F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3811 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x37B4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3843 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x40 DUP3 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST PUSH2 0x384B PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x3831 JUMP JUMPDEST SWAP1 PUSH2 0x385A DUP3 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x3867 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x82B JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x3878 PUSH1 0x1F NOT SWAP2 PUSH2 0x87A JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x3954 JUMPI PUSH2 0x3891 PUSH2 0x3799 JUMP JUMPDEST PUSH2 0x38B5 PUSH2 0x38B0 PUSH2 0x38AB PUSH2 0x38A4 DUP6 MLOAD PUSH2 0x1EB9 JUMP JUMPDEST PUSH1 0x3 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x237C JUMP JUMPDEST PUSH2 0x3850 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD SWAP2 DUP2 DUP3 MLOAD DUP4 ADD SWAP2 JUMPDEST DUP3 DUP3 LT PUSH2 0x3902 JUMPI POP POP POP PUSH1 0x3 SWAP1 MLOAD MOD DUP1 PUSH1 0x1 EQ PUSH2 0x38EF JUMPI PUSH1 0x2 EQ PUSH2 0x38E4 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x3D SWAP1 PUSH1 0x0 NOT ADD MSTORE8 SWAP1 JUMP JUMPDEST POP PUSH1 0x3D SWAP1 DUP2 PUSH1 0x0 NOT DUP3 ADD MSTORE8 PUSH1 0x1 NOT ADD MSTORE8 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD SWAP4 SWAP2 SWAP1 PUSH2 0x38C2 JUMP JUMPDEST POP PUSH2 0x6E5 PUSH2 0x127A JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 DUP2 SLOAD PUSH2 0x396C DUP2 PUSH2 0xDA7 JUMP JUMPDEST SWAP3 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0x39C5 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3989 JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0x39B4 JUMPI POP POP POP POP ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3983 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP5 ADD MSTORE SWAP2 DUP4 ADD SWAP2 DUP2 ADD PUSH2 0x399E JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 MSTORE POP POP POP ADD SWAP2 POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3983 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH2 0x3B0F JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH2 0x3B00 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0x3AF1 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0x3AE2 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0x3AD3 JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0x3AC3 JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0x3AB9 JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 PUSH2 0x3A71 DUP3 DUP8 ADD PUSH2 0x3850 JUMP JUMPDEST SWAP6 DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0x3A83 JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0x3AB4 JUMPI SWAP2 SWAP1 DUP3 PUSH2 0x3A77 JUMP JUMPDEST PUSH2 0x3A7C JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0x3A60 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0x3A55 JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x3A4A JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x3A2E JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x3A1C JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0x3A03 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x3B2F JUMPI ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x3B37 PUSH2 0x1DAC JUMP JUMPDEST ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3B43 JUMPI JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x3B90 PUSH2 0x3816 JUMP JUMPDEST SWAP1 DUP2 MLOAD ISZERO PUSH2 0x3C2A JUMPI JUMPDEST PUSH1 0x30 PUSH1 0x20 DUP4 ADD MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x3C1D JUMPI JUMPDEST SWAP1 PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP2 JUMPDEST DUP1 DUP4 GT PUSH2 0x3BCC JUMPI POP PUSH2 0x6E5 SWAP2 POP ISZERO PUSH2 0x3B3C JUMP JUMPDEST SWAP1 DUP1 PUSH1 0xF PUSH2 0x3C09 SWAP3 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x3C10 JUMPI JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x3BFF DUP6 DUP8 PUSH2 0x3B1D JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 PUSH2 0x32D6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3BB9 JUMP JUMPDEST PUSH2 0x3C18 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x3BDF JUMP JUMPDEST PUSH2 0x3C25 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x3BAD JUMP JUMPDEST PUSH2 0x3C32 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x3B99 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x3C73766720786D6C6E733D22687474703A2F2F7777772E77332E6F72672F3230 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x30302F7376672220786D6C6E733A786C696E6B3D22687474703A2F2F7777772E SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x77332E6F72672F313939392F786C696E6B222076657273696F6E3D22312E3122 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x2077696474683D2236343022206865696768743D22343830222076696577426F PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x783D2230203020363430203438302220786D6C3A73706163653D227072657365 PUSH1 0xA0 DUP3 ADD MSTORE PUSH5 0x393B32911F PUSH1 0xD9 SHL PUSH1 0xC0 DUP3 ADD MSTORE PUSH6 0x1E3232B3399F PUSH1 0xD1 SHL PUSH1 0xC5 DUP3 ADD MSTORE SWAP2 DUP3 SWAP2 PUSH1 0xCB DUP4 ADD PUSH7 0x1E17B232B3399F PUSH1 0xC9 SHL DUP2 MSTORE PUSH1 0x7 ADD PUSH32 0x3C67207472616E73666F726D3D226D617472697828332E34322030203020332E DUP2 MSTORE PUSH21 0x1A1910199818171C9C10191A99171C9C149110101F PUSH1 0x59 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x35 ADD PUSH32 0x3C706F6C79676F6E207374796C653D227374726F6B653A2072676228302C302C DUP2 MSTORE PUSH32 0x30293B207374726F6B652D77696474683A20383B207374726F6B652D64617368 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x61727261793A206E6F6E653B207374726F6B652D6C696E656361703A20627574 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x743B207374726F6B652D646173686F66667365743A20303B207374726F6B652D PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x6C696E656A6F696E3A206D697465723B207374726F6B652D6D697465726C696D PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x69743A20343B2066696C6C3A20726762283135322C3135322C313833293B2066 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x696C6C2D72756C653A206E6F6E7A65726F3B206F7061636974793A20313B2220 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x766563746F722D6566666563743D226E6F6E2D7363616C696E672D7374726F6B PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x65222020706F696E74733D222D35302C2D3530202D35302C35302035302C3530 PUSH2 0x100 DUP3 ADD MSTORE PUSH12 0x101A9816169A98101110179F PUSH1 0xA1 SHL PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x12C ADD PUSH4 0x1E17B39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH32 0x3C67207472616E73666F726D3D226D6174726978283120302030203120333033 DUP2 MSTORE PUSH32 0x2E35203131352E36372922207374796C653D222220203E000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x37 ADD PUSH32 0x3C7465787420786D6C3A73706163653D2270726573657276652220666F6E742D DUP2 MSTORE PUSH32 0x66616D696C793D224F70656E2053616E732220666F6E742D73697A653D223234 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2220666F6E742D7374796C653D226E6F726D616C2220666F6E742D7765696768 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x743D226E6F726D616C22207374796C653D227374726F6B653A206E6F6E653B20 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x7374726F6B652D77696474683A20313B207374726F6B652D6461736861727261 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x793A206E6F6E653B207374726F6B652D6C696E656361703A20627574743B2073 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x74726F6B652D646173686F66667365743A20303B207374726F6B652D6C696E65 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x6A6F696E3A206D697465723B207374726F6B652D6D697465726C696D69743A20 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x343B2066696C6C3A2072676228302C302C30293B2066696C6C2D72756C653A20 PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x6E6F6E7A65726F3B206F7061636974793A20313B2077686974652D7370616365 PUSH2 0x120 DUP3 ADD MSTORE PUSH32 0x3A207072653B22203E3C747370616E20783D222D34352E372220793D22352E36 PUSH2 0x140 DUP3 ADD MSTORE PUSH32 0x3522207374796C653D227374726F6B652D77696474683A20313B20666F6E742D PUSH2 0x160 DUP3 ADD MSTORE PUSH32 0x66616D696C793A20224F70656E2053616E73222C2073616E732D73657269663B PUSH2 0x180 DUP3 ADD MSTORE PUSH32 0x20666F6E742D73697A653A20313870783B20666F6E742D7374796C653A206E6F PUSH2 0x1A0 DUP3 ADD MSTORE PUSH32 0x726D616C3B20666F6E742D7765696768743A206E6F726D616C3B2066696C6C3A PUSH2 0x1C0 DUP3 ADD MSTORE PUSH32 0x2072676228302C302C30293B20223E466C65656B204E4641733C2F747370616E PUSH2 0x1E0 DUP3 ADD MSTORE PUSH8 0x1F1E17BA32BC3A1F PUSH1 0xC1 SHL PUSH2 0x200 DUP3 ADD MSTORE PUSH2 0x208 ADD PUSH4 0x1E17B39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH32 0x3C67207472616E73666F726D3D226D6174726978283120302030203120333032 DUP2 MSTORE PUSH21 0x10191B18971A1B94911039BA3CB6329E911110101F PUSH1 0x59 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x35 ADD PUSH32 0x3C7465787420786D6C3A73706163653D2270726573657276652220666F6E742D DUP2 MSTORE PUSH32 0x66616D696C793D224F70656E2053616E732220666F6E742D73697A653D223238 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2220666F6E742D7374796C653D226E6F726D616C2220666F6E742D7765696768 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x743D226E6F726D616C22207374796C653D227374726F6B653A206E6F6E653B20 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x7374726F6B652D77696474683A20313B207374726F6B652D6461736861727261 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x793A206E6F6E653B207374726F6B652D6C696E656361703A20627574743B2073 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x74726F6B652D646173686F66667365743A20303B207374726F6B652D6C696E65 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x6A6F696E3A206D697465723B207374726F6B652D6D697465726C696D69743A20 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x343B2066696C6C3A2072676228302C302C30293B2066696C6C2D72756C653A20 PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x6E6F6E7A65726F3B206F7061636974793A20313B2077686974652D7370616365 PUSH2 0x120 DUP3 ADD MSTORE PUSH32 0x3A207072653B22203E3C747370616E20783D222D34342E32362220793D222D36 PUSH2 0x140 DUP3 ADD MSTORE PUSH32 0x2E313422207374796C653D227374726F6B652D77696474683A20313B20666F6E PUSH2 0x160 DUP3 ADD MSTORE PUSH32 0x742D66616D696C793A20224F70656E2053616E73222C2073616E732D73657269 PUSH2 0x180 DUP3 ADD MSTORE PUSH32 0x663B20666F6E742D73697A653A20313870783B20666F6E742D7374796C653A20 PUSH2 0x1A0 DUP3 ADD MSTORE PUSH32 0x6E6F726D616C3B20666F6E742D7765696768743A206E6F726D616C3B2066696C PUSH2 0x1C0 DUP3 ADD MSTORE PUSH17 0x361D103933B1141816181618149D90111F PUSH1 0x79 SHL PUSH2 0x1E0 DUP3 ADD MSTORE PUSH2 0x1F1 ADD PUSH2 0x446C SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH32 0x3C2F747370616E3E3C747370616E20783D222D33372E31342220793D2231372E DUP2 MSTORE PUSH32 0x343522207374796C653D227374726F6B652D77696474683A20313B20666F6E74 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2D66616D696C793A20224F70656E2053616E73222C2073616E732D7365726966 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x3B20666F6E742D73697A653A20313870783B20666F6E742D7374796C653A206E PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x6F726D616C3B20666F6E742D7765696768743A206E6F726D616C3B2066696C6C PUSH1 0x80 DUP3 ADD MSTORE PUSH16 0x1D103933B1141816181618149D90111F PUSH1 0x81 SHL PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xB0 ADD PUSH2 0x454C SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH15 0x1E17BA39B830B71F1E17BA32BC3A1F PUSH1 0x89 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH4 0x1E17B39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH6 0x1E17B9BB339F PUSH1 0xD1 SHL DUP2 MSTORE PUSH1 0x6 ADD SUB SWAP1 PUSH1 0x1F NOT SWAP2 DUP3 DUP2 ADD DUP3 MSTORE PUSH2 0x4595 SWAP1 DUP3 PUSH2 0x82B JUMP JUMPDEST PUSH2 0x459E SWAP1 PUSH2 0x3882 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x3D DUP3 ADD PUSH2 0x283C JUMP JUMPDEST ISZERO PUSH2 0x45F9 JUMPI PUSH1 0x40 MLOAD PUSH2 0x45E5 DUP2 PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x4 DUP2 MSTORE PUSH4 0x74727565 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4605 DUP2 PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x5 DUP2 MSTORE PUSH5 0x66616C7365 PUSH1 0xD8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0xC2C48EB3CCEDE8F14A SSTORE 0x4D 0xA8 0xBF 0xAC SDIV SWAP9 0xAB 0xE0 0xDC RETURN 0xE1 0xD8 AND 0xE4 0xB1 0xCE 0xB4 0xE2 SSTORE 0xC8 DUP7 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "290:15067:13:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;1456:13:0;290:15067:13;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1305:10:12;;;:::i;:::-;290:15067:13;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;1456:13:0;290:15067:13;;;;-1:-1:-1;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;;-1:-1:-1;290:15067:13;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;290:15067:13;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;-1:-1:-1;;290:15067:13;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;290:15067:13;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;1456:13:0;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;:::o;:::-;1479:17:0;-1:-1:-1;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;290:15067:13;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;290:15067:13;;;;;1479:17:0;290:15067:13;;-1:-1:-1;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;4830:275:12;4933:23;290:15067:13;1456:13:0;290:15067:13;;;4987:16:12;290:15067:13;;;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;6359:26:12;6355:140;;4830:275;-1:-1:-1;290:15067:13;;5087:10:12;290:15067:13;;-1:-1:-1;;;;;290:15067:13;;;;;5050:48:12;;290:15067:13;;5050:48:12;4830:275::o;6355:140::-;290:15067:13;6401:12:12;;290:15067:13;;;;;;;;6355:140:12;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;290:15067:13;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;6355:140:12;;;290:15067:13;-1:-1:-1;;;;;290:15067:13;;-1:-1:-1;290:15067:13;;;;;-1:-1:-1;290:15067:13;-1:-1:-1;290:15067:13;;;;:::i;:::-;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 1768,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 1623,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "abi_decode_addresst_address": {
                  "entryPoint": 3113,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 1946,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 3
                },
                "abi_decode_addresst_addresst_uint256t_bytes": {
                  "entryPoint": 3001,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 4
                },
                "abi_decode_addresst_bool": {
                  "entryPoint": 2731,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_addresst_stringt_stringt_stringt_stringt_stringt_string": {
                  "entryPoint": 2780,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 7
                },
                "abi_decode_addresst_uint256": {
                  "entryPoint": 1907,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_available_length_string": {
                  "entryPoint": 2212,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes4": {
                  "entryPoint": 1741,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_bytes4_fromMemory": {
                  "entryPoint": 5655,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_enum_Roles": {
                  "entryPoint": 2540,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_enum_Rolest_address": {
                  "entryPoint": 2393,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_string": {
                  "entryPoint": 2351,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_string_memory_ptr": {
                  "entryPoint": 2277,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_stringt_bool": {
                  "entryPoint": 2637,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 2696,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 1889,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_uint256t_enum_Roles": {
                  "entryPoint": 2441,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_uint256t_enum_Rolest_address": {
                  "entryPoint": 1653,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 3
                },
                "abi_decode_uint256t_string": {
                  "entryPoint": 2304,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 2
                },
                "abi_decode_uint256t_stringt_string": {
                  "entryPoint": 2567,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 3
                },
                "abi_encode_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address_address_uint256_bytes": {
                  "entryPoint": 5676,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_array_address_dyn": {
                  "entryPoint": 2472,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_array_string_dyn": {
                  "entryPoint": 3164,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 1872,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 9449,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_storage": {
                  "entryPoint": 14685,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_to_string": {
                  "entryPoint": 1835,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_12cd": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_153d": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1c05": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1e76": {
                  "entryPoint": 4880,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1f63": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_2482": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_28f5": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_3e7a": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_3e7f": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_4b2c": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_4b90": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5627": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccb": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_6e9f": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_804d": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_813a": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_835b": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_859c": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_8e2f": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_a645": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_a91e": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_a9d6": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_aa50": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_b197": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_b26d": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_b36b": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_b73d": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_bcca": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_bed5": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_c062": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_c9d6": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_d536": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_e024": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_ed94": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f82b": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_and_zero_memory_array_array_string_dyn": {
                  "entryPoint": 9065,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_and_zero_memory_array_string": {
                  "entryPoint": 14416,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_and_zero_memory_array_string_45751": {
                  "entryPoint": 14358,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 2139,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_memory_18117": {
                  "entryPoint": 2124,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 4730,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 2170,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes_storage_ptr": {
                  "entryPoint": 14107,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_pop_array_string_storage_dyn_ptr": {
                  "entryPoint": 12121,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "array_push_from_string_to_array_string_storage_dyn_ptr": {
                  "entryPoint": 11345,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "checked_add_uint256": {
                  "entryPoint": 7865,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_div_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_mul_uint256": {
                  "entryPoint": 9084,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_sub_uint256": {
                  "entryPoint": 7836,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 8748,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "cleanup_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clear_storage_range_bytes1": {
                  "entryPoint": 8725,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_array_from_storage_to_memory_array_address_dyn": {
                  "entryPoint": 7098,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string": {
                  "entryPoint": 3885,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string_18041": {
                  "entryPoint": 3555,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string_18063": {
                  "entryPoint": 3735,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_array_to_storage_from_array_string_dyn_to_array_string_dyn": {
                  "entryPoint": 9224,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_byte_array_to_storage_from_string_to_string": {
                  "entryPoint": 8817,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce": {
                  "entryPoint": 14233,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory": {
                  "entryPoint": 1782,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_struct_to_storage_from_struct_AccessPoint_to_struct_AccessPoint": {
                  "entryPoint": 11223,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_struct_to_storage_from_struct_Build_to_struct_Build": {
                  "entryPoint": 9037,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "decrement_uint256": {
                  "entryPoint": 13014,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_byte_array_length": {
                  "entryPoint": 3495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 5725,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 2091,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "finalize_allocation_39207": {
                  "entryPoint": 2024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "finalize_allocation_39210": {
                  "entryPoint": 2064,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "finalize_allocation_39241": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun__approve": {
                  "entryPoint": 5553,
                  "id": 776,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__grantTokenRole": {
                  "entryPoint": 7484,
                  "id": 3107,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_addAccessPoint": {
                  "entryPoint": 11402,
                  "id": 3918,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_appAccessPoints": {
                  "entryPoint": 13340,
                  "id": 4210,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_approve": {
                  "entryPoint": 4045,
                  "id": 256,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_balanceOf": {
                  "entryPoint": 3262,
                  "id": 117,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_beforeTokenTransfer": {
                  "entryPoint": 10393,
                  "id": 3721,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_checkOnERC721Received": {
                  "entryPoint": 5773,
                  "id": 884,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "fun_clearAllTokenRoles": {
                  "entryPoint": null,
                  "id": 3268,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_encode": {
                  "entryPoint": 14466,
                  "id": 1481,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_exists": {
                  "entryPoint": null,
                  "id": 445,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_generateBase64": {
                  "entryPoint": 15415,
                  "id": 4337,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_getAccessPointJSON": {
                  "entryPoint": 12255,
                  "id": 4028,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getApproved": {
                  "entryPoint": 4339,
                  "id": 274,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getCollectionRoleMembers": {
                  "entryPoint": 7186,
                  "id": 2974,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_grantRole": {
                  "entryPoint": 7657,
                  "id": 3182,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantTokenRole": {
                  "entryPoint": 7305,
                  "id": 3107,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_hasCollectionRole": {
                  "entryPoint": 6892,
                  "id": 2915,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_hasCollectionRole_18091": {
                  "entryPoint": 6840,
                  "id": 2915,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_hasTokenRole": {
                  "entryPoint": 7048,
                  "id": 2950,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_hasTokenRole_18095": {
                  "entryPoint": 6921,
                  "id": 2950,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_hasTokenRole_18150": {
                  "entryPoint": 6984,
                  "id": 2950,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_hasTokenRole_18240": {
                  "entryPoint": null,
                  "id": 2950,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_increment": {
                  "entryPoint": null,
                  "id": 1536,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_isApprovedOrOwner": {
                  "entryPoint": 4963,
                  "id": 479,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_ownerOf": {
                  "entryPoint": 3460,
                  "id": 145,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_revokeRole": {
                  "entryPoint": 7916,
                  "id": 3255,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_safeTransferFrom": {
                  "entryPoint": 4749,
                  "id": 355,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_safeTransferFrom_385": {
                  "entryPoint": 4807,
                  "id": 385,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_setApprovalForAll": {
                  "entryPoint": 4401,
                  "id": 291,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_supportsInterface": {
                  "entryPoint": 10325,
                  "id": 93,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_toHexString": {
                  "entryPoint": 15240,
                  "id": 1732,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_toString": {
                  "entryPoint": 14810,
                  "id": 1636,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_toString_4367": {
                  "entryPoint": 17876,
                  "id": 4367,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_tokenURI": {
                  "entryPoint": 9468,
                  "id": 3635,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_transfer": {
                  "entryPoint": 5174,
                  "id": 752,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_transferFrom": {
                  "entryPoint": 4701,
                  "id": 336,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "increment_uint256": {
                  "entryPoint": 12792,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_18079": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address_18088": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_enum_Roles_struct_Role_storage_of_enum_Roles": {
                  "entryPoint": 6816,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_18049": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_18050": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_18086": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_18090": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_18115": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_address_of_uint256_18118": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "memory_array_index_access_bytes": {
                  "entryPoint": 15133,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "modifier_requireAP": {
                  "entryPoint": 11785,
                  "id": 3492,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_requireAP_18076": {
                  "entryPoint": 12628,
                  "id": 3492,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_requireAP_4052": {
                  "entryPoint": 12668,
                  "id": 3492,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_requireAP_4082": {
                  "entryPoint": 12808,
                  "id": 3492,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_requireAP_4124": {
                  "entryPoint": 13027,
                  "id": 3492,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireAP_4162": {
                  "entryPoint": 13205,
                  "id": 3492,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireCollectionRole": {
                  "entryPoint": 6056,
                  "id": 2774,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireCollectionRole_18068": {
                  "entryPoint": 8209,
                  "id": 2774,
                  "parameterSlots": 7,
                  "returnSlots": 1
                },
                "modifier_requireCollectionRole_2855": {
                  "entryPoint": 6508,
                  "id": 2774,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole": {
                  "entryPoint": 6321,
                  "id": 2802,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole_2877": {
                  "entryPoint": 6654,
                  "id": 2802,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole_3742": {
                  "entryPoint": 10516,
                  "id": 2802,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole_3774": {
                  "entryPoint": 10708,
                  "id": 2802,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole_3806": {
                  "entryPoint": 10868,
                  "id": 2802,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole_3838": {
                  "entryPoint": 11025,
                  "id": 2802,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole_4223": {
                  "entryPoint": 13500,
                  "id": 2802,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "modifier_requireTokenRole_4262": {
                  "entryPoint": 13736,
                  "id": 2802,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "packed_hashed_string_to_string": {
                  "entryPoint": 10676,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "packed_hashed_string_uint256_to_string_uint": {
                  "entryPoint": 11185,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x00": {
                  "entryPoint": 8702,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x11": {
                  "entryPoint": 7813,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x31": {
                  "entryPoint": 7893,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 7596,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 2001,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "read_from_storage_split_offset_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 5957,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_04fc": {
                  "entryPoint": 15164,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_12a8": {
                  "entryPoint": 4602,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_277f": {
                  "entryPoint": 5083,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_2a63": {
                  "entryPoint": 9372,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_6fe0": {
                  "entryPoint": 11708,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_b08d": {
                  "entryPoint": 3383,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_eb1c": {
                  "entryPoint": 6227,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "storage_array_index_access_address_dyn_ptr": {
                  "entryPoint": 7619,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_set_to_zero_string": {
                  "entryPoint": 9121,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "storage_set_to_zero_struct_AccessPoint": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "storage_set_to_zero_struct_App": {
                  "entryPoint": 14117,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_storage_value_address_to_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "update_storage_value_address_to_address_18087": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_t_bool": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_string_to_string": {
                  "entryPoint": 9197,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 1722,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "write_to_memory_address": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6040608081526004361015610015575b50600080fd5b600090813560e01c806301468deb1461063f57806301ffc9a71461062357806306fdde0314610607578063081812fc146105eb578063095ea7b3146105d357806323b872dd146105bb578063246a908b146105a357806327dc5cec146105875780632d957aad1461056f5780632f1e8f0a1461050b578063353b07a4146104e45780633806f152146104cc57806342842e0e146104b457806342966c681461049d57806342e44bbf146104855780636352211e1461045057806370a08231146104345780637469a03b1461041d57806378278cca146104055780638c3c0a44146103ed57806394ec65c5146103d657806395d89b41146103ba578063a22cb465146103a2578063a27d0b271461038a578063a397c83014610373578063aba8112514610346578063b20b94f11461032e578063b30437a01461031b578063b42dbe38146102fe578063b88d4fde146102e3578063c87b56dd146102bc578063cdb0e89e146102a4578063d7a75be114610288578063e94472501461026b578063e985e9c514610202578063f6be6b78146101d75763f9315177146101b9575061000f565b346101d3576101d06101ca36610900565b90612914565b51f35b5080fd5b50346101d3576101fe91506101f36101ee36610761565b61341c565b905191829182610c5c565b0390f35b50346101d3576101fe915061025a61025361023c61021f36610c29565b6001600160a01b0390911660009081526005602052604090209091565b9060018060a01b0316600052602052604060002090565b5460ff1690565b905190151581529081906020820190565b50346101d3576101fe915061025a61028236610959565b90611aec565b50346101d3576101fe915061025a61029f3661092f565b613154565b50346101d3576101d06102b636610900565b90612a74565b50346101d3576101fe91506102d86102d336610761565b6124fc565b905191829182610750565b50346101d3576101d06102f536610bb9565b929190916112c7565b50346101d3576101fe915061025a61031536610675565b91611b88565b506101d061032836610900565b90612c8a565b50346101d3576101d061034036610a4d565b906132e3565b506101fe915061036461035836610adc565b95949094939193612011565b90519081529081906020820190565b50346101d3576101d06103853661092f565b613208565b50346101d3576101d061039c36610675565b916118b1565b50346101d3576101d06103b436610aab565b90611131565b50346101d3576101fe91506103ce366106e8565b6102d8610e97565b50346101d3576101d06103e83661092f565b61317c565b50346101d3576101d06103ff36610959565b9061196c565b50346101d3576101d061041736610900565b906129d4565b50346101d3576101d061042f3661092f565b612e09565b50346101d3576101fe915061036461044b36610a88565b610cbe565b50346101d3576101fe915061046c61046736610761565b610d84565b90516001600160a01b0390911681529081906020820190565b50346101d3576101d061049736610a4d565b90613395565b50346101d3576101d06104af36610761565b6135a8565b50346101d3576101d06104c63661079a565b9161128d565b50346101d3576101d06104de36610a07565b916134bc565b50346101d3576101fe91506105006104fb366109ec565b611c12565b9051918291826109a8565b50346101d3576101fe9150610500600161056961056461052a36610989565b9190610555610543826000526008602052604060002090565b54916000526009602052604060002090565b90600052602052604060002090565b611aa0565b01611bba565b50346101d3576101d061058136610959565b906117a8565b50346101d3576101fe91506102d861059e3661092f565b612fdf565b50346101d3576101d06105b536610900565b90612b11565b50346101d3576101d06105cd3661079a565b9161125d565b50346101d3576101d06105e536610773565b90610fcd565b50346101d3576101fe915061046c61060236610761565b6110f3565b50346101d3576101fe915061061b366106e8565b6102d8610de3565b50346101d3576101fe915061025a61063a366106cd565b612855565b50346101d3576101d061065136610675565b916119fe565b600435906001600160a01b03821682141561066e57565b5050600080fd5b606090600319011261000f576004359060243560028110156106b257906044356001600160a01b0381168114156106a95790565b50505050600080fd5b505050600080fd5b6001600160e01b03198116141561000f57565b602090600319011261000f576004356106e5816106ba565b90565b600090600319011261000f57565b918091926000905b82821061071657501161070f575050565b6000910152565b915080602091830151818601520182916106fe565b90602091610744815180928185528580860191016106f6565b601f01601f1916010190565b9060206106e592818152019061072b565b602090600319011261000f5760043590565b604090600319011261000f576004356001600160a01b03811681141561066e579060243590565b606090600319011261000f576001600160a01b03906004358281168114156106b257916024359081168114156106b2579060443590565b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761080357604052565b61080b6107d1565b604052565b602081019081106001600160401b0382111761080357604052565b90601f801991011681019081106001600160401b0382111761080357604052565b60405190610859826107e8565b565b6040519060c082018281106001600160401b0382111761080357604052565b6020906001600160401b038111610897575b601f01601f19160190565b61089f6107d1565b61088c565b9291926108b08261087a565b916108be604051938461082b565b8294818452818301116108db578281602093846000960137010152565b5050505050600080fd5b9080601f830112156106b2578160206106e5933591016108a4565b90604060031983011261066e5760043591602435906001600160401b0382116106a9576106e5916004016108e5565b602060031982011261066e57600435906001600160401b0382116106b2576106e5916004016108e5565b604090600319011261000f57600435600281101561066e57906024356001600160a01b0381168114156106b25790565b604090600319011261000f576004359060243560028110156106b25790565b6020908160408183019282815285518094520193019160005b8281106109cf575050505090565b83516001600160a01b0316855293810193928101926001016109c1565b602090600319011261000f57600435600281101561066e5790565b606060031982011261066e57600435916001600160401b036024358181116108db5783610a36916004016108e5565b926044359182116108db576106e5916004016108e5565b604060031982011261066e57600435906001600160401b0382116106b257610a77916004016108e5565b906024358015158114156106b25790565b602090600319011261000f576004356001600160a01b03811681141561066e5790565b604090600319011261000f576004356001600160a01b03811681141561066e57906024358015158114156106b25790565b60e060031982011261066e57610af0610657565b916024356001600160401b03928382116108db57610b128160049384016108e5565b93604435818111610bad5782610b299185016108e5565b93606435828111610ba05783610b409186016108e5565b93608435838111610b925784610b579183016108e5565b9360a435848111610b835781610b6e9184016108e5565b9360c435908111610b83576106e592016108e5565b50505050505050505050600080fd5b505050505050505050600080fd5b5050505050505050600080fd5b50505050505050600080fd5b90608060031983011261066e576001600160a01b03916004358381168114156106a957926024359081168114156106a9579160443591606435906001600160401b038211610c1e5780602383011215610c1e578160246106e5936004013591016108a4565b505050505050600080fd5b604090600319011261000f576001600160a01b03906004358281168114156106b257916024359081168114156106b25790565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610c905750505050505090565b9091929394958480610cae600193603f198682030187528a5161072b565b9801930193019194939290610c80565b6001600160a01b03168015610cde57600052600360205260406000205490565b505060405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b15610d3e57565b5060405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b03166106e5811515610d37565b90600182811c92168015610dd9575b6020831014610dc157565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691610db6565b60405190600082815491610df683610da7565b80835292600190818116908115610e7a5750600114610e1d575b506108599250038361082b565b600080805291507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b848310610e5f5750610859935050810160200138610e10565b81935090816020925483858a01015201910190918592610e46565b94505050505060ff19166020830152610859826040810138610e10565b60405190600082600191825492610ead84610da7565b80845293818116908115610e7a5750600114610ed057506108599250038361082b565b600081815291507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b848310610f125750610859935050810160200138610e10565b81935090816020925483858a01015201910190918592610ef9565b9060405191826000825492610f4184610da7565b908184526001948581169081600014610fae5750600114610f6b575b50506108599250038361082b565b9093915060005260209081600020936000915b818310610f9657505061085993508201013880610f5d565b85548884018501529485019487945091830191610f7e565b9550505050505060ff1916602083015261085982604081013880610f5d565b90610fd781610d84565b6001600160a01b0381811690841681146110a0573314908115611072575b501561100457610859916115b1565b505060405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260849150fd5b6001600160a01b0316600090815260056020526040902060ff915061109890339061023c565b541638610ff5565b5050505050608460405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b600081815260026020526040902054611116906001600160a01b03161515610d37565b6000908152600460205260409020546001600160a01b031690565b6001600160a01b03811691903383146111b257816111716111829233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b60405190151581527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3565b50505050606460405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b1561120157565b5060405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b9061085992916112756112708433611363565b6111fa565b611436565b6040519061128782610810565b60008252565b90916108599260405192602084018481106001600160401b038211176112ba575b604052600084526112c7565b6112c26107d1565b6112ae565b906112eb9392916112db6112708433611363565b6112e6838383611436565b61168d565b156112f257565b5060405162461bcd60e51b81528061130c60048201611310565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6001600160a01b038061137584610d84565b1692818316928484149485156113ab575b50508315611395575b50505090565b6113a1919293506110f3565b161438808061138f565b60009081526005602090815260408083206001600160a01b03949094168352929052205460ff1693503880611386565b156113e257565b5060405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b61145a9061144384610d84565b6001600160a01b03828116939091821684146113db565b831692831561155b576114d882611475878461153296612899565b611497856114916114858a610d84565b6001600160a01b031690565b146113db565b6114be6114ae886000526004602052604060002090565b80546001600160a01b0319169055565b6001600160a01b0316600090815260036020526040902090565b80546000190190556001600160a01b038116600090815260036020526040902060018154019055611513856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b505050505050608460405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152fd5b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b03806115ea84610d84565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261066e57516106e5816106ba565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526106e59291019061072b565b3d15611688573d9061166e8261087a565b9161167c604051938461082b565b82523d6000602084013e565b606090565b92909190823b1561173c576116c0926020926000604051809681958294630a85bd0160e11b9a8b8552336004860161162c565b03926001600160a01b03165af16000918161171c575b5061170e575050506116e661165d565b8051908161170957505060405162461bcd60e51b81528061130c60048201611310565b602001fd5b6001600160e01b0319161490565b61173591925061172c3d8261082b565b3d810190611617565b90386116d6565b50505050600190565b1561174c57565b5060405162461bcd60e51b815260206004820152602d60248201527f466c65656b416363657373436f6e74726f6c3a206d757374206861766520636f60448201526c6c6c656374696f6e20726f6c6560981b6064820152608490fd5b6117b133611ab8565b801561183f575b6117c190611745565b60065460005260076020526117e3826117de836040600020611aa0565b611de9565b6002811015611826576040513381526001600160a01b03909216917fcf081ed2b728e3115904be00eb8927b2375ff3401839b37f7accfa1bb2bee15c90602090a3565b505050634e487b7160e01b600052602160045260246000fd5b506117c161184c33611ab8565b90506117b8565b1561185a57565b5060405162461bcd60e51b815260206004820152602860248201527f466c65656b416363657373436f6e74726f6c3a206d757374206861766520746f6044820152676b656e20726f6c6560c01b6064820152608490fd5b6118bb3382611b09565b8015611957575b6118cb90611853565b6000818152600860205260408120546009602052604082209082526020526118fa846117de8560408520611aa0565b600283101561193e57506040513381526001600160a01b03909316927f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c23990602090a4565b634e487b7160e01b815260216004526024945092505050fd5b506118cb6119653383611b09565b90506118c2565b61197533611ab8565b80156119ea575b61198590611745565b60065460005260076020526119a7826119a2836040600020611aa0565b611eec565b6002811015611826576040513381526001600160a01b03909216917faeff57f0f5e4d3d10a37d4a70fde8ed67a95e67b251d5c512c0ea98c380d2f9590602090a3565b506119856119f733611ab8565b905061197c565b611a083382611b09565b8015611a8b575b611a1890611853565b600081815260086020526040812054600960205260408220908252602052611a47846119a28560408520611aa0565b600283101561193e57506040513381526001600160a01b03909316927fe52d746e4c78c98c6bfa291b273406905c3e8550b7d911a6bea686368c2dc79d90602090a4565b50611a18611a993383611b09565b9050611a0f565b90600281101561182657600052602052604060002090565b600654600090815260076020908152604080832083805282528083206001600160a01b039094168352929052205b54151590565b9061023c611ae69260065460005260076020526040600020611aa0565b60009081526008602090815260408083205460098352818420908452825280832083805282528083206001600160a01b03909416835292905220611ae6565b6000908152600860209081526040808320546009835281842090845282528083206001845282528083206001600160a01b03909416835292905220611ae6565b611ae6929161023c91600052600860205260406000205460096020526040600020906000526020526040600020611aa0565b9060405191828154918282526020928383019160005283600020936000905b828210611bef575050506108599250038361082b565b85546001600160a01b031684526001958601958895509381019390910190611bd9565b611c32906006546000526020906007825260019283916040600020611aa0565b01604051918293849382845491828152019360005282600020926000905b828210611c68575050505050906106e591038261082b565b84546001600160a01b03168652879650948501949383019390830190611c50565b600081819282527f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c23960206008815260408085205460098352818620908652825280852085805282528085208083528186205415611ce9575b5051338152a4565b60018101611d0b8154600160401b811015611d2f575b60018101835582611dc3565b81549060018060a01b039060031b1b19169055549086805283528186205538611ce1565b611d376107d1565b611cff565b6000908082526008602052604082205460096020526040832090835260205260408220828052602052611d728360408420611de9565b6040513381526001600160a01b03909316927f0bf5a13b362503fcc74b8b9b1598aba2f3a9af85d05ba7978f7e9f447f22c23990602090a4565b50634e487b7160e01b600052603260045260246000fd5b8054821015611ddc575b60005260206000200190600090565b611de4611dac565b611dcd565b6001600160a01b03821660009081526020829052604090209091905415611e0e575050565b611e759060018301611e5c82611e388354600160401b811015611e78575b60018101855584611dc3565b90919082549060031b9160018060a01b039283811b93849216901b16911916179055565b54929060018060a01b0316600052602052604060002090565b55565b611e806107d1565b611e2c565b50634e487b7160e01b600052601160045260246000fd5b60018110611eac575b6000190190565b611eb4611e85565b611ea5565b6002906002198111611ec9570190565b611ed1611e85565b0190565b50634e487b7160e01b600052603160045260246000fd5b6001600160a01b038216600090815260208290526040902054611f0d575050565b6001600160a01b03821660009081526020829052604081209092611e759290915460018110612004575b841990818101916001840191611fa2611f5c83855460018110611ff7575b0185611dc3565b90546001600160a01b039660039290921b1c861690611f7f82611e388389611dc3565b60011910611fea575b6001600160a01b0316600090815260208790526040902090565b5581548015611fdd575b0191611fb88383611dc3565b909182549160031b1b19169055559060018060a01b0316600052602052604060002090565b611fe5611ed5565b611fac565b611ff2611e85565b611f88565b611fff611e85565b611f55565b61200c611e85565b611f37565b9294919590939561202133611ab8565b80156121ea575b61203190611745565b600a54966001600160a01b03851694851561219c576106e597612147612159948b61218b996120ea6121509661208b61208661208286600052600260205260018060a01b0360406000205416151590565b1590565b61249c565b6120958185611d3c565b6000848152600260205260409020546120b7906001600160a01b03161561249c565b6001600160a01b038116600090815260036020526040902060018154019055611513846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a46121206001600a5401600a55565b61213e6121378d600052600b602052604060002090565b9a8b612271565b60018a01612271565b60028801612271565b60038601612271565b6000600485015561216861084c565b91825260208201526121866005840160008052602052604060002090565b61234d565b6006612195612369565b9101612408565b50505050505050505050606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b506120316121f733611ab8565b9050612028565b50634e487b7160e01b600052600060045260246000fd5b818110612220575050565b60008155600101612215565b9190601f811161223b57505050565b610859926000526020600020906020601f840160051c83019310612267575b601f0160051c0190612215565b909150819061225a565b91909182516001600160401b038111612340575b612299816122938454610da7565b8461222c565b602080601f83116001146122d55750819293946000926122ca575b50508160011b916000199060031b1c1916179055565b0151905038806122b4565b90601f198316956122eb85600052602060002090565b926000905b8882106123285750508360019596971061230f575b505050811b019055565b015160001960f88460031b161c19169055388080612305565b806001859682949686015181550195019301906122f0565b6123486107d1565b612285565b6001602061085993612360815185612271565b01519101612271565b60405161237581610810565b6000815290565b6001600160fe1b038111600116612394575b60021b90565b61239c611e85565b61238e565b6123ab8154610da7565b90816123b5575050565b81601f600093116001146123c7575055565b818352602083206123e391601f0160051c810190600101612215565b8160208120915555565b61085992916123fb57612271565b6124036121fe565b612271565b815191600160401b831161248f575b8154838355808410612460575b50602080910191600052806000206000925b848410612444575050505050565b6001838261245483945186612271565b01920193019290612436565b8260005283602060002091820191015b81811061247d5750612424565b806124896001926123a1565b01612470565b6124976107d1565b612417565b156124a357565b5060405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b90611ed1602092828151948592016106f6565b6000818152600260205260409020546001600160a01b0316151561251f90610d37565b61252881610d84565b90600052600b602052604060002060405191612543836107e8565b601d83527f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602084015261257f906001600160a01b0316613b88565b6003820161258c83610f2d565b61259582610f2d565b61259e91613c37565b9060058401600485015491816125bf84809490600052602052604060002090565b926125d39190600052602052604060002090565b600101926125e0906139da565b604051607b60f81b602082015267113730b6b2911d1160c11b6021820152968796919591612611602989018361395d565b61088b60f21b81526002016e113232b9b1b934b83a34b7b7111d1160891b8152600f01612641906001840161395d565b61088b60f21b8152600201681137bbb732b9111d1160b91b8152600901612667916124e9565b61088b60f21b81526002016f1132bc3a32b93730b62fbab936111d1160811b81526010016126979160020161395d565b61088b60f21b8152600201681134b6b0b3b2911d1160b91b81526009016126bd916124e9565b61088b60f21b81526002016e2261747472696275746573223a205b60881b8152600f017f7b2274726169745f74797065223a2022454e53222c202276616c7565223a22008152601f0161270f9161395d565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a2022436f6d6d69742048617368222c20227681526630b63ab2911d1160c91b602082015260270161275a9161395d565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a20225265706f7369746f7279222c20227661815265363ab2911d1160d11b60208201526026016127a49161395d565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a202256657273696f6e222c202276616c7565815262111d1160e91b60208201526023016127eb916124e9565b61227d60f01b8152600201605d60f81b8152600101607d60f81b81526001010390601f1991828101825261281f908261082b565b61282890613882565b916040519283916020830161283c916124e9565b612845916124e9565b0390810182526106e5908261082b565b63ffffffff60e01b166380ac58cd60e01b8114908115612888575b811561287a575090565b6301ffc9a760e01b14919050565b635b5e139f60e01b81149150612870565b6001600160a01b0390811615801580612909575b156128d7575050816128d2610859936000526008602052604060002060018154019055565b611d3c565b156128e6575061085991611d3c565b16156128ef5750565b610859906000526008602052604060002060018154019055565b5081831615156128ad565b61291e3382611b48565b801561299f575b61292e90611853565b600081815260026020526040902054612951906001600160a01b03161515610d37565b80600052600b60205261296b826002604060002001612271565b61297533926129b4565b907fedbf1209b3baa7c1b5c43052ce5c511e243b3241d9f67733141d14f1da88cba16000604051a4565b5061292e6129ad3383611b09565b9050612925565b6129cc906020604051928284809451938492016106f6565b810103902090565b6129de3382611b48565b8015612a5f575b6129ee90611853565b600081815260026020526040902054612a11906001600160a01b03161515610d37565b80600052600b602052612a2b826003604060002001612271565b612a3533926129b4565b907f91ce7fcd4462481791c3fe849f7049373c5b43ef44aed48e7f1ecce781586e156000604051a4565b506129ee612a6d3383611b09565b90506129e5565b612a7e3382611b48565b8015612afc575b612a8e90611853565b600081815260026020526040902054612ab1906001600160a01b03161515610d37565b80600052600b602052612ac8826040600020612271565b612ad233926129b4565b907ffbbfca16a2770c7ca6e7063ab1a7eea5fe441ffef818325db51752066a6b128a6000604051a4565b50612a8e612b0a3383611b09565b9050612a85565b612b1b3382611b48565b8015612b9c575b612b2b90611853565b600081815260026020526040902054612b4e906001600160a01b03161515610d37565b80600052600b602052612b68826001604060002001612271565b612b7233926129b4565b907fd771eaa1c1382b0a9867125fcd921fdeddd211538b5381353a877abfbe3b50a46000604051a4565b50612b2b612baa3383611b09565b9050612b22565b6020612bca9181604051938285809451938492016106f6565b8101600c81520301902090565b600360a0918351815560208401516001820155604084015160028201550191612c1260608201511515849060ff801983541691151516179055565b6080810151835461ff00191690151560081b61ff00161783550151815462010000600160b01b03191660109190911b62010000600160b01b0316179055565b90612c7461085992805490600160401b821015612c7d575b600182018155611dc3565b6123fb57612271565b612c856107d1565b612c69565b600081815260026020526040902054612cad906001600160a01b03161515610d37565b6001600160a01b036003612cc084612bb1565b015460101c16612d7457612d216006612ce383600052600b602052604060002090565b0154612ced61085b565b83815260208101919091526000604082018190526060820181905260808201523360a0820152612d1c84612bb1565b612bd7565b612d41826006612d3b84600052600b602052604060002090565b01612c51565b612d4b33926129b4565b7f8140554c907b4ba66a04ea1f43b882cba992d3db4cd5c49298a56402d7b36ca26000604051a4565b505060405162461bcd60e51b815260206004820152601e60248201527f466c65656b4552433732313a20415020616c7265616479206578697374730000604482015260649150fd5b15612dc357565b5060405162461bcd60e51b815260206004820152601760248201527f466c65656b4552433732313a20696e76616c69642041500000000000000000006044820152606490fd5b6001600160a01b03612e2d816003612e2085612bb1565b015460101c161515612dbc565b6003612e3883612bb1565b015460101c16331415612f1257612ee6612e5182612bb1565b5491612ebd612e6a84600052600b602052604060002090565b60066001612e7785612bb1565b01549101906001612eb6612e9d612e97612e918654611e9c565b86611dc3565b50610f2d565b612eb181612eab8688611dc3565b906123ed565b612bb1565b0155612f59565b612ee1612ec982612bb1565b60036000918281558260018201558260028201550155565b6129b4565b9033917fef2f6bed86b96d79b41799f5285f73b31274bb303ebe5d55a3cb48c567ab2db06000604051a4565b505060405162461bcd60e51b815260206004820152601d60248201527f466c65656b4552433732313a206d757374206265204150206f776e65720000006044820152606490fd5b80548015612fd2575b6000190190612f718282611dc3565b612fc5575b612f808154610da7565b9081612f8b57505055565b81601f60009311600114612f9e57505555565b81835260208320612fba91601f0160051c810190600101612215565b816020812091555555565b612fcd6121fe565b612f76565b612fda611ed5565b612f62565b6001600160a01b039081612ff282612bb1565b6003015460101c16151561300590612dbc565b61300e90612bb1565b90815461301a906139da565b906002830154613029906139da565b92600301548060081c60ff1661303e906145d4565b9161304b60ff83166145d4565b9160101c1661305990613b88565b604051607b60f81b60208201529485949193916021860169113a37b5b2b724b2111d60b11b8152600a0161308c916124e9565b600b60fa1b8152600101671139b1b7b932911d60c11b81526008016130b0916124e9565b600b60fa1b81526001016e113730b6b2ab32b934b334b2b2111d60891b8152600f016130db916124e9565b600b60fa1b8152600101711131b7b73a32b73a2b32b934b334b2b2111d60711b8152601201613109916124e9565b600b60fa1b8152600101681137bbb732b9111d1160b91b815260090161312e916124e9565b601160f91b8152600101607d60f81b815260010103601f19810182526106e5908261082b565b60ff9060039061317390612eb16001600160a01b0384612e2084612bb1565b015460081c1690565b6131926001600160a01b036003612e2084612bb1565b600261319d82612bb1565b016131a881546131f8565b90556131b381612bb1565b546131ca60026131c284612bb1565b0154926129b4565b6040519283527f3ea1c0fcf71b86fca8f96ccac3cf26fba8983d3bbbe7bd720f1865d67fbaee4360203394a4565b6001906000198114611ec9570190565b61321e6001600160a01b036003612e2084612bb1565b600261322982612bb1565b01541561329057600261323b82612bb1565b0161324681546132d6565b905561325181612bb1565b5461326060026131c284612bb1565b60405192835233927f3ea1c0fcf71b86fca8f96ccac3cf26fba8983d3bbbe7bd720f1865d67fbaee4390602090a4565b5050606460405162461bcd60e51b815260206004820152602060248201527f466c65656b4552433732313a2073636f72652063616e74206265206c6f7765726044820152fd5b8015611eac576000190190565b6132f96001600160a01b036003612e2084612bb1565b61331e61330582612bb1565b546133103382611b48565b908115613383575b50611853565b61333f82600361332d84612bb1565b019060ff801983541691151516179055565b61335261334b82612bb1565b54916129b4565b6040519182527fe2e598f7ff2dfd4bc3bd989635401b4c56846b7893cb7eace51d099f21e69bff60203394151593a4565b61338f91503390611b09565b38613318565b6133ab6001600160a01b036003612e2084612bb1565b6133b761330582612bb1565b6133df8260036133c684612bb1565b019061ff00825491151560081b169061ff001916179055565b6133eb61334b82612bb1565b6040519182527f17bd9b465aa0cdc6b308874903e9c38b13f561ecb1f2edaa8bf3969fe603d11c60203394151593a4565b60008181526002602052604090205461343f906001600160a01b03161515610d37565b6000526020600b815260066040600020018054906001600160401b0382116134af575b60405192613475818460051b018561082b565b82845260009182528082208185015b84841061349357505050505090565b60018381926134a185610f2d565b815201920193019290613484565b6134b76107d1565b613462565b9190916134c93382611b48565b8015613593575b6134d990611853565b6000818152600260205260409020546134fc906001600160a01b03161515610d37565b7f73b929bf4db6be678cdbc6d41a5fe0a2cbb84ca95572062c4a978d8bd80a41b16040928351908482018281106001600160401b03821117613586575b85528582526020820152613577600091848352600b60205260058684200160048785200161356781546131f8565b809155845260205285832061234d565b61358133956129b4565b9351a4565b61358e6107d1565b613539565b506134d96135a13383611b09565b90506134d0565b6135b23382611b09565b8015613706575b6135c290611853565b806001600160a01b03806135d583610d84565b16158015806136fe575b156136d157506135ff826000526008602052604060002060018154019055565b61360882611c89565b61361182610d84565b600083815260046020526040812080546001600160a01b0319169055911680825260036020526040822060001981540190558282526002602052613669604083206bffffffffffffffffffffffff60a01b8154169055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051a46136ae60026136a883600052600b602052604060002090565b0161371b565b6136b55750565b6136cc61085991600052600b602052604060002090565b613725565b156136e4576136df82611c89565b613608565b6136df826000526008602052604060002060018154019055565b5060006135df565b506135c26137143383611b09565b90506135b9565b6106e59054610da7565b61372e816123a1565b600660019161373e8382016123a1565b61374a600282016123a1565b613756600382016123a1565b6000600482015501805490600081558161376f57505050565b6000526020600020908101905b81811061378857505050565b8061379384926123a1565b0161377c565b60405190606082018281106001600160401b03821117613809575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b6138116107d1565b6137b4565b60405190606082018281106001600160401b03821117613843575b604052602a8252604082602036910137565b61384b6107d1565b613831565b9061385a8261087a565b613867604051918261082b565b8281528092613878601f199161087a565b0190602036910137565b80511561395457613891613799565b6138b56138b06138ab6138a48551611eb9565b6003900490565b61237c565b613850565b9160208301918182518301915b828210613902575050506003905106806001146138ef576002146138e4575090565b603d90600019015390565b50603d9081600019820153600119015390565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c16880101516002860153168501015190820153019391906138c2565b506106e561127a565b60009291815461396c81610da7565b926001918083169081156139c55750600114613989575b50505050565b90919293945060005260209081600020906000915b8583106139b45750505050019038808080613983565b80548584015291830191810161399e565b60ff1916845250505001915038808080613983565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015613b0f575b506d04ee2d6d415b85acef810000000080831015613b00575b50662386f26fc1000080831015613af1575b506305f5e10080831015613ae2575b5061271080831015613ad3575b506064821015613ac3575b600a80921015613ab9575b600190816021613a71828701613850565b95860101905b613a83575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215613ab457919082613a77565b613a7c565b9160010191613a60565b9190606460029104910191613a55565b60049193920491019138613a4a565b60089193920491019138613a3d565b60109193920491019138613a2e565b60209193920491019138613a1c565b604093508104915038613a03565b906020918051821015613b2f57010190565b613b37611dac565b010190565b15613b4357565b50606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b613b90613816565b90815115613c2a575b603060208301538151600190811015613c1d575b90607860218401536029915b808311613bcc57506106e5915015613b3c565b9080600f613c0992166010811015613c10575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a613bff8587613b1d565b5360041c926132d6565b9190613bb9565b613c18611dac565b613bdf565b613c25611dac565b613bad565b613c32611dac565b613b99565b604080517f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060208201527f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e918101919091527f77332e6f72672f313939392f786c696e6b222076657273696f6e3d22312e312260608201527f2077696474683d2236343022206865696768743d22343830222076696577426f60808201527f783d2230203020363430203438302220786d6c3a73706163653d22707265736560a082015264393b32911f60d91b60c0820152651e3232b3399f60d11b60c582015291829160cb8301661e17b232b3399f60c91b81526007017f3c67207472616e73666f726d3d226d617472697828332e34322030203020332e8152741a1910199818171c9c10191a99171c9c149110101f60591b60208201526035017f3c706f6c79676f6e207374796c653d227374726f6b653a2072676228302c302c81527f30293b207374726f6b652d77696474683a20383b207374726f6b652d6461736860208201527f61727261793a206e6f6e653b207374726f6b652d6c696e656361703a2062757460408201527f743b207374726f6b652d646173686f66667365743a20303b207374726f6b652d60608201527f6c696e656a6f696e3a206d697465723b207374726f6b652d6d697465726c696d60808201527f69743a20343b2066696c6c3a20726762283135322c3135322c313833293b206660a08201527f696c6c2d72756c653a206e6f6e7a65726f3b206f7061636974793a20313b222060c08201527f766563746f722d6566666563743d226e6f6e2d7363616c696e672d7374726f6b60e08201527f65222020706f696e74733d222d35302c2d3530202d35302c35302035302c35306101008201526b101a9816169a98101110179f60a11b61012082015261012c01631e17b39f60e11b81526004017f3c67207472616e73666f726d3d226d617472697828312030203020312033303381527f2e35203131352e36372922207374796c653d222220203e00000000000000000060208201526037017f3c7465787420786d6c3a73706163653d2270726573657276652220666f6e742d81527f66616d696c793d224f70656e2053616e732220666f6e742d73697a653d22323460208201527f2220666f6e742d7374796c653d226e6f726d616c2220666f6e742d776569676860408201527f743d226e6f726d616c22207374796c653d227374726f6b653a206e6f6e653b2060608201527f7374726f6b652d77696474683a20313b207374726f6b652d646173686172726160808201527f793a206e6f6e653b207374726f6b652d6c696e656361703a20627574743b207360a08201527f74726f6b652d646173686f66667365743a20303b207374726f6b652d6c696e6560c08201527f6a6f696e3a206d697465723b207374726f6b652d6d697465726c696d69743a2060e08201527f343b2066696c6c3a2072676228302c302c30293b2066696c6c2d72756c653a206101008201527f6e6f6e7a65726f3b206f7061636974793a20313b2077686974652d73706163656101208201527f3a207072653b22203e3c747370616e20783d222d34352e372220793d22352e366101408201527f3522207374796c653d227374726f6b652d77696474683a20313b20666f6e742d6101608201527f66616d696c793a20224f70656e2053616e73222c2073616e732d73657269663b6101808201527f20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206e6f6101a08201527f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6c3a6101c08201527f2072676228302c302c30293b20223e466c65656b204e4641733c2f747370616e6101e0820152671f1e17ba32bc3a1f60c11b61020082015261020801631e17b39f60e11b81526004017f3c67207472616e73666f726d3d226d617472697828312030203020312033303281527410191b18971a1b94911039ba3cb6329e911110101f60591b60208201526035017f3c7465787420786d6c3a73706163653d2270726573657276652220666f6e742d81527f66616d696c793d224f70656e2053616e732220666f6e742d73697a653d22323860208201527f2220666f6e742d7374796c653d226e6f726d616c2220666f6e742d776569676860408201527f743d226e6f726d616c22207374796c653d227374726f6b653a206e6f6e653b2060608201527f7374726f6b652d77696474683a20313b207374726f6b652d646173686172726160808201527f793a206e6f6e653b207374726f6b652d6c696e656361703a20627574743b207360a08201527f74726f6b652d646173686f66667365743a20303b207374726f6b652d6c696e6560c08201527f6a6f696e3a206d697465723b207374726f6b652d6d697465726c696d69743a2060e08201527f343b2066696c6c3a2072676228302c302c30293b2066696c6c2d72756c653a206101008201527f6e6f6e7a65726f3b206f7061636974793a20313b2077686974652d73706163656101208201527f3a207072653b22203e3c747370616e20783d222d34342e32362220793d222d366101408201527f2e313422207374796c653d227374726f6b652d77696474683a20313b20666f6e6101608201527f742d66616d696c793a20224f70656e2053616e73222c2073616e732d736572696101808201527f663b20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206101a08201527f6e6f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6101c082015270361d103933b1141816181618149d90111f60791b6101e08201526101f10161446c916124e9565b7f3c2f747370616e3e3c747370616e20783d222d33372e31342220793d2231372e81527f343522207374796c653d227374726f6b652d77696474683a20313b20666f6e7460208201527f2d66616d696c793a20224f70656e2053616e73222c2073616e732d736572696660408201527f3b20666f6e742d73697a653a20313870783b20666f6e742d7374796c653a206e60608201527f6f726d616c3b20666f6e742d7765696768743a206e6f726d616c3b2066696c6c60808201526f1d103933b1141816181618149d90111f60811b60a082015260b00161454c916124e9565b6e1e17ba39b830b71f1e17ba32bc3a1f60891b8152600f01631e17b39f60e11b8152600401651e17b9bb339f60d11b81526006010390601f19918281018252614595908261082b565b61459e90613882565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d820161283c565b156145f9576040516145e5816107e8565b60048152637472756560e01b602082015290565b604051614605816107e8565b600581526466616c736560d81b60208201529056fea364697066735822122068c2c48eb3ccede8f14a554da8bfac0598abe0dcf3e1d816e4b1ceb4e255c8866c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1468DEB EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x623 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x5EB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x5D3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x5BB JUMPI DUP1 PUSH4 0x246A908B EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0x27DC5CEC EQ PUSH2 0x587 JUMPI DUP1 PUSH4 0x2D957AAD EQ PUSH2 0x56F JUMPI DUP1 PUSH4 0x2F1E8F0A EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0x353B07A4 EQ PUSH2 0x4E4 JUMPI DUP1 PUSH4 0x3806F152 EQ PUSH2 0x4CC JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x42E44BBF EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0x7469A03B EQ PUSH2 0x41D JUMPI DUP1 PUSH4 0x78278CCA EQ PUSH2 0x405 JUMPI DUP1 PUSH4 0x8C3C0A44 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0x94EC65C5 EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3BA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0xA27D0B27 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xA397C830 EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0xABA81125 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0xB20B94F1 EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0xB30437A0 EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0xB42DBE38 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xCDB0E89E EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0xD7A75BE1 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xE9447250 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xF6BE6B78 EQ PUSH2 0x1D7 JUMPI PUSH4 0xF9315177 EQ PUSH2 0x1B9 JUMPI POP PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x1CA CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x2914 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x1F3 PUSH2 0x1EE CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0x341C JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xC5C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x253 PUSH2 0x23C PUSH2 0x21F CALLDATASIZE PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x282 CALLDATASIZE PUSH2 0x959 JUMP JUMPDEST SWAP1 PUSH2 0x1AEC JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x29F CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x3154 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x2B6 CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x2A74 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x2D8 PUSH2 0x2D3 CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0x24FC JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x750 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x2F5 CALLDATASIZE PUSH2 0xBB9 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x12C7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x315 CALLDATASIZE PUSH2 0x675 JUMP JUMPDEST SWAP2 PUSH2 0x1B88 JUMP JUMPDEST POP PUSH2 0x1D0 PUSH2 0x328 CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x2C8A JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x340 CALLDATASIZE PUSH2 0xA4D JUMP JUMPDEST SWAP1 PUSH2 0x32E3 JUMP JUMPDEST POP PUSH2 0x1FE SWAP2 POP PUSH2 0x364 PUSH2 0x358 CALLDATASIZE PUSH2 0xADC JUMP JUMPDEST SWAP6 SWAP5 SWAP1 SWAP5 SWAP4 SWAP2 SWAP4 PUSH2 0x2011 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x385 CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x3208 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x39C CALLDATASIZE PUSH2 0x675 JUMP JUMPDEST SWAP2 PUSH2 0x18B1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x3B4 CALLDATASIZE PUSH2 0xAAB JUMP JUMPDEST SWAP1 PUSH2 0x1131 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x3CE CALLDATASIZE PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x2D8 PUSH2 0xE97 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x3E8 CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x317C JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x3FF CALLDATASIZE PUSH2 0x959 JUMP JUMPDEST SWAP1 PUSH2 0x196C JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x417 CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x29D4 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x42F CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x2E09 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x364 PUSH2 0x44B CALLDATASIZE PUSH2 0xA88 JUMP JUMPDEST PUSH2 0xCBE JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x46C PUSH2 0x467 CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0xD84 JUMP JUMPDEST SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x497 CALLDATASIZE PUSH2 0xA4D JUMP JUMPDEST SWAP1 PUSH2 0x3395 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x4AF CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0x35A8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x4C6 CALLDATASIZE PUSH2 0x79A JUMP JUMPDEST SWAP2 PUSH2 0x128D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x4DE CALLDATASIZE PUSH2 0xA07 JUMP JUMPDEST SWAP2 PUSH2 0x34BC JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x500 PUSH2 0x4FB CALLDATASIZE PUSH2 0x9EC JUMP JUMPDEST PUSH2 0x1C12 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x9A8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x500 PUSH1 0x1 PUSH2 0x569 PUSH2 0x564 PUSH2 0x52A CALLDATASIZE PUSH2 0x989 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x555 PUSH2 0x543 DUP3 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP2 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1AA0 JUMP JUMPDEST ADD PUSH2 0x1BBA JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x581 CALLDATASIZE PUSH2 0x959 JUMP JUMPDEST SWAP1 PUSH2 0x17A8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x2D8 PUSH2 0x59E CALLDATASIZE PUSH2 0x92F JUMP JUMPDEST PUSH2 0x2FDF JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x5B5 CALLDATASIZE PUSH2 0x900 JUMP JUMPDEST SWAP1 PUSH2 0x2B11 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x5CD CALLDATASIZE PUSH2 0x79A JUMP JUMPDEST SWAP2 PUSH2 0x125D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x5E5 CALLDATASIZE PUSH2 0x773 JUMP JUMPDEST SWAP1 PUSH2 0xFCD JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x46C PUSH2 0x602 CALLDATASIZE PUSH2 0x761 JUMP JUMPDEST PUSH2 0x10F3 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x61B CALLDATASIZE PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x2D8 PUSH2 0xDE3 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1FE SWAP2 POP PUSH2 0x25A PUSH2 0x63A CALLDATASIZE PUSH2 0x6CD JUMP JUMPDEST PUSH2 0x2855 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D3 JUMPI PUSH2 0x1D0 PUSH2 0x651 CALLDATASIZE PUSH2 0x675 JUMP JUMPDEST SWAP2 PUSH2 0x19FE JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 EQ ISZERO PUSH2 0x66E JUMPI JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x6B2 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x6A9 JUMPI SWAP1 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND EQ ISZERO PUSH2 0xF JUMPI JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x6E5 DUP2 PUSH2 0x6BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI JUMP JUMPDEST SWAP2 DUP1 SWAP2 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x716 JUMPI POP GT PUSH2 0x70F JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST SWAP2 POP DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP7 ADD MSTORE ADD DUP3 SWAP2 PUSH2 0x6FE JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x744 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x6E5 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x72B JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x66E JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x803 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80B PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x803 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x803 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x859 DUP3 PUSH2 0x7E8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xC0 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x803 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x897 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x89F PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x8B0 DUP3 PUSH2 0x87A JUMP JUMPDEST SWAP2 PUSH2 0x8BE PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x82B JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x8DB JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x6B2 JUMPI DUP2 PUSH1 0x20 PUSH2 0x6E5 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x8A4 JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x6A9 JUMPI PUSH2 0x6E5 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x6B2 JUMPI PUSH2 0x6E5 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x66E JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x9CF JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x66E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x8DB JUMPI DUP4 PUSH2 0xA36 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x8DB JUMPI PUSH2 0x6E5 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x6B2 JUMPI PUSH2 0xA77 SWAP2 PUSH1 0x4 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x66E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ ISZERO PUSH2 0x66E JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x66E JUMPI PUSH2 0xAF0 PUSH2 0x657 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP3 GT PUSH2 0x8DB JUMPI PUSH2 0xB12 DUP2 PUSH1 0x4 SWAP4 DUP5 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xBAD JUMPI DUP3 PUSH2 0xB29 SWAP2 DUP6 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0x64 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xBA0 JUMPI DUP4 PUSH2 0xB40 SWAP2 DUP7 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0x84 CALLDATALOAD DUP4 DUP2 GT PUSH2 0xB92 JUMPI DUP5 PUSH2 0xB57 SWAP2 DUP4 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0xA4 CALLDATALOAD DUP5 DUP2 GT PUSH2 0xB83 JUMPI DUP2 PUSH2 0xB6E SWAP2 DUP5 ADD PUSH2 0x8E5 JUMP JUMPDEST SWAP4 PUSH1 0xC4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xB83 JUMPI PUSH2 0x6E5 SWAP3 ADD PUSH2 0x8E5 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x80 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x66E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x4 CALLDATALOAD DUP4 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6A9 JUMPI SWAP3 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6A9 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xC1E JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xC1E JUMPI DUP2 PUSH1 0x24 PUSH2 0x6E5 SWAP4 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x8A4 JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x6B2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 PUSH1 0x40 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0xC90 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH2 0xCAE PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE DUP11 MLOAD PUSH2 0x72B JUMP JUMPDEST SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0xC80 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xCDE JUMPI PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xD3E JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6E5 DUP2 ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xDD9 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xDC1 JUMPI JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 DUP2 SLOAD SWAP2 PUSH2 0xDF6 DUP4 PUSH2 0xDA7 JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0xE7A JUMPI POP PUSH1 0x1 EQ PUSH2 0xE1D JUMPI JUMPDEST POP PUSH2 0x859 SWAP3 POP SUB DUP4 PUSH2 0x82B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 MSTORE SWAP2 POP PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 JUMPDEST DUP5 DUP4 LT PUSH2 0xE5F JUMPI POP PUSH2 0x859 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0xE10 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0xE46 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH1 0xFF NOT AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x859 DUP3 PUSH1 0x40 DUP2 ADD CODESIZE PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x1 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0xEAD DUP5 PUSH2 0xDA7 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP4 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0xE7A JUMPI POP PUSH1 0x1 EQ PUSH2 0xED0 JUMPI POP PUSH2 0x859 SWAP3 POP SUB DUP4 PUSH2 0x82B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE SWAP2 POP PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 JUMPDEST DUP5 DUP4 LT PUSH2 0xF12 JUMPI POP PUSH2 0x859 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0xE10 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0xEF9 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0xF41 DUP5 PUSH2 0xDA7 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xFAE JUMPI POP PUSH1 0x1 EQ PUSH2 0xF6B JUMPI JUMPDEST POP POP PUSH2 0x859 SWAP3 POP SUB DUP4 PUSH2 0x82B JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0xF96 JUMPI POP POP PUSH2 0x859 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0xF5D JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0xF7E JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH1 0xFF NOT AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x859 DUP3 PUSH1 0x40 DUP2 ADD CODESIZE DUP1 PUSH2 0xF5D JUMP JUMPDEST SWAP1 PUSH2 0xFD7 DUP2 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP1 DUP5 AND DUP2 EQ PUSH2 0x10A0 JUMPI CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x1072 JUMPI JUMPDEST POP ISZERO PUSH2 0x1004 JUMPI PUSH2 0x859 SWAP2 PUSH2 0x15B1 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP2 POP REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0xFF SWAP2 POP PUSH2 0x1098 SWAP1 CALLER SWAP1 PUSH2 0x23C JUMP JUMPDEST SLOAD AND CODESIZE PUSH2 0xFF5 JUMP JUMPDEST POP POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1116 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 SWAP1 CALLER DUP4 EQ PUSH2 0x11B2 JUMPI DUP2 PUSH2 0x1171 PUSH2 0x1182 SWAP3 CALLER PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 JUMP JUMPDEST POP POP POP POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x1201 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x859 SWAP3 SWAP2 PUSH2 0x1275 PUSH2 0x1270 DUP5 CALLER PUSH2 0x1363 JUMP JUMPDEST PUSH2 0x11FA JUMP JUMPDEST PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1287 DUP3 PUSH2 0x810 JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x859 SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD DUP5 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x12BA JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP5 MSTORE PUSH2 0x12C7 JUMP JUMPDEST PUSH2 0x12C2 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x12AE JUMP JUMPDEST SWAP1 PUSH2 0x12EB SWAP4 SWAP3 SWAP2 PUSH2 0x12DB PUSH2 0x1270 DUP5 CALLER PUSH2 0x1363 JUMP JUMPDEST PUSH2 0x12E6 DUP4 DUP4 DUP4 PUSH2 0x1436 JUMP JUMPDEST PUSH2 0x168D JUMP JUMPDEST ISZERO PUSH2 0x12F2 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x130C PUSH1 0x4 DUP3 ADD PUSH2 0x1310 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x1375 DUP5 PUSH2 0xD84 JUMP JUMPDEST AND SWAP3 DUP2 DUP4 AND SWAP3 DUP5 DUP5 EQ SWAP5 DUP6 ISZERO PUSH2 0x13AB JUMPI JUMPDEST POP POP DUP4 ISZERO PUSH2 0x1395 JUMPI JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x13A1 SWAP2 SWAP3 SWAP4 POP PUSH2 0x10F3 JUMP JUMPDEST AND EQ CODESIZE DUP1 DUP1 PUSH2 0x138F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP4 POP CODESIZE DUP1 PUSH2 0x1386 JUMP JUMPDEST ISZERO PUSH2 0x13E2 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x145A SWAP1 PUSH2 0x1443 DUP5 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP4 SWAP1 SWAP2 DUP3 AND DUP5 EQ PUSH2 0x13DB JUMP JUMPDEST DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x155B JUMPI PUSH2 0x14D8 DUP3 PUSH2 0x1475 DUP8 DUP5 PUSH2 0x1532 SWAP7 PUSH2 0x2899 JUMP JUMPDEST PUSH2 0x1497 DUP6 PUSH2 0x1491 PUSH2 0x1485 DUP11 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST EQ PUSH2 0x13DB JUMP JUMPDEST PUSH2 0x14BE PUSH2 0x14AE DUP9 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE PUSH2 0x1513 DUP6 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x15EA DUP5 PUSH2 0xD84 JUMP JUMPDEST AND SWAP2 AND SWAP1 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x66E JUMPI MLOAD PUSH2 0x6E5 DUP2 PUSH2 0x6BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x6E5 SWAP3 SWAP2 ADD SWAP1 PUSH2 0x72B JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1688 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x166E DUP3 PUSH2 0x87A JUMP JUMPDEST SWAP2 PUSH2 0x167C PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x82B JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x173C JUMPI PUSH2 0x16C0 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP11 DUP12 DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD PUSH2 0x162C JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x171C JUMPI JUMPDEST POP PUSH2 0x170E JUMPI POP POP POP PUSH2 0x16E6 PUSH2 0x165D JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 PUSH2 0x1709 JUMPI POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x130C PUSH1 0x4 DUP3 ADD PUSH2 0x1310 JUMP JUMPDEST PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1735 SWAP2 SWAP3 POP PUSH2 0x172C RETURNDATASIZE DUP3 PUSH2 0x82B JUMP JUMPDEST RETURNDATASIZE DUP2 ADD SWAP1 PUSH2 0x1617 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x16D6 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x174C JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B416363657373436F6E74726F6C3A206D757374206861766520636F PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x6C6C656374696F6E20726F6C65 PUSH1 0x98 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x17B1 CALLER PUSH2 0x1AB8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x183F JUMPI JUMPDEST PUSH2 0x17C1 SWAP1 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0x17E3 DUP3 PUSH2 0x17DE DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1826 JUMPI PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0xCF081ED2B728E3115904BE00EB8927B2375FF3401839B37F7ACCFA1BB2BEE15C SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x17C1 PUSH2 0x184C CALLER PUSH2 0x1AB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x17B8 JUMP JUMPDEST ISZERO PUSH2 0x185A JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B416363657373436F6E74726F6C3A206D757374206861766520746F PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6B656E20726F6C65 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x18BB CALLER DUP3 PUSH2 0x1B09 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1957 JUMPI JUMPDEST PUSH2 0x18CB SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x18FA DUP5 PUSH2 0x17DE DUP6 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x193E JUMPI POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xBF5A13B362503FCC74B8B9B1598ABA2F3A9AF85D05BA7978F7E9F447F22C239 SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP5 POP SWAP3 POP POP POP REVERT JUMPDEST POP PUSH2 0x18CB PUSH2 0x1965 CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x18C2 JUMP JUMPDEST PUSH2 0x1975 CALLER PUSH2 0x1AB8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19EA JUMPI JUMPDEST PUSH2 0x1985 SWAP1 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0x19A7 DUP3 PUSH2 0x19A2 DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH2 0x1EEC JUMP JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1826 JUMPI PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH32 0xAEFF57F0F5E4D3D10A37D4A70FDE8ED67A95E67B251D5C512C0EA98C380D2F95 SWAP1 PUSH1 0x20 SWAP1 LOG3 JUMP JUMPDEST POP PUSH2 0x1985 PUSH2 0x19F7 CALLER PUSH2 0x1AB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x197C JUMP JUMPDEST PUSH2 0x1A08 CALLER DUP3 PUSH2 0x1B09 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A8B JUMPI JUMPDEST PUSH2 0x1A18 SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1A47 DUP5 PUSH2 0x19A2 DUP6 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH1 0x2 DUP4 LT ISZERO PUSH2 0x193E JUMPI POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xE52D746E4C78C98C6BFA291B273406905C3E8550B7D911A6BEA686368C2DC79D SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST POP PUSH2 0x1A18 PUSH2 0x1A99 CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A0F JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1826 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 JUMPDEST SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x23C PUSH2 0x1AE6 SWAP3 PUSH1 0x6 SLOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x9 DUP4 MSTORE DUP2 DUP5 KECCAK256 SWAP1 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x9 DUP4 MSTORE DUP2 DUP5 KECCAK256 SWAP1 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 PUSH2 0x1AE6 JUMP JUMPDEST PUSH2 0x1AE6 SWAP3 SWAP2 PUSH2 0x23C SWAP2 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1BEF JUMPI POP POP POP PUSH2 0x859 SWAP3 POP SUB DUP4 PUSH2 0x82B JUMP JUMPDEST DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1BD9 JUMP JUMPDEST PUSH2 0x1C32 SWAP1 PUSH1 0x6 SLOAD PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x7 DUP3 MSTORE PUSH1 0x1 SWAP3 DUP4 SWAP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1AA0 JUMP JUMPDEST ADD PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP4 DUP5 SWAP4 DUP3 DUP5 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP4 PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1C68 JUMPI POP POP POP POP POP SWAP1 PUSH2 0x6E5 SWAP2 SUB DUP3 PUSH2 0x82B JUMP JUMPDEST DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE DUP8 SWAP7 POP SWAP5 DUP6 ADD SWAP5 SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH2 0x1C50 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SWAP3 DUP3 MSTORE PUSH32 0xBF5A13B362503FCC74B8B9B1598ABA2F3A9AF85D05BA7978F7E9F447F22C239 PUSH1 0x20 PUSH1 0x8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SLOAD PUSH1 0x9 DUP4 MSTORE DUP2 DUP7 KECCAK256 SWAP1 DUP7 MSTORE DUP3 MSTORE DUP1 DUP6 KECCAK256 DUP6 DUP1 MSTORE DUP3 MSTORE DUP1 DUP6 KECCAK256 DUP1 DUP4 MSTORE DUP2 DUP7 KECCAK256 SLOAD ISZERO PUSH2 0x1CE9 JUMPI JUMPDEST POP MLOAD CALLER DUP2 MSTORE LOG4 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD PUSH2 0x1D0B DUP2 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x1D2F JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP4 SSTORE DUP3 PUSH2 0x1DC3 JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE SLOAD SWAP1 DUP7 DUP1 MSTORE DUP4 MSTORE DUP2 DUP7 KECCAK256 SSTORE CODESIZE PUSH2 0x1CE1 JUMP JUMPDEST PUSH2 0x1D37 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x1CFF JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP1 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP3 DUP1 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1D72 DUP4 PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x1DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH32 0xBF5A13B362503FCC74B8B9B1598ABA2F3A9AF85D05BA7978F7E9F447F22C239 SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x1DDC JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1DE4 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x1DCD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 SWAP1 SLOAD ISZERO PUSH2 0x1E0E JUMPI POP POP JUMP JUMPDEST PUSH2 0x1E75 SWAP1 PUSH1 0x1 DUP4 ADD PUSH2 0x1E5C DUP3 PUSH2 0x1E38 DUP4 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x1E78 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP6 SSTORE DUP5 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP2 SHL SWAP4 DUP5 SWAP3 AND SWAP1 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST SLOAD SWAP3 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x1E80 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x1E2C JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 LT PUSH2 0x1EAC JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x1EB4 PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x1EA5 JUMP JUMPDEST PUSH1 0x2 SWAP1 PUSH1 0x2 NOT DUP2 GT PUSH2 0x1EC9 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x1ED1 PUSH2 0x1E85 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1F0D JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 SWAP3 PUSH2 0x1E75 SWAP3 SWAP1 SWAP2 SLOAD PUSH1 0x1 DUP2 LT PUSH2 0x2004 JUMPI JUMPDEST DUP5 NOT SWAP1 DUP2 DUP2 ADD SWAP2 PUSH1 0x1 DUP5 ADD SWAP2 PUSH2 0x1FA2 PUSH2 0x1F5C DUP4 DUP6 SLOAD PUSH1 0x1 DUP2 LT PUSH2 0x1FF7 JUMPI JUMPDEST ADD DUP6 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR DUP7 AND SWAP1 PUSH2 0x1F7F DUP3 PUSH2 0x1E38 DUP4 DUP10 PUSH2 0x1DC3 JUMP JUMPDEST PUSH1 0x1 NOT LT PUSH2 0x1FEA JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE DUP2 SLOAD DUP1 ISZERO PUSH2 0x1FDD JUMPI JUMPDEST ADD SWAP2 PUSH2 0x1FB8 DUP4 DUP4 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE SSTORE SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1FE5 PUSH2 0x1ED5 JUMP JUMPDEST PUSH2 0x1FAC JUMP JUMPDEST PUSH2 0x1FF2 PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x1F88 JUMP JUMPDEST PUSH2 0x1FFF PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x1F55 JUMP JUMPDEST PUSH2 0x200C PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x1F37 JUMP JUMPDEST SWAP3 SWAP5 SWAP2 SWAP6 SWAP1 SWAP4 SWAP6 PUSH2 0x2021 CALLER PUSH2 0x1AB8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x21EA JUMPI JUMPDEST PUSH2 0x2031 SWAP1 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0xA SLOAD SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP5 DUP6 ISZERO PUSH2 0x219C JUMPI PUSH2 0x6E5 SWAP8 PUSH2 0x2147 PUSH2 0x2159 SWAP5 DUP12 PUSH2 0x218B SWAP10 PUSH2 0x20EA PUSH2 0x2150 SWAP7 PUSH2 0x208B PUSH2 0x2086 PUSH2 0x2082 DUP7 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x249C JUMP JUMPDEST PUSH2 0x2095 DUP2 DUP6 PUSH2 0x1D3C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x20B7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x249C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE PUSH2 0x1513 DUP5 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 PUSH1 0x40 MLOAD LOG4 PUSH2 0x2120 PUSH1 0x1 PUSH1 0xA SLOAD ADD PUSH1 0xA SSTORE JUMP JUMPDEST PUSH2 0x213E PUSH2 0x2137 DUP14 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP11 DUP12 PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x2 DUP9 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x3 DUP7 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP6 ADD SSTORE PUSH2 0x2168 PUSH2 0x84C JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2186 PUSH1 0x5 DUP5 ADD PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x234D JUMP JUMPDEST PUSH1 0x6 PUSH2 0x2195 PUSH2 0x2369 JUMP JUMPDEST SWAP2 ADD PUSH2 0x2408 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH2 0x2031 PUSH2 0x21F7 CALLER PUSH2 0x1AB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x2028 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x2220 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2215 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x223B JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x859 SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x2267 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x2215 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x225A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2340 JUMPI JUMPDEST PUSH2 0x2299 DUP2 PUSH2 0x2293 DUP5 SLOAD PUSH2 0xDA7 JUMP JUMPDEST DUP5 PUSH2 0x222C JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x22D5 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x22CA JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x22B4 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x22EB DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x2328 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x230F JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2305 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x22F0 JUMP JUMPDEST PUSH2 0x2348 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x2285 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 PUSH2 0x859 SWAP4 PUSH2 0x2360 DUP2 MLOAD DUP6 PUSH2 0x2271 JUMP JUMPDEST ADD MLOAD SWAP2 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2375 DUP2 PUSH2 0x810 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xFE SHL SUB DUP2 GT PUSH1 0x1 AND PUSH2 0x2394 JUMPI JUMPDEST PUSH1 0x2 SHL SWAP1 JUMP JUMPDEST PUSH2 0x239C PUSH2 0x1E85 JUMP JUMPDEST PUSH2 0x238E JUMP JUMPDEST PUSH2 0x23AB DUP2 SLOAD PUSH2 0xDA7 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x23B5 JUMPI POP POP JUMP JUMPDEST DUP2 PUSH1 0x1F PUSH1 0x0 SWAP4 GT PUSH1 0x1 EQ PUSH2 0x23C7 JUMPI POP SSTORE JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 DUP4 KECCAK256 PUSH2 0x23E3 SWAP2 PUSH1 0x1F ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2215 JUMP JUMPDEST DUP2 PUSH1 0x20 DUP2 KECCAK256 SWAP2 SSTORE SSTORE JUMP JUMPDEST PUSH2 0x859 SWAP3 SWAP2 PUSH2 0x23FB JUMPI PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2403 PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x2271 JUMP JUMPDEST DUP2 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x40 SHL DUP4 GT PUSH2 0x248F JUMPI JUMPDEST DUP2 SLOAD DUP4 DUP4 SSTORE DUP1 DUP5 LT PUSH2 0x2460 JUMPI JUMPDEST POP PUSH1 0x20 DUP1 SWAP2 ADD SWAP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x2444 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP4 DUP3 PUSH2 0x2454 DUP4 SWAP5 MLOAD DUP7 PUSH2 0x2271 JUMP JUMPDEST ADD SWAP3 ADD SWAP4 ADD SWAP3 SWAP1 PUSH2 0x2436 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE DUP4 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 DUP3 ADD SWAP2 ADD JUMPDEST DUP2 DUP2 LT PUSH2 0x247D JUMPI POP PUSH2 0x2424 JUMP JUMPDEST DUP1 PUSH2 0x2489 PUSH1 0x1 SWAP3 PUSH2 0x23A1 JUMP JUMPDEST ADD PUSH2 0x2470 JUMP JUMPDEST PUSH2 0x2497 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x2417 JUMP JUMPDEST ISZERO PUSH2 0x24A3 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1ED1 PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0x251F SWAP1 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x2528 DUP2 PUSH2 0xD84 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2543 DUP4 PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x1D DUP4 MSTORE PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x257F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B88 JUMP JUMPDEST PUSH1 0x3 DUP3 ADD PUSH2 0x258C DUP4 PUSH2 0xF2D JUMP JUMPDEST PUSH2 0x2595 DUP3 PUSH2 0xF2D JUMP JUMPDEST PUSH2 0x259E SWAP2 PUSH2 0x3C37 JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP5 ADD PUSH1 0x4 DUP6 ADD SLOAD SWAP2 DUP2 PUSH2 0x25BF DUP5 DUP1 SWAP5 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0x25D3 SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 PUSH2 0x25E0 SWAP1 PUSH2 0x39DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x7B PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH8 0x113730B6B2911D11 PUSH1 0xC1 SHL PUSH1 0x21 DUP3 ADD MSTORE SWAP7 DUP8 SWAP7 SWAP2 SWAP6 SWAP2 PUSH2 0x2611 PUSH1 0x29 DUP10 ADD DUP4 PUSH2 0x395D JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH15 0x113232B9B1B934B83A34B7B7111D11 PUSH1 0x89 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH2 0x2641 SWAP1 PUSH1 0x1 DUP5 ADD PUSH2 0x395D JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH9 0x1137BBB732B9111D11 PUSH1 0xB9 SHL DUP2 MSTORE PUSH1 0x9 ADD PUSH2 0x2667 SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH16 0x1132BC3A32B93730B62FBAB936111D11 PUSH1 0x81 SHL DUP2 MSTORE PUSH1 0x10 ADD PUSH2 0x2697 SWAP2 PUSH1 0x2 ADD PUSH2 0x395D JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH9 0x1134B6B0B3B2911D11 PUSH1 0xB9 SHL DUP2 MSTORE PUSH1 0x9 ADD PUSH2 0x26BD SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH15 0x2261747472696275746573223A205B PUSH1 0x88 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH32 0x7B2274726169745F74797065223A2022454E53222C202276616C7565223A2200 DUP2 MSTORE PUSH1 0x1F ADD PUSH2 0x270F SWAP2 PUSH2 0x395D JUMP JUMPDEST PUSH3 0x89F4B PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x3 ADD PUSH32 0x7B2274726169745F74797065223A2022436F6D6D69742048617368222C202276 DUP2 MSTORE PUSH7 0x30B63AB2911D11 PUSH1 0xC9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x27 ADD PUSH2 0x275A SWAP2 PUSH2 0x395D JUMP JUMPDEST PUSH3 0x89F4B PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x3 ADD PUSH32 0x7B2274726169745F74797065223A20225265706F7369746F7279222C20227661 DUP2 MSTORE PUSH6 0x363AB2911D11 PUSH1 0xD1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x26 ADD PUSH2 0x27A4 SWAP2 PUSH2 0x395D JUMP JUMPDEST PUSH3 0x89F4B PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x3 ADD PUSH32 0x7B2274726169745F74797065223A202256657273696F6E222C202276616C7565 DUP2 MSTORE PUSH3 0x111D11 PUSH1 0xE9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x23 ADD PUSH2 0x27EB SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH2 0x227D PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 ADD PUSH1 0x5D PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH1 0x7D PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SUB SWAP1 PUSH1 0x1F NOT SWAP2 DUP3 DUP2 ADD DUP3 MSTORE PUSH2 0x281F SWAP1 DUP3 PUSH2 0x82B JUMP JUMPDEST PUSH2 0x2828 SWAP1 PUSH2 0x3882 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x283C SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH2 0x2845 SWAP2 PUSH2 0x24E9 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP3 MSTORE PUSH2 0x6E5 SWAP1 DUP3 PUSH2 0x82B JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x2888 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x287A JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x5B5E139F PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND ISZERO DUP1 ISZERO DUP1 PUSH2 0x2909 JUMPI JUMPDEST ISZERO PUSH2 0x28D7 JUMPI POP POP DUP2 PUSH2 0x28D2 PUSH2 0x859 SWAP4 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1D3C JUMP JUMPDEST ISZERO PUSH2 0x28E6 JUMPI POP PUSH2 0x859 SWAP2 PUSH2 0x1D3C JUMP JUMPDEST AND ISZERO PUSH2 0x28EF JUMPI POP JUMP JUMPDEST PUSH2 0x859 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE JUMP JUMPDEST POP DUP2 DUP4 AND ISZERO ISZERO PUSH2 0x28AD JUMP JUMPDEST PUSH2 0x291E CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x299F JUMPI JUMPDEST PUSH2 0x292E SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2951 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x296B DUP3 PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2975 CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST SWAP1 PUSH32 0xEDBF1209B3BAA7C1B5C43052CE5C511E243B3241D9F67733141D14F1DA88CBA1 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP PUSH2 0x292E PUSH2 0x29AD CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x2925 JUMP JUMPDEST PUSH2 0x29CC SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD SWAP3 DUP3 DUP5 DUP1 SWAP5 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x6F6 JUMP JUMPDEST DUP2 ADD SUB SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x29DE CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2A5F JUMPI JUMPDEST PUSH2 0x29EE SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2A11 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x2A2B DUP3 PUSH1 0x3 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2A35 CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST SWAP1 PUSH32 0x91CE7FCD4462481791C3FE849F7049373C5B43EF44AED48E7F1ECCE781586E15 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP PUSH2 0x29EE PUSH2 0x2A6D CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x29E5 JUMP JUMPDEST PUSH2 0x2A7E CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2AFC JUMPI JUMPDEST PUSH2 0x2A8E SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2AB1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x2AC8 DUP3 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2AD2 CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST SWAP1 PUSH32 0xFBBFCA16A2770C7CA6E7063AB1A7EEA5FE441FFEF818325DB51752066A6B128A PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP PUSH2 0x2A8E PUSH2 0x2B0A CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A85 JUMP JUMPDEST PUSH2 0x2B1B CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B9C JUMPI JUMPDEST PUSH2 0x2B2B SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2B4E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x2B68 DUP3 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2B72 CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST SWAP1 PUSH32 0xD771EAA1C1382B0A9867125FCD921FDEDDD211538B5381353A877ABFBE3B50A4 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP PUSH2 0x2B2B PUSH2 0x2BAA CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B22 JUMP JUMPDEST PUSH1 0x20 PUSH2 0x2BCA SWAP2 DUP2 PUSH1 0x40 MLOAD SWAP4 DUP3 DUP6 DUP1 SWAP5 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x6F6 JUMP JUMPDEST DUP2 ADD PUSH1 0xC DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0xA0 SWAP2 DUP4 MLOAD DUP2 SSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE ADD SWAP2 PUSH2 0x2C12 PUSH1 0x60 DUP3 ADD MLOAD ISZERO ISZERO DUP5 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR DUP4 SSTORE ADD MLOAD DUP2 SLOAD PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB AND OR SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x2C74 PUSH2 0x859 SWAP3 DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT ISZERO PUSH2 0x2C7D JUMPI JUMPDEST PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x1DC3 JUMP JUMPDEST PUSH2 0x23FB JUMPI PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x2C85 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x2C69 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2CAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2CC0 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD PUSH1 0x10 SHR AND PUSH2 0x2D74 JUMPI PUSH2 0x2D21 PUSH1 0x6 PUSH2 0x2CE3 DUP4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ADD SLOAD PUSH2 0x2CED PUSH2 0x85B JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE CALLER PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x2D1C DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0x2BD7 JUMP JUMPDEST PUSH2 0x2D41 DUP3 PUSH1 0x6 PUSH2 0x2D3B DUP5 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ADD PUSH2 0x2C51 JUMP JUMPDEST PUSH2 0x2D4B CALLER SWAP3 PUSH2 0x29B4 JUMP JUMPDEST PUSH32 0x8140554C907B4BA66A04EA1F43B882CBA992D3DB4CD5C49298A56402D7B36CA2 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B4552433732313A20415020616C7265616479206578697374730000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP2 POP REVERT JUMPDEST ISZERO PUSH2 0x2DC3 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B4552433732313A20696E76616C6964204150000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x2E2D DUP2 PUSH1 0x3 PUSH2 0x2E20 DUP6 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD PUSH1 0x10 SHR AND ISZERO ISZERO PUSH2 0x2DBC JUMP JUMPDEST PUSH1 0x3 PUSH2 0x2E38 DUP4 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD PUSH1 0x10 SHR AND CALLER EQ ISZERO PUSH2 0x2F12 JUMPI PUSH2 0x2EE6 PUSH2 0x2E51 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD SWAP2 PUSH2 0x2EBD PUSH2 0x2E6A DUP5 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x1 PUSH2 0x2E77 DUP6 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD SWAP2 ADD SWAP1 PUSH1 0x1 PUSH2 0x2EB6 PUSH2 0x2E9D PUSH2 0x2E97 PUSH2 0x2E91 DUP7 SLOAD PUSH2 0x1E9C JUMP JUMPDEST DUP7 PUSH2 0x1DC3 JUMP JUMPDEST POP PUSH2 0xF2D JUMP JUMPDEST PUSH2 0x2EB1 DUP2 PUSH2 0x2EAB DUP7 DUP9 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 PUSH2 0x23ED JUMP JUMPDEST PUSH2 0x2BB1 JUMP JUMPDEST ADD SSTORE PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x2EE1 PUSH2 0x2EC9 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x29B4 JUMP JUMPDEST SWAP1 CALLER SWAP2 PUSH32 0xEF2F6BED86B96D79B41799F5285F73B31274BB303EBE5D55A3CB48C567AB2DB0 PUSH1 0x0 PUSH1 0x40 MLOAD LOG4 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B4552433732313A206D757374206265204150206F776E6572000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 SLOAD DUP1 ISZERO PUSH2 0x2FD2 JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x2F71 DUP3 DUP3 PUSH2 0x1DC3 JUMP JUMPDEST PUSH2 0x2FC5 JUMPI JUMPDEST PUSH2 0x2F80 DUP2 SLOAD PUSH2 0xDA7 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x2F8B JUMPI POP POP SSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F PUSH1 0x0 SWAP4 GT PUSH1 0x1 EQ PUSH2 0x2F9E JUMPI POP SSTORE SSTORE JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 DUP4 KECCAK256 PUSH2 0x2FBA SWAP2 PUSH1 0x1F ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2215 JUMP JUMPDEST DUP2 PUSH1 0x20 DUP2 KECCAK256 SWAP2 SSTORE SSTORE SSTORE JUMP JUMPDEST PUSH2 0x2FCD PUSH2 0x21FE JUMP JUMPDEST PUSH2 0x2F76 JUMP JUMPDEST PUSH2 0x2FDA PUSH2 0x1ED5 JUMP JUMPDEST PUSH2 0x2F62 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH2 0x2FF2 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x3 ADD SLOAD PUSH1 0x10 SHR AND ISZERO ISZERO PUSH2 0x3005 SWAP1 PUSH2 0x2DBC JUMP JUMPDEST PUSH2 0x300E SWAP1 PUSH2 0x2BB1 JUMP JUMPDEST SWAP1 DUP2 SLOAD PUSH2 0x301A SWAP1 PUSH2 0x39DA JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP4 ADD SLOAD PUSH2 0x3029 SWAP1 PUSH2 0x39DA JUMP JUMPDEST SWAP3 PUSH1 0x3 ADD SLOAD DUP1 PUSH1 0x8 SHR PUSH1 0xFF AND PUSH2 0x303E SWAP1 PUSH2 0x45D4 JUMP JUMPDEST SWAP2 PUSH2 0x304B PUSH1 0xFF DUP4 AND PUSH2 0x45D4 JUMP JUMPDEST SWAP2 PUSH1 0x10 SHR AND PUSH2 0x3059 SWAP1 PUSH2 0x3B88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x7B PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP5 DUP6 SWAP5 SWAP2 SWAP4 SWAP2 PUSH1 0x21 DUP7 ADD PUSH10 0x113A37B5B2B724B2111D PUSH1 0xB1 SHL DUP2 MSTORE PUSH1 0xA ADD PUSH2 0x308C SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH8 0x1139B1B7B932911D PUSH1 0xC1 SHL DUP2 MSTORE PUSH1 0x8 ADD PUSH2 0x30B0 SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH15 0x113730B6B2AB32B934B334B2B2111D PUSH1 0x89 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH2 0x30DB SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH18 0x1131B7B73A32B73A2B32B934B334B2B2111D PUSH1 0x71 SHL DUP2 MSTORE PUSH1 0x12 ADD PUSH2 0x3109 SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH9 0x1137BBB732B9111D11 PUSH1 0xB9 SHL DUP2 MSTORE PUSH1 0x9 ADD PUSH2 0x312E SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH1 0x7D PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SUB PUSH1 0x1F NOT DUP2 ADD DUP3 MSTORE PUSH2 0x6E5 SWAP1 DUP3 PUSH2 0x82B JUMP JUMPDEST PUSH1 0xFF SWAP1 PUSH1 0x3 SWAP1 PUSH2 0x3173 SWAP1 PUSH2 0x2EB1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD PUSH1 0x8 SHR AND SWAP1 JUMP JUMPDEST PUSH2 0x3192 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x319D DUP3 PUSH2 0x2BB1 JUMP JUMPDEST ADD PUSH2 0x31A8 DUP2 SLOAD PUSH2 0x31F8 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x31B3 DUP2 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD PUSH2 0x31CA PUSH1 0x2 PUSH2 0x31C2 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD SWAP3 PUSH2 0x29B4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH32 0x3EA1C0FCF71B86FCA8F96CCAC3CF26FBA8983D3BBBE7BD720F1865D67FBAEE43 PUSH1 0x20 CALLER SWAP5 LOG4 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1EC9 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x321E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x3229 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST ADD SLOAD ISZERO PUSH2 0x3290 JUMPI PUSH1 0x2 PUSH2 0x323B DUP3 PUSH2 0x2BB1 JUMP JUMPDEST ADD PUSH2 0x3246 DUP2 SLOAD PUSH2 0x32D6 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3251 DUP2 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD PUSH2 0x3260 PUSH1 0x2 PUSH2 0x31C2 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE CALLER SWAP3 PUSH32 0x3EA1C0FCF71B86FCA8F96CCAC3CF26FBA8983D3BBBE7BD720F1865D67FBAEE43 SWAP1 PUSH1 0x20 SWAP1 LOG4 JUMP JUMPDEST POP POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C65656B4552433732313A2073636F72652063616E74206265206C6F776572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 ISZERO PUSH2 0x1EAC JUMPI PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x32F9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0x331E PUSH2 0x3305 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD PUSH2 0x3310 CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x3383 JUMPI JUMPDEST POP PUSH2 0x1853 JUMP JUMPDEST PUSH2 0x333F DUP3 PUSH1 0x3 PUSH2 0x332D DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3352 PUSH2 0x334B DUP3 PUSH2 0x2BB1 JUMP JUMPDEST SLOAD SWAP2 PUSH2 0x29B4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xE2E598F7FF2DFD4BC3BD989635401B4C56846B7893CB7EACE51D099F21E69BFF PUSH1 0x20 CALLER SWAP5 ISZERO ISZERO SWAP4 LOG4 JUMP JUMPDEST PUSH2 0x338F SWAP2 POP CALLER SWAP1 PUSH2 0x1B09 JUMP JUMPDEST CODESIZE PUSH2 0x3318 JUMP JUMPDEST PUSH2 0x33AB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x3 PUSH2 0x2E20 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0x33B7 PUSH2 0x3305 DUP3 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0x33DF DUP3 PUSH1 0x3 PUSH2 0x33C6 DUP5 PUSH2 0x2BB1 JUMP JUMPDEST ADD SWAP1 PUSH2 0xFF00 DUP3 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x8 SHL AND SWAP1 PUSH2 0xFF00 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x33EB PUSH2 0x334B DUP3 PUSH2 0x2BB1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17BD9B465AA0CDC6B308874903E9C38B13F561ECB1F2EDAA8BF3969FE603D11C PUSH1 0x20 CALLER SWAP5 ISZERO ISZERO SWAP4 LOG4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x343F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0xB DUP2 MSTORE PUSH1 0x6 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x34AF JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH2 0x3475 DUP2 DUP5 PUSH1 0x5 SHL ADD DUP6 PUSH2 0x82B JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE DUP1 DUP3 KECCAK256 DUP2 DUP6 ADD JUMPDEST DUP5 DUP5 LT PUSH2 0x3493 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP4 DUP2 SWAP3 PUSH2 0x34A1 DUP6 PUSH2 0xF2D JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP4 ADD SWAP3 SWAP1 PUSH2 0x3484 JUMP JUMPDEST PUSH2 0x34B7 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x3462 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x34C9 CALLER DUP3 PUSH2 0x1B48 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3593 JUMPI JUMPDEST PUSH2 0x34D9 SWAP1 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x34FC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO PUSH2 0xD37 JUMP JUMPDEST PUSH32 0x73B929BF4DB6BE678CDBC6D41A5FE0A2CBB84CA95572062C4A978D8BD80A41B1 PUSH1 0x40 SWAP3 DUP4 MLOAD SWAP1 DUP5 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3586 JUMPI JUMPDEST DUP6 MSTORE DUP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3577 PUSH1 0x0 SWAP2 DUP5 DUP4 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x5 DUP7 DUP5 KECCAK256 ADD PUSH1 0x4 DUP8 DUP6 KECCAK256 ADD PUSH2 0x3567 DUP2 SLOAD PUSH2 0x31F8 JUMP JUMPDEST DUP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x20 MSTORE DUP6 DUP4 KECCAK256 PUSH2 0x234D JUMP JUMPDEST PUSH2 0x3581 CALLER SWAP6 PUSH2 0x29B4 JUMP JUMPDEST SWAP4 MLOAD LOG4 JUMP JUMPDEST PUSH2 0x358E PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x3539 JUMP JUMPDEST POP PUSH2 0x34D9 PUSH2 0x35A1 CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D0 JUMP JUMPDEST PUSH2 0x35B2 CALLER DUP3 PUSH2 0x1B09 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3706 JUMPI JUMPDEST PUSH2 0x35C2 SWAP1 PUSH2 0x1853 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x35D5 DUP4 PUSH2 0xD84 JUMP JUMPDEST AND ISZERO DUP1 ISZERO DUP1 PUSH2 0x36FE JUMPI JUMPDEST ISZERO PUSH2 0x36D1 JUMPI POP PUSH2 0x35FF DUP3 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3608 DUP3 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x3611 DUP3 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP2 AND DUP1 DUP3 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x0 NOT DUP2 SLOAD ADD SWAP1 SSTORE DUP3 DUP3 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x3669 PUSH1 0x40 DUP4 KECCAK256 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP2 SLOAD AND SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP3 PUSH1 0x40 MLOAD LOG4 PUSH2 0x36AE PUSH1 0x2 PUSH2 0x36A8 DUP4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ADD PUSH2 0x371B JUMP JUMPDEST PUSH2 0x36B5 JUMPI POP JUMP JUMPDEST PUSH2 0x36CC PUSH2 0x859 SWAP2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3725 JUMP JUMPDEST ISZERO PUSH2 0x36E4 JUMPI PUSH2 0x36DF DUP3 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x3608 JUMP JUMPDEST PUSH2 0x36DF DUP3 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 SSTORE JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x35DF JUMP JUMPDEST POP PUSH2 0x35C2 PUSH2 0x3714 CALLER DUP4 PUSH2 0x1B09 JUMP JUMPDEST SWAP1 POP PUSH2 0x35B9 JUMP JUMPDEST PUSH2 0x6E5 SWAP1 SLOAD PUSH2 0xDA7 JUMP JUMPDEST PUSH2 0x372E DUP2 PUSH2 0x23A1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x1 SWAP2 PUSH2 0x373E DUP4 DUP3 ADD PUSH2 0x23A1 JUMP JUMPDEST PUSH2 0x374A PUSH1 0x2 DUP3 ADD PUSH2 0x23A1 JUMP JUMPDEST PUSH2 0x3756 PUSH1 0x3 DUP3 ADD PUSH2 0x23A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 ADD SSTORE ADD DUP1 SLOAD SWAP1 PUSH1 0x0 DUP2 SSTORE DUP2 PUSH2 0x376F JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x3788 JUMPI POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x3793 DUP5 SWAP3 PUSH2 0x23A1 JUMP JUMPDEST ADD PUSH2 0x377C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3809 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392B2F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3811 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x37B4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x3843 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x40 DUP3 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST PUSH2 0x384B PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x3831 JUMP JUMPDEST SWAP1 PUSH2 0x385A DUP3 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x3867 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x82B JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x3878 PUSH1 0x1F NOT SWAP2 PUSH2 0x87A JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x3954 JUMPI PUSH2 0x3891 PUSH2 0x3799 JUMP JUMPDEST PUSH2 0x38B5 PUSH2 0x38B0 PUSH2 0x38AB PUSH2 0x38A4 DUP6 MLOAD PUSH2 0x1EB9 JUMP JUMPDEST PUSH1 0x3 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x237C JUMP JUMPDEST PUSH2 0x3850 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD SWAP2 DUP2 DUP3 MLOAD DUP4 ADD SWAP2 JUMPDEST DUP3 DUP3 LT PUSH2 0x3902 JUMPI POP POP POP PUSH1 0x3 SWAP1 MLOAD MOD DUP1 PUSH1 0x1 EQ PUSH2 0x38EF JUMPI PUSH1 0x2 EQ PUSH2 0x38E4 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x3D SWAP1 PUSH1 0x0 NOT ADD MSTORE8 SWAP1 JUMP JUMPDEST POP PUSH1 0x3D SWAP1 DUP2 PUSH1 0x0 NOT DUP3 ADD MSTORE8 PUSH1 0x1 NOT ADD MSTORE8 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD SWAP4 SWAP2 SWAP1 PUSH2 0x38C2 JUMP JUMPDEST POP PUSH2 0x6E5 PUSH2 0x127A JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 DUP2 SLOAD PUSH2 0x396C DUP2 PUSH2 0xDA7 JUMP JUMPDEST SWAP3 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0x39C5 JUMPI POP PUSH1 0x1 EQ PUSH2 0x3989 JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0x39B4 JUMPI POP POP POP POP ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3983 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP5 ADD MSTORE SWAP2 DUP4 ADD SWAP2 DUP2 ADD PUSH2 0x399E JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 MSTORE POP POP POP ADD SWAP2 POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3983 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH2 0x3B0F JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH2 0x3B00 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0x3AF1 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0x3AE2 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0x3AD3 JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0x3AC3 JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0x3AB9 JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 PUSH2 0x3A71 DUP3 DUP8 ADD PUSH2 0x3850 JUMP JUMPDEST SWAP6 DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0x3A83 JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0x3AB4 JUMPI SWAP2 SWAP1 DUP3 PUSH2 0x3A77 JUMP JUMPDEST PUSH2 0x3A7C JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0x3A60 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0x3A55 JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x3A4A JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x3A2E JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x3A1C JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0x3A03 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x3B2F JUMPI ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x3B37 PUSH2 0x1DAC JUMP JUMPDEST ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3B43 JUMPI JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x3B90 PUSH2 0x3816 JUMP JUMPDEST SWAP1 DUP2 MLOAD ISZERO PUSH2 0x3C2A JUMPI JUMPDEST PUSH1 0x30 PUSH1 0x20 DUP4 ADD MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x3C1D JUMPI JUMPDEST SWAP1 PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP2 JUMPDEST DUP1 DUP4 GT PUSH2 0x3BCC JUMPI POP PUSH2 0x6E5 SWAP2 POP ISZERO PUSH2 0x3B3C JUMP JUMPDEST SWAP1 DUP1 PUSH1 0xF PUSH2 0x3C09 SWAP3 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x3C10 JUMPI JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x3BFF DUP6 DUP8 PUSH2 0x3B1D JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 PUSH2 0x32D6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3BB9 JUMP JUMPDEST PUSH2 0x3C18 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x3BDF JUMP JUMPDEST PUSH2 0x3C25 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x3BAD JUMP JUMPDEST PUSH2 0x3C32 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x3B99 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x3C73766720786D6C6E733D22687474703A2F2F7777772E77332E6F72672F3230 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x30302F7376672220786D6C6E733A786C696E6B3D22687474703A2F2F7777772E SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x77332E6F72672F313939392F786C696E6B222076657273696F6E3D22312E3122 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x2077696474683D2236343022206865696768743D22343830222076696577426F PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x783D2230203020363430203438302220786D6C3A73706163653D227072657365 PUSH1 0xA0 DUP3 ADD MSTORE PUSH5 0x393B32911F PUSH1 0xD9 SHL PUSH1 0xC0 DUP3 ADD MSTORE PUSH6 0x1E3232B3399F PUSH1 0xD1 SHL PUSH1 0xC5 DUP3 ADD MSTORE SWAP2 DUP3 SWAP2 PUSH1 0xCB DUP4 ADD PUSH7 0x1E17B232B3399F PUSH1 0xC9 SHL DUP2 MSTORE PUSH1 0x7 ADD PUSH32 0x3C67207472616E73666F726D3D226D617472697828332E34322030203020332E DUP2 MSTORE PUSH21 0x1A1910199818171C9C10191A99171C9C149110101F PUSH1 0x59 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x35 ADD PUSH32 0x3C706F6C79676F6E207374796C653D227374726F6B653A2072676228302C302C DUP2 MSTORE PUSH32 0x30293B207374726F6B652D77696474683A20383B207374726F6B652D64617368 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x61727261793A206E6F6E653B207374726F6B652D6C696E656361703A20627574 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x743B207374726F6B652D646173686F66667365743A20303B207374726F6B652D PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x6C696E656A6F696E3A206D697465723B207374726F6B652D6D697465726C696D PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x69743A20343B2066696C6C3A20726762283135322C3135322C313833293B2066 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x696C6C2D72756C653A206E6F6E7A65726F3B206F7061636974793A20313B2220 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x766563746F722D6566666563743D226E6F6E2D7363616C696E672D7374726F6B PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x65222020706F696E74733D222D35302C2D3530202D35302C35302035302C3530 PUSH2 0x100 DUP3 ADD MSTORE PUSH12 0x101A9816169A98101110179F PUSH1 0xA1 SHL PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x12C ADD PUSH4 0x1E17B39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH32 0x3C67207472616E73666F726D3D226D6174726978283120302030203120333033 DUP2 MSTORE PUSH32 0x2E35203131352E36372922207374796C653D222220203E000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x37 ADD PUSH32 0x3C7465787420786D6C3A73706163653D2270726573657276652220666F6E742D DUP2 MSTORE PUSH32 0x66616D696C793D224F70656E2053616E732220666F6E742D73697A653D223234 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2220666F6E742D7374796C653D226E6F726D616C2220666F6E742D7765696768 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x743D226E6F726D616C22207374796C653D227374726F6B653A206E6F6E653B20 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x7374726F6B652D77696474683A20313B207374726F6B652D6461736861727261 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x793A206E6F6E653B207374726F6B652D6C696E656361703A20627574743B2073 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x74726F6B652D646173686F66667365743A20303B207374726F6B652D6C696E65 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x6A6F696E3A206D697465723B207374726F6B652D6D697465726C696D69743A20 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x343B2066696C6C3A2072676228302C302C30293B2066696C6C2D72756C653A20 PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x6E6F6E7A65726F3B206F7061636974793A20313B2077686974652D7370616365 PUSH2 0x120 DUP3 ADD MSTORE PUSH32 0x3A207072653B22203E3C747370616E20783D222D34352E372220793D22352E36 PUSH2 0x140 DUP3 ADD MSTORE PUSH32 0x3522207374796C653D227374726F6B652D77696474683A20313B20666F6E742D PUSH2 0x160 DUP3 ADD MSTORE PUSH32 0x66616D696C793A20224F70656E2053616E73222C2073616E732D73657269663B PUSH2 0x180 DUP3 ADD MSTORE PUSH32 0x20666F6E742D73697A653A20313870783B20666F6E742D7374796C653A206E6F PUSH2 0x1A0 DUP3 ADD MSTORE PUSH32 0x726D616C3B20666F6E742D7765696768743A206E6F726D616C3B2066696C6C3A PUSH2 0x1C0 DUP3 ADD MSTORE PUSH32 0x2072676228302C302C30293B20223E466C65656B204E4641733C2F747370616E PUSH2 0x1E0 DUP3 ADD MSTORE PUSH8 0x1F1E17BA32BC3A1F PUSH1 0xC1 SHL PUSH2 0x200 DUP3 ADD MSTORE PUSH2 0x208 ADD PUSH4 0x1E17B39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH32 0x3C67207472616E73666F726D3D226D6174726978283120302030203120333032 DUP2 MSTORE PUSH21 0x10191B18971A1B94911039BA3CB6329E911110101F PUSH1 0x59 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x35 ADD PUSH32 0x3C7465787420786D6C3A73706163653D2270726573657276652220666F6E742D DUP2 MSTORE PUSH32 0x66616D696C793D224F70656E2053616E732220666F6E742D73697A653D223238 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2220666F6E742D7374796C653D226E6F726D616C2220666F6E742D7765696768 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x743D226E6F726D616C22207374796C653D227374726F6B653A206E6F6E653B20 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x7374726F6B652D77696474683A20313B207374726F6B652D6461736861727261 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0x793A206E6F6E653B207374726F6B652D6C696E656361703A20627574743B2073 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0x74726F6B652D646173686F66667365743A20303B207374726F6B652D6C696E65 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x6A6F696E3A206D697465723B207374726F6B652D6D697465726C696D69743A20 PUSH1 0xE0 DUP3 ADD MSTORE PUSH32 0x343B2066696C6C3A2072676228302C302C30293B2066696C6C2D72756C653A20 PUSH2 0x100 DUP3 ADD MSTORE PUSH32 0x6E6F6E7A65726F3B206F7061636974793A20313B2077686974652D7370616365 PUSH2 0x120 DUP3 ADD MSTORE PUSH32 0x3A207072653B22203E3C747370616E20783D222D34342E32362220793D222D36 PUSH2 0x140 DUP3 ADD MSTORE PUSH32 0x2E313422207374796C653D227374726F6B652D77696474683A20313B20666F6E PUSH2 0x160 DUP3 ADD MSTORE PUSH32 0x742D66616D696C793A20224F70656E2053616E73222C2073616E732D73657269 PUSH2 0x180 DUP3 ADD MSTORE PUSH32 0x663B20666F6E742D73697A653A20313870783B20666F6E742D7374796C653A20 PUSH2 0x1A0 DUP3 ADD MSTORE PUSH32 0x6E6F726D616C3B20666F6E742D7765696768743A206E6F726D616C3B2066696C PUSH2 0x1C0 DUP3 ADD MSTORE PUSH17 0x361D103933B1141816181618149D90111F PUSH1 0x79 SHL PUSH2 0x1E0 DUP3 ADD MSTORE PUSH2 0x1F1 ADD PUSH2 0x446C SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH32 0x3C2F747370616E3E3C747370616E20783D222D33372E31342220793D2231372E DUP2 MSTORE PUSH32 0x343522207374796C653D227374726F6B652D77696474683A20313B20666F6E74 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2D66616D696C793A20224F70656E2053616E73222C2073616E732D7365726966 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x3B20666F6E742D73697A653A20313870783B20666F6E742D7374796C653A206E PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x6F726D616C3B20666F6E742D7765696768743A206E6F726D616C3B2066696C6C PUSH1 0x80 DUP3 ADD MSTORE PUSH16 0x1D103933B1141816181618149D90111F PUSH1 0x81 SHL PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xB0 ADD PUSH2 0x454C SWAP2 PUSH2 0x24E9 JUMP JUMPDEST PUSH15 0x1E17BA39B830B71F1E17BA32BC3A1F PUSH1 0x89 SHL DUP2 MSTORE PUSH1 0xF ADD PUSH4 0x1E17B39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH6 0x1E17B9BB339F PUSH1 0xD1 SHL DUP2 MSTORE PUSH1 0x6 ADD SUB SWAP1 PUSH1 0x1F NOT SWAP2 DUP3 DUP2 ADD DUP3 MSTORE PUSH2 0x4595 SWAP1 DUP3 PUSH2 0x82B JUMP JUMPDEST PUSH2 0x459E SWAP1 PUSH2 0x3882 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x3D DUP3 ADD PUSH2 0x283C JUMP JUMPDEST ISZERO PUSH2 0x45F9 JUMPI PUSH1 0x40 MLOAD PUSH2 0x45E5 DUP2 PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x4 DUP2 MSTORE PUSH4 0x74727565 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4605 DUP2 PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x5 DUP2 MSTORE PUSH5 0x66616C7365 PUSH1 0xD8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0xC2C48EB3CCEDE8F14A SSTORE 0x4D 0xA8 0xBF 0xAC SDIV SWAP9 0xAB 0xE0 0xDC RETURN 0xE1 0xD8 AND 0xE4 0xB1 0xCE 0xB4 0xE2 SSTORE 0xC8 DUP7 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "290:15067:13:-:0;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6692:330;290:15067;;;:::i;:::-;6692:330;;:::i;:::-;290:15067;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;4508:35:0;;:25;290:15067:13;;;:::i;:::-;-1:-1:-1;;;;;290:15067:13;;;;;;;4508:18:0;290:15067:13;;;;;4508:25:0;;290:15067:13;4508:25:0;290:15067:13;;;;;;;;;;;;;;;;4508:35:0;290:15067:13;;;;;4508:35:0;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;11524:4;290:15067;;;:::i;:::-;11524:4;:::i;290:15067::-;;;;;7872:288;290:15067;;;:::i;:::-;7872:288;;:::i;290:15067::-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;12881:358;290:15067;;;:::i;:::-;12881:358;;:::i;290:15067::-;;;;;4022:7;290:15067;;;:::i;:::-;4022:7;;;;;;;;:::i;:::-;290:15067;;;;;;;;;;;;;;;;;;12269:330;290:15067;;;:::i;:::-;12269:330;:::i;290:15067::-;;;;;2498:202:12;290:15067:13;;;:::i;:::-;2498:202:12;;:::i;290:15067:13:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;11796:244;290:15067;;;:::i;:::-;11796:244;:::i;290:15067::-;;;;;2872:154:12;290:15067:13;;;:::i;:::-;2872:154:12;;:::i;290:15067:13:-;;;;;7305:282;290:15067;;;:::i;:::-;7305:282;;:::i;290:15067::-;;;;;10043:789;290:15067;;;:::i;:::-;10043:789;:::i;290:15067::-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;13515:349;290:15067;;;:::i;:::-;13515:349;;:::i;290:15067::-;;;;;15126:229;290:15067;;;:::i;:::-;15126:229;:::i;290:15067::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;14488:382;290:15067;;;:::i;:::-;14488:382;;:::i;290:15067::-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;4697:50:12;:42;:36;290:15067:13;;;:::i;:::-;4643:27:12;;4697:20;4643:27;;290:15067:13;;4643:18:12;290:15067:13;;;;;;;4643:27:12;290:15067:13;4697:20:12;290:15067:13;;4697:11:12;290:15067:13;;;;;;;4697:20:12;290:15067:13;;;;;;;;;;4697:36:12;:42;:::i;:::-;:50;290:15067:13;:::i;:::-;;;;;2185:152:12;290:15067:13;;;:::i;:::-;2185:152:12;;:::i;290:15067:13:-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;8459:330;290:15067;;;:::i;:::-;8459:330;;:::i;290:15067::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;5357:36;290:15067;;;:::i;:::-;5357:36;:::i;290:15067::-;;;;;3188:204:12;290:15067:13;;;:::i;:::-;3188:204:12;;:::i;290:15067:13:-;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;:::o;:::-;;;;;-1:-1:-1;290:15067:13;;;;;;-1:-1:-1;290:15067:13;;;-1:-1:-1;;;;;;290:15067:13;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;290:15067:13;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;:::o;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;290:15067:13;;;;;;;-1:-1:-1;;290:15067:13;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;:::o;:::-;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;290:15067:13;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;:::i;:::-;;-1:-1:-1;;290:15067:13;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;290:15067:13;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;-1:-1:-1;;290:15067:13;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;290:15067:13;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;290:15067:13;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1929:204:0;-1:-1:-1;;;;;290:15067:13;2028:19:0;;290:15067:13;;2045:1:0;290:15067:13;2110:9:0;290:15067:13;;;2045:1:0;290:15067:13;;1929:204:0;:::o;290:15067:13:-;-1:-1:-1;;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;:::o;:::-;-1:-1:-1;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;2190:219:0;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;-1:-1:-1;;;;;290:15067:13;2324:56:0;2332:19;;;2324:56;:::i;290:15067:13:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;290:15067:13;;;;;;;-1:-1:-1;290:15067:13;;-1:-1:-1;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2721:7:0;;290:15067:13;;;;;;;:::i;:::-;;;;;;;;;2721:7:0;;;;290:15067:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;290:15067:13;;;-1:-1:-1;;290:15067:13;;;;;;;-1:-1:-1;290:15067:13;;-1:-1:-1;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;290:15067:13;;;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3468:406:0;;3564:23;;;:::i;:::-;-1:-1:-1;;;;;290:15067:13;;;;;;3605:11:0;;290:15067:13;;719:10:6;3686:21:0;:62;;;;;3468:406;290:15067:13;;;;3859:7:0;;;:::i;290:15067:13:-;-1:-1:-1;;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;3686:62:0;-1:-1:-1;;;;;290:15067:13;;;;;4508:18:0;290:15067:13;;;;;;;-1:-1:-1;4508:35:0;;719:10:6;;4508:25:0;290:15067:13;4508:35:0;290:15067:13;;3686:62:0;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;3935:167:0;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;13539:53:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;:::i;:::-;-1:-1:-1;290:15067:13;;;4071:15:0;290:15067:13;;;;;;-1:-1:-1;;;;;290:15067:13;;3935:167:0:o;4169:153::-;-1:-1:-1;;;;;290:15067:13;;;4169:153:0;719:10:6;13216:17:0;;290:15067:13;;719:10:6;13273:35:0;:46;719:10:6;;-1:-1:-1;290:15067:13;13273:18:0;290:15067:13;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;13273:35:0;290:15067:13;;;;;;;;;;;;;;;13273:46:0;290:15067:13;;;;;;;13334:41:0;290:15067:13;719:10:6;13334:41:0;;4169:153::o;290:15067:13:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;4612:326:0;;4923:7;4612:326;;4793:99;4801:41;719:10:6;;4801:41:0;:::i;:::-;4793:99;:::i;:::-;4923:7;:::i;290:15067:13:-;;;;;;;:::i;:::-;810:1:5;290:15067:13;;:::o;5004:179:0:-;;;5137:39;5004:179;290:15067:13;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;5004:179:0;290:15067:13;;;;;5137:39:0;:::i;290:15067:13:-;;;:::i;:::-;;;5249:314:0;;6620:47;5249:314;;;5409:99;5417:41;719:10:6;;5417:41:0;:::i;5409:99::-;6594:7;;;;;:::i;:::-;6620:47;:::i;:::-;290:15067:13;;;5249:314:0:o;290:15067:13:-;-1:-1:-1;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;:::o;7540:261:0:-;-1:-1:-1;;;;;290:15067:13;7665:23:0;;;:::i;:::-;290:15067:13;;;;;7706:16:0;;;;:52;;;;;7540:261;7706:87;;;;;;7540:261;7698:96;;;7540:261;:::o;7706:87::-;7762:20;;;;;;:::i;:::-;290:15067:13;7762:31:0;7706:87;;;;;:52;-1:-1:-1;290:15067:13;;;4508:18:0;290:15067:13;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;-1:-1:-1;7706:52:0;;;;290:15067:13;;;;:::o;:::-;-1:-1:-1;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;11423:1233:0;11542:81;11423:1233;11550:23;;;:::i;:::-;-1:-1:-1;;;;;290:15067:13;;;;;;;;11550:31:0;;11542:81;:::i;:::-;290:15067:13;;11641:16:0;;;290:15067:13;;12461:15:0;11709:42;;;;12533:21;11709:42;;:::i;:::-;11843:81;11851:23;:31;:23;;;:::i;:::-;-1:-1:-1;;;;;290:15067:13;;;11851:31:0;;11843:81;:::i;:::-;290:15067:13;11993:24:0;;290:15067:13;;11993:15:0;290:15067:13;;;;;;;11993:24:0;290:15067:13;;-1:-1:-1;;;;;;290:15067:13;;;;;-1:-1:-1;;;;;290:15067:13;;;;;12461:9:0;290:15067:13;;;;;;;12461:15:0;290:15067:13;;-1:-1:-1;;290:15067:13;;;-1:-1:-1;;;;;290:15067:13;;;;;;12461:9:0;290:15067:13;;;;;;;;;;;12533:16:0;;290:15067:13;;12533:7:0;290:15067:13;;;;;;;12533:16:0;290:15067:13;;-1:-1:-1;;;;;;290:15067:13;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;12533:21:0;12570:27;290:15067:13;;;12570:27:0;11423:1233::o;290:15067:13:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;12768:171:0;-1:-1:-1;290:15067:13;;;12842:15:0;290:15067:13;;;;;;;-1:-1:-1;;;;;;290:15067:13;-1:-1:-1;;;;;290:15067:13;;;;;-1:-1:-1;;;;;290:15067:13;12895:23:0;;;:::i;:::-;290:15067:13;;;;12886:46:0;-1:-1:-1;290:15067:13;;12886:46:0;12768:171::o;290:15067:13:-;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;290:15067:13;;;;:::o;:::-;;;:::o;14151:831:0:-;;;;;1465:19:4;;:23;14320:15:0;;14355:71;290:15067:13;14355:71:0;290:15067:13;;;;;;;;;;;;;14355:71:0;;;;719:10:6;14355:71:0;;;;:::i;:::-;;;-1:-1:-1;;;;;290:15067:13;14355:71:0;;290:15067:13;;14355:71:0;;;14316:660;-1:-1:-1;14351:573:0;;14543:381;;;;;:::i;:::-;290:15067:13;;;14593:18:0;;;-1:-1:-1;;290:15067:13;;-1:-1:-1;;;14635:60:0;;290:15067:13;14635:60:0;14355:71;14635:60;;;:::i;14589:321::-;14355:71;14797:95;;14351:573;-1:-1:-1;;;;;;290:15067:13;14476:51:0;;14469:58::o;14355:71::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;14316:660;14954:11;;;;14961:4;14954:11;:::o;290:15067:13:-;;;;:::o;:::-;-1:-1:-1;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;1404:244:12;1478:35;1502:10;1478:35;:::i;:::-;:81;;;;1404:244;1457:173;;;:::i;:::-;4933:23;290:15067:13;2272:11:12;290:15067:13;4987:16:12;290:15067:13;;4976:59:12;290:15067:13;4987:38:12;290:15067:13;;2272:11:12;290:15067:13;4987:38:12;:::i;:::-;4976:59;:::i;:::-;290:15067:13;;;;;;;;1502:10:12;290:15067:13;;-1:-1:-1;;;;;290:15067:13;;;;5050:48:12;;290:15067:13;;5050:48:12;1404:244::o;290:15067:13:-;;;;;;;2272:11:12;290:15067:13;;;;;2272:11:12;290:15067:13;1478:81:12;1502:10;1457:173;1517:42;1502:10;1517:42;:::i;:::-;1478:81;;;;290:15067:13;;;;:::o;:::-;-1:-1:-1;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;1755:259:12;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;-1:-1:-1;290:15067:13;;;5645:18:12;290:15067:13;;;;;;5703:11:12;290:15067:13;;;;;;;;;;5692:63:12;290:15067:13;5703:42:12;290:15067:13;;;;5703:42:12;:::i;5692:63::-;290:15067:13;;;;;;-1:-1:-1;290:15067:13;;1869:10:12;290:15067:13;;-1:-1:-1;;;;;290:15067:13;;;;5770:52:12;;290:15067:13;;5770:52:12;1755:259::o;290:15067:13:-;-1:-1:-1;;;290:15067:13;;;;;;;-1:-1:-1;290:15067:13;-1:-1:-1;;;290:15067:13;1841:89:12;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;1404:244;1478:35;1502:10;1478:35;:::i;:::-;:81;;;;1404:244;1457:173;;;:::i;:::-;5286:23;290:15067:13;2960:11:12;290:15067:13;5341:16:12;290:15067:13;;5329:60:12;290:15067:13;5341:38:12;290:15067:13;;2960:11:12;290:15067:13;5341:38:12;:::i;:::-;5329:60;:::i;:::-;290:15067:13;;;;;;;;1502:10:12;290:15067:13;;-1:-1:-1;;;;;290:15067:13;;;;5404:48:12;;290:15067:13;;5404:48:12;1404:244::o;1478:81::-;1502:10;1457:173;1517:42;1502:10;1517:42;:::i;:::-;1478:81;;;;1755:259;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;3322:11;290:15067:13;;;6017:18:12;290:15067:13;;;;;;6076:11:12;290:15067:13;;;;;;;;;;6064:64:12;290:15067:13;6076:42:12;290:15067:13;;;;6076:42:12;:::i;6064:64::-;290:15067:13;;;;;;-1:-1:-1;290:15067:13;;1869:10:12;290:15067:13;;-1:-1:-1;;;;;290:15067:13;;;;6143:52:12;;290:15067:13;;6143:52:12;1755:259::o;1841:89::-;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;290:15067:13;;;;;;;;-1:-1:-1;290:15067:13;;;;-1:-1:-1;290:15067:13;;:::o;3487:236:12:-;3605:23;290:15067:13;2272:11:12;290:15067:13;;;3656:16:12;290:15067:13;;;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;3656:55:12;290:15067:13;3656:60:12;;3487:236;:::o;:::-;;3656:38;:55;3487:236;3605:23;290:15067:13;-1:-1:-1;290:15067:13;3656:16:12;290:15067:13;;;-1:-1:-1;290:15067:13;3656:38:12;:::i;3813:255::-;2631:11;290:15067:13;;;3943:18:12;290:15067:13;;;;;;;;;3997:11:12;290:15067:13;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;3997:59:12;290:15067:13;3813:255:12;-1:-1:-1;290:15067:13;;;3943:18:12;290:15067:13;;;;;;;;;3997:11:12;290:15067:13;;;;;;;;;;;;;6834:16;290:15067;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;3997:59:12;290:15067:13;3813:255:12;3997:59;3813:255;;3997:42;3813:255;-1:-1:-1;290:15067:13;3943:18:12;290:15067:13;;;-1:-1:-1;290:15067:13;;3997:11:12;290:15067:13;;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;;;-1:-1:-1;290:15067:13;3997:42:12;:::i;290:15067:13:-;;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;4167:223:12;4337:38;4167:223;4287:23;290:15067:13;-1:-1:-1;290:15067:13;;;4337:16:12;290:15067:13;;4337:46:12;290:15067:13;;;;-1:-1:-1;290:15067:13;4337:38:12;:::i;:::-;:46;290:15067:13;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;290:15067:13;;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;5530:299:12;290:15067:13;;;;;;5770:52:12;290:15067:13;5645:18:12;290:15067:13;;;;;;;5703:11:12;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;6359:26:12;6355:140;;5530:299;290:15067:13;;5811:10:12;290:15067:13;;5770:52:12;5530:299::o;6355:140::-;6401:12;;;290:15067:13;;;-1:-1:-1;;;290:15067:13;;;;;6355:140:12;6401:12;290:15067:13;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;6355:140:12;;;290:15067:13;;;:::i;:::-;;;5530:299:12;5751:1:13;290:15067;;;;5645:18:12;290:15067:13;;;;;;5703:11:12;290:15067:13;;;;;;;;;;;;;;;;;;5692:63:12;290:15067:13;;;;5692:63:12;:::i;:::-;290:15067:13;;5811:10:12;290:15067:13;;-1:-1:-1;;;;;290:15067:13;;;;5770:52:12;;290:15067:13;;5770:52:12;5530:299::o;290:15067:13:-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;;-1:-1:-1;290:15067:13;:::o;:::-;;;:::i;:::-;;;6280:221:12;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;6280:221:12;;;290:15067:13;6359:26:12;6355:140;;6280:221;;:::o;6355:140::-;6441:21;6401:12;;;;290:15067:13;;;;;-1:-1:-1;;;290:15067:13;;;;;6355:140:12;6401:12;290:15067:13;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6441:21:12;290:15067:13;;;;;;;;;;;;;;;;6441:21:12;290:15067:13;6280:221:12:o;290:15067:13:-;;;:::i;:::-;;;;;;;;;;;;;;;;;10386:27;290:15067;;;;;-1:-1:-1;;290:15067:13;;:::o;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;290:15067:13;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;6582:470:12;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;6658:388:12;;6582:470;;:::o;6658:388::-;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;7014:21:12;;6720;;290:15067:13;6744:1:12;290:15067:13;;;;6658:388:12;290:15067:13;;;;;;6779:12:12;6744:1;6779:12;;290:15067:13;6923:25:12;6838:23;290:15067:13;;;6744:1:12;290:15067:13;;;;6658:388:12;290:15067:13;6838:23:12;;:::i;:::-;290:15067:13;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;6876:33:12;290:15067:13;6876:19:12;290:15067:13;6876:19:12;;:::i;:33::-;-1:-1:-1;;;290:15067:13;;6658:388:12;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;6923:25:12;290:15067:13;;;;;;;6658:388:12;290:15067:13;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;1404:244:12;;;;;;;;1478:35;1502:10;1478:35;:::i;:::-;:81;;;;1404:244;1457:173;;;:::i;:::-;4059:7:13;290:15067;;-1:-1:-1;;;;;290:15067:13;;;9170:16:0;;290:15067:13;;;9242:16:0;290:15067:13;;9242:16:0;;290:15067:13;9242:16:0;9876:21;290:15067:13;9242:16:0;9233:58;9241:17;9242:16;;-1:-1:-1;290:15067:13;6930:7:0;290:15067:13;;;;;;;;-1:-1:-1;290:15067:13;;;7344:31:0;;7256:126;;9242:16;9241:17;;290:15067:13;9241:17:0;9233:58;:::i;:::-;5958:2:13;;;;:::i;:::-;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;9437:58:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;9233:58;:::i;9437:::-;-1:-1:-1;;;;;290:15067:13;;;;;;12461:9:0;290:15067:13;;;;;;;;;;;9876:16:0;;290:15067:13;;12533:7:0;290:15067:13;;;;;;;9876:21:0;290:15067:13;9913:33:0;290:15067:13;;;9913:33:0;4114:17:13;1050:1:7;4059:7:13;290:15067;;4059:7;290:15067;945:123:7;4114:17:13;290:15067;4162:14;;290:15067;;4162:5;290:15067;;;;;;;4162:14;290:15067;;;:::i;:::-;;4211:15;;290:15067;:::i;:::-;9876:7:0;4250:15:13;;290:15067;:::i;:::-;9837:9:0;4289:7:13;;290:15067;:::i;:::-;;4476:16;;;290:15067;;;:::i;:::-;;;;4522:32;;;290:15067;4506:13;:10;;;4000:11;290:15067;;;;;4000:11;290:15067;;;4506:13;290:15067;:::i;:::-;4564:16;4583:15;;:::i;:::-;4564:16;;290:15067;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1478:81:12;1502:10;1457:173;1517:42;1502:10;1517:42;:::i;:::-;1478:81;;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;290:15067:13;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;4000:11;290:15067;;;:::o;:::-;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;-1:-1:-1;290:15067:13;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;290:15067:13;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::o;:::-;-1:-1:-1;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;4876:298::-;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;;;:::i;:::-;5023:16:13;;;:::i;:::-;290:15067;-1:-1:-1;290:15067:13;5067:5;290:15067;;;-1:-1:-1;290:15067:13;;;;;;;:::i;:::-;;;;;;;;;1171:30:15;;-1:-1:-1;;;;;290:15067:13;1171:30:15;:::i;:::-;1331:7;;;290:15067:13;;;:::i;:::-;;;;:::i;:::-;1297:42:15;;;:::i;:::-;1515:10;;;;1526:16;;;290:15067:13;1515:28:15;;;;;;290:15067:13;;;;;;;;;;1515:28:15;1624;;;290:15067:13;;;;;;;;;;1624:28:15;290:15067:13;1624:42:15;1733:27;;;;:::i;:::-;290:15067:13;;-1:-1:-1;;;290:15067:13;1005:808:15;;290:15067:13;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;1119:15:15;;290:15067:13;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;1245:15:15;;290:15067:13;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;1005:808:15;290:15067:13;;;1005:808:15;;;;;;;;;;:::i;:::-;685:25;;;:::i;:::-;290:15067:13;;;5106:60;;;290:15067;5106:60;;290:15067;;;:::i;:::-;;;;:::i;:::-;5106:60;;;;;;;;;;:::i;1570:300:0:-;290:15067:13;;;;1722:25:0;;;1707:40;;:104;;;;;1570:300;1707:156;;;;1688:175;1570:300;:::o;1707:156::-;-1:-1:-1;;;937:40:9;;1570:300:0;-1:-1:-1;1570:300:0:o;1707:104::-;-1:-1:-1;;;1763:48:0;;;-1:-1:-1;1707:104:0;;5565:580:13;-1:-1:-1;;;;;290:15067:13;;;5735:18;;;;:38;;5565:580;5731:342;;;7568:7:12;;;;7624:8;7568:7;-1:-1:-1;290:15067:13;7244:18:12;290:15067:13;;;-1:-1:-1;290:15067:13;1050:1:7;290:15067:13;;;;;7179:111:12;7568:7;7624:8;:::i;5731:342:13:-;5862:211;;;5958:2;;;;:::i;5862:211::-;290:15067;5982:16;5978:95;;5862:211;290:15067::o;5978:95::-;6054:7;;-1:-1:-1;290:15067:13;7244:18:12;290:15067:13;;;-1:-1:-1;290:15067:13;1050:1:7;290:15067:13;;;;;7179:111:12;5735:38:13;290:15067;;;;5757:16;;5735:38;;1755:259:12;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;13539:53:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;:::i;:::-;290:15067:13;-1:-1:-1;290:15067:13;6895:5;290:15067;;;;6895:26;290:15067;-1:-1:-1;290:15067:13;6895:26;290:15067;:::i;:::-;6956:59;1869:10:12;6956:59:13;;:::i;:::-;290:15067;6956:59;-1:-1:-1;290:15067:13;;6956:59;1755:259:12:o;1841:89::-;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;290:15067:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::o;1755:259:12:-;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;13539:53:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;:::i;:::-;290:15067:13;-1:-1:-1;290:15067:13;7492:5;290:15067;;;;7492:18;290:15067;-1:-1:-1;290:15067:13;7492:18;290:15067;:::i;:::-;7537:43;1869:10:12;7537:43:13;;:::i;:::-;290:15067;7537:43;-1:-1:-1;290:15067:13;;7537:43;1755:259:12:o;1841:89::-;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;1755:259;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;13539:53:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;:::i;:::-;290:15067:13;-1:-1:-1;290:15067:13;8061:5;290:15067;;;;;-1:-1:-1;290:15067:13;;:::i;:::-;8108:45;1869:10:12;8108:45:13;;:::i;:::-;290:15067;8108:45;-1:-1:-1;290:15067:13;;8108:45;1755:259:12:o;1841:89::-;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;1755:259;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;13539:53:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;:::i;:::-;290:15067:13;-1:-1:-1;290:15067:13;8662:5;290:15067;;;;8601:16;290:15067;-1:-1:-1;290:15067:13;8662:26;290:15067;:::i;:::-;8723:59;1869:10:12;8723:59:13;;:::i;:::-;290:15067;8723:59;-1:-1:-1;290:15067:13;;8723:59;1755:259:12:o;1841:89::-;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;290:15067:13;;;;;;;;;;;;;;;;;;:::i;:::-;;;9429:13;290:15067;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;290:15067:13;;;;;;;;;;;;;;;-1:-1:-1;;;;;;290:15067:13;;;;;;-1:-1:-1;;;;;290:15067:13;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;9188:553;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;13539:53:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;:::i;:::-;-1:-1:-1;;;;;9429:27:13;290:15067;;;:::i;:::-;9429:27;290:15067;;;;;;;9561:27;:14;;290:15067;;4162:5;290:15067;;;;;;;9561:14;:27;290:15067;;;:::i;:::-;;;;9540:85;;;290:15067;;;;-1:-1:-1;9540:85:13;;;290:15067;;;9540:85;;;290:15067;;;9540:85;;;290:15067;9614:10;290:15067;9540:85;;290:15067;;;;:::i;:::-;;:::i;:::-;9635:40;:14;9561:27;9635:14;;290:15067;;4162:5;290:15067;;;;;;;9635:14;:27;:40;:::i;:::-;9691:43;9614:10;9691:43;;:::i;:::-;;-1:-1:-1;9540:85:13;290:15067;9691:43;9188:553::o;290:15067::-;-1:-1:-1;;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;-1:-1:-1;290:15067:13;;;;;:::o;:::-;-1:-1:-1;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;3285:146;-1:-1:-1;;;;;3336:77:13;290:15067;3344:27;290:15067;;;:::i;:::-;3344:27;290:15067;;;;3344:41;;3336:77;:::i;:::-;3344:27;290:15067;;;:::i;:::-;10149:27;290:15067;;;;10135:10;:41;290:15067;;;10779:46;290:15067;;;:::i;:::-;;10296:14;10702:21;10296:14;;290:15067;;4162:5;290:15067;;;;;;;10296:14;10508:17;290:15067;;;;:::i;:::-;10386:27;290:15067;10508:17;;290:15067;;;;10508:47;10526:28;290:15067;;10526:28;:::i;:::-;10508:47;;:::i;:::-;290:15067;;:::i;:::-;10565:41;:32;;;;;:::i;:::-;:41;;:::i;:::-;290:15067;:::i;:::-;10616:27;290:15067;10702:21;:::i;:::-;10736:28;290:15067;;;:::i;:::-;;3383:1;290:15067;;;;;;;;;;;;;;;;;10736:28;10779:46;:::i;:::-;10135:10;;290:15067;10779:46;-1:-1:-1;290:15067:13;;10779:46;3285:146::o;290:15067::-;-1:-1:-1;;290:15067:13;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;290:15067:13;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;6280:221:12:o;290:15067:13:-;;;:::i;:::-;;;;;;:::i;:::-;;;11070:199;-1:-1:-1;;;;;290:15067:13;;;;;:::i;:::-;3344:27;;290:15067;;;;3344:41;;3336:77;;;:::i;:::-;290:15067;;;:::i;:::-;;;;2114:21:15;;;:::i;:::-;2170:8;;;;290:15067:13;2170:19:15;;;:::i;:::-;2231:15;3344:27:13;2231:15:15;290:15067:13;;;;;;2231:26:15;;;:::i;:::-;290:15067:13;2302:29:15;290:15067:13;;;2302:29:15;:::i;:::-;290:15067:13;;;;2367:33:15;;;:::i;:::-;290:15067:13;;-1:-1:-1;;;2049:383:15;;;290:15067:13;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;2049:383:15;290:15067:13;;2049:383:15;;;;;;;;:::i;3285:146:13:-;290:15067;;3344:27;;290:15067;;3336:77;-1:-1:-1;;;;;3344:27:13;290:15067;3285:146;290:15067;:::i;:::-;11547:34;290:15067;;;;3285:146;:::o;:::-;3336:77;-1:-1:-1;;;;;3344:27:13;290:15067;;;:::i;3336:77::-;11887:27;290:15067;;;:::i;:::-;11887:27;:29;290:15067;;11887:29;:::i;:::-;290:15067;;;;;:::i;:::-;;11931:102;11887:27;290:15067;;;:::i;:::-;11993:27;290:15067;11931:102;;:::i;:::-;290:15067;;;;;11931:102;290:15067;12022:10;11931:102;;3285:146::o;290:15067::-;;;-1:-1:-1;;290:15067:13;;;;;;:::o;3285:146::-;3336:77;-1:-1:-1;;;;;3344:27:13;290:15067;;;:::i;3336:77::-;12368:27;290:15067;;;:::i;:::-;12368:27;290:15067;12368:31;290:15067;;12368:27;290:15067;;;:::i;:::-;12446:27;:29;290:15067;;12446:29;:::i;:::-;290:15067;;;;;:::i;:::-;;12490:102;12368:27;290:15067;;;:::i;12490:102::-;290:15067;;;;;12581:10;;12490:102;;290:15067;;12490:102;3285:146::o;290:15067::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;290:15067:13;;:::o;3285:146::-;3336:77;-1:-1:-1;;;;;3344:27:13;290:15067;;;:::i;3336:77::-;1820:176:12;290:15067:13;;;:::i;:::-;;1841:39:12;1869:10;1841:39;;:::i;:::-;:89;;;;;3285:146:13;1820:176:12;;:::i;:::-;13078:48:13;290:15067;3344:27;290:15067;;;:::i;:::-;13078:37;290:15067;;;;;;;;;;;;;;;13078:48;13141:91;290:15067;;;:::i;:::-;;13141:91;;:::i;:::-;290:15067;;;;;13141:91;290:15067;1869:10:12;290:15067:13;;;13141:91;;3285:146::o;1841:89:12:-;1884:46;1869:10;;;1884:46;;:::i;:::-;1841:89;;;3285:146:13;3336:77;-1:-1:-1;;;;;3344:27:13;290:15067;;;:::i;3336:77::-;1820:176:12;290:15067:13;;;:::i;1820:176:12:-;13709:45:13;290:15067;3344:27;290:15067;;;:::i;:::-;13709:34;290:15067;;;;;;;;;;;;;;;;;;13709:45;13769:88;290:15067;;;:::i;13769:88::-;290:15067;;;;;13769:88;290:15067;1869:10:12;290:15067:13;;;13769:88;;3285:146::o;14043:164::-;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;13539:53:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;:::i;:::-;-1:-1:-1;290:15067:13;;14173:5;290:15067;;14173:27;290:15067;-1:-1:-1;290:15067:13;14173:27;290:15067;;;-1:-1:-1;;;;;290:15067:13;;;;14043:164;290:15067;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;14166:34;;;;;14043:164;:::o;290:15067::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;1755:259:12;;;;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;-1:-1:-1;290:15067:13;;;6930:7:0;290:15067:13;;;;;;13539:53:0;;-1:-1:-1;;;;;290:15067:13;7344:31:0;;13539:53;:::i;:::-;14821:42:13;290:15067;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;1755:259:12;290:15067:13;;;;;14772:34;;;290:15067;;-1:-1:-1;290:15067:13;;;;14717:5;14772:34;290:15067;14717:21;290:15067;;;14717:21;14741:27;290:15067;;;14741:27;14739:29;290:15067;;14739:29;:::i;:::-;290:15067;;;;;14772:34;290:15067;;;;;:::i;:::-;14821:42;1869:10:12;14821:42:13;;:::i;:::-;290:15067;;14821:42;1755:259:12:o;290:15067:13:-;;;:::i;:::-;;;1841:89:12;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;1755:259;1841:39;1869:10;1841:39;;:::i;:::-;:89;;;;1755:259;1820:176;;;:::i;:::-;290:15067:13;-1:-1:-1;;;;;290:15067:13;10412:23:0;290:15067:13;10412:23:0;:::i;:::-;290:15067:13;5735:18;;;:38;;;1755:259:12;5731:342:13;;;7568:7:12;;;-1:-1:-1;290:15067:13;7244:18:12;290:15067:13;;;-1:-1:-1;290:15067:13;1050:1:7;290:15067:13;;;;;7179:111:12;7568:7;7624:8;;;:::i;:::-;10607:23:0;;;:::i;:::-;15198:11:13;290:15067;;;10675:15:0;290:15067:13;;;;;;;-1:-1:-1;;;;;;290:15067:13;;;15198:11;290:15067;;;;10915:9:0;290:15067:13;;;;;;;;;;;;;;;10963:7:0;290:15067:13;;;;;;;;;;;;;;;;10995:36:0;290:15067:13;;;10995:36:0;15256:40:13;10963:7:0;15262:14:13;;290:15067;;4162:5;290:15067;;;;;;;15262:14;:26;15256:40;:::i;:::-;15252:97;;1755:259:12;:::o;15252:97:13:-;15324:14;15317:21;15324:14;290:15067;;4162:5;290:15067;;;;;;;15324:14;15317:21;:::i;5731:342::-;5862:211;;;5958:2;;;:::i;:::-;5731:342;;5862:211;6054:7;;-1:-1:-1;290:15067:13;7244:18:12;290:15067:13;;;-1:-1:-1;290:15067:13;1050:1:7;290:15067:13;;;;;7179:111:12;5735:38:13;;290:15067;5735:38;;1841:89:12;1869:10;1820:176;1884:46;1869:10;1884:46;;:::i;:::-;1841:89;;;;290:15067:13;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;15198:11;290:15067;;;;;;;;15198:11;290:15067;;;;;;;;:::o;:::-;15198:11;290:15067;;15198:11;290:15067;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;345:66:5;290:15067:13;;;;;;;;;-1:-1:-1;;;;;290:15067:13;;;;;345:66:5;290:15067:13;;;;;;345:66:5;290:15067:13;345:66:5;;;;:::o;290:15067:13:-;;;:::i;:::-;;;345:66:5;;290:15067:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;345:66:5;290:15067:13;345:66:5;290:15067:13;;345:66:5;;:::i;:::-;;;;;;;;:::o;505:3026::-;290:15067:13;;795:16:5;791:31;;290:15067:13;;:::i;:::-;1326:39:5;1337:27;1342:21;1343:15;290:15067:13;;1343:15:5;:::i;:::-;1362:1;345:66;;;;1342:21;1337:27;:::i;:::-;1326:39;:::i;:::-;1419:2082;;;;;;;;;;;;;;;;;;;;1362:1;1419:2082;;;1362:1;1419:2082;1362:1;;;1419:2082;;;;3511:13;505:3026;:::o;1419:2082::-;;;-1:-1:-1;;1419:2082:5;;505:3026;:::o;1419:2082::-;-1:-1:-1;1419:2082:5;;;-1:-1:-1;;1419:2082:5;;;-1:-1:-1;;1419:2082:5;;505:3026;:::o;1419:2082::-;1362:1;;;1337;1362;;1419:2082;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1357:1;1419:2082;;;;;;;;;;;;;;;;;;791:31;290:15067:13;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;290:15067:13;;;;-1:-1:-1;290:15067:13;;-1:-1:-1;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;290:15067:13;;;-1:-1:-1;;;290:15067:13;;-1:-1:-1;290:15067:13;;;;;;415:696:8;537:17;-1:-1:-1;10026:6:11;;10017:15;;;;10013:99;;415:696:8;10138:6:11;;10129:15;;;;10125:99;;415:696:8;10250:6:11;;10241:15;;;;10237:99;;415:696:8;10362:5:11;;10353:14;;;;10349:96;;415:696:8;10471:5:11;;10462:14;;;;10458:96;;415:696:8;10571:14:11;10580:5;10571:14;;;10567:96;;415:696:8;10689:5:11;10680:14;;;;10676:64;;415:696:8;557:1;290:15067:13;;699:76:8;595:18;290:15067:13;;;595:18:8;:::i;:::-;627:11;699:76;;;788:280;557:1;;;788:280;1081:13;;;;415:696;:::o;788:280::-;-1:-1:-1;;290:15067:13;;;;-1:-1:-1;;;893:93:8;;;;290:15067:13;893:93:8;345:66:5;1003:11:8;;1036:10;1032:21;;788:280;;;;;1032:21;1048:5;;10676:64:11;290:15067:13;10724:1:11;290:15067:13;10676:64:11;;;10567:96;345:66:5;;10580:5:11;10647:1;345:66:5;;290:15067:13;;10567:96:11;;;10458;10538:1;345:66:5;;;;290:15067:13;;10458:96:11;;;;10349;10429:1;345:66:5;;;;290:15067:13;;10349:96:11;;;;10237:99;10319:2;345:66:5;;;;290:15067:13;;10237:99:11;;;;10125;10207:2;345:66:5;;;;290:15067:13;;10125:99:11;;;;10013;10095:2;;-1:-1:-1;345:66:5;;;-1:-1:-1;10013:99:11;;;290:15067:13;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;:::o;246:18:8:-;;;;:::o;:::-;290:15067:13;246:18:8;290:15067:13;;;;;246:18:8;;;;;;;;;;;290:15067:13;246:18:8;290:15067:13;;;246:18:8;;1513:437;1635:25;;:::i;:::-;290:15067:13;;;;;;1513:437:8;1670:15;290:15067:13;;;1670:15:8;290:15067:13;;1702:1:8;290:15067:13;;;;;;1513:437:8;290:15067:13;1695:15:8;290:15067:13;;;1695:15:8;290:15067:13;1720:128:8;1753:5;;;;;;1865:10;1857:55;1865:10;;;1857:55;:::i;1760:3::-;1800:11;;1808:3;1760;1800:11;;1791:21;;;;;;1760:3;-1:-1:-1;;;1791:21:8;;1779:33;;;;:::i;:::-;;290:15067:13;;1760:3:8;;:::i;:::-;1725:26;;;;1791:21;;;:::i;:::-;;;290:15067:13;;;:::i;:::-;;;;;;:::i;:::-;;;265:2811:14;290:15067:13;;;;551:2454:14;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;290:15067:13;;;;;;;;;:::i;:::-;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;-1:-1:-1;;;290:15067:13;;;;551:2454:14;290:15067:13;;;551:2454:14;;;;;;;;;;:::i;:::-;512:2515;;;:::i;:::-;290:15067:13;;;551:2454:14;421:2624;;290:15067:13;;;;;;;;;;405:116:15;490:24;;;290:15067:13;;;;;:::i;:::-;;;;-1:-1:-1;;;290:15067:13;;;;405:116:15;:::o;490:24::-;290:15067:13;;;;;:::i;:::-;;;;-1:-1:-1;;;290:15067:13;;;;405:116:15;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "3602800",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "addAccessPoint(uint256,string)": "infinite",
                "appAccessPoints(uint256)": "infinite",
                "approve(address,uint256)": "infinite",
                "balanceOf(address)": "2857",
                "burn(uint256)": "infinite",
                "decreaseAccessPointScore(string)": "infinite",
                "getAccessPointJSON(string)": "infinite",
                "getApproved(uint256)": "4772",
                "getCollectionRoleMembers(uint8)": "infinite",
                "getTokenRoleMembers(uint256,uint8)": "infinite",
                "grantCollectionRole(uint8,address)": "infinite",
                "grantTokenRole(uint256,uint8,address)": "infinite",
                "hasCollectionRole(uint8,address)": "5563",
                "hasTokenRole(uint256,uint8,address)": "5582",
                "increaseAccessPointScore(string)": "infinite",
                "isAccessPointNameVerified(string)": "infinite",
                "isApprovedForAll(address,address)": "3406",
                "mint(address,string,string,string,string,string,string)": "infinite",
                "name()": "infinite",
                "ownerOf(uint256)": "2849",
                "removeAccessPoint(string)": "infinite",
                "revokeCollectionRole(uint8,address)": "infinite",
                "revokeTokenRole(uint256,uint8,address)": "infinite",
                "safeTransferFrom(address,address,uint256)": "infinite",
                "safeTransferFrom(address,address,uint256,bytes)": "infinite",
                "setAccessPointContentVerify(string,bool)": "infinite",
                "setAccessPointNameVerify(string,bool)": "infinite",
                "setApprovalForAll(address,bool)": "27024",
                "setTokenBuild(uint256,string,string)": "infinite",
                "setTokenDescription(uint256,string)": "infinite",
                "setTokenENS(uint256,string)": "infinite",
                "setTokenExternalURL(uint256,string)": "infinite",
                "setTokenName(uint256,string)": "infinite",
                "supportsInterface(bytes4)": "479",
                "symbol()": "infinite",
                "tokenURI(uint256)": "infinite",
                "transferFrom(address,address,uint256)": "infinite"
              },
              "internal": {
                "_baseURI()": "infinite",
                "_beforeTokenTransfer(address,address,uint256,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "addAccessPoint(uint256,string)": "b30437a0",
              "appAccessPoints(uint256)": "f6be6b78",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "burn(uint256)": "42966c68",
              "decreaseAccessPointScore(string)": "a397c830",
              "getAccessPointJSON(string)": "27dc5cec",
              "getApproved(uint256)": "081812fc",
              "getCollectionRoleMembers(uint8)": "353b07a4",
              "getTokenRoleMembers(uint256,uint8)": "2f1e8f0a",
              "grantCollectionRole(uint8,address)": "2d957aad",
              "grantTokenRole(uint256,uint8,address)": "a27d0b27",
              "hasCollectionRole(uint8,address)": "e9447250",
              "hasTokenRole(uint256,uint8,address)": "b42dbe38",
              "increaseAccessPointScore(string)": "94ec65c5",
              "isAccessPointNameVerified(string)": "d7a75be1",
              "isApprovedForAll(address,address)": "e985e9c5",
              "mint(address,string,string,string,string,string,string)": "aba81125",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "removeAccessPoint(string)": "7469a03b",
              "revokeCollectionRole(uint8,address)": "8c3c0a44",
              "revokeTokenRole(uint256,uint8,address)": "01468deb",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setAccessPointContentVerify(string,bool)": "b20b94f1",
              "setAccessPointNameVerify(string,bool)": "42e44bbf",
              "setApprovalForAll(address,bool)": "a22cb465",
              "setTokenBuild(uint256,string,string)": "3806f152",
              "setTokenDescription(uint256,string)": "246a908b",
              "setTokenENS(uint256,string)": "78278cca",
              "setTokenExternalURL(uint256,string)": "f9315177",
              "setTokenName(uint256,string)": "cdb0e89e",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenURI(uint256)": "c87b56dd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"ChangeAccessPointContentVerify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"ChangeAccessPointNameVerify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"ChangeAccessPointScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"CollectionRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"CollectionRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewAccessPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"commitHash\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewBuild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ENS\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenENS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenExternalURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenImage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"NewTokenName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveAccessPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"TokenRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"TokenRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"}],\"name\":\"addAccessPoint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"appAccessPoints\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"}],\"name\":\"decreaseAccessPointScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"}],\"name\":\"getAccessPointJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getCollectionRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getTokenRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCollectionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantTokenRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCollectionRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasTokenRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"}],\"name\":\"increaseAccessPointScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"}],\"name\":\"isAccessPointNameVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ENS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"commitHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gitRepository\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"}],\"name\":\"removeAccessPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCollectionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum FleekAccessControl.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeTokenRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"setAccessPointContentVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"apName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"setAccessPointNameVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_commitHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_gitRepository\",\"type\":\"string\"}],\"name\":\"setTokenBuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenDescription\",\"type\":\"string\"}],\"name\":\"setTokenDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenENS\",\"type\":\"string\"}],\"name\":\"setTokenENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenExternalURL\",\"type\":\"string\"}],\"name\":\"setTokenExternalURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAccessPoint(uint256,string)\":{\"details\":\"Add a new AccessPoint register for an app token. The AP name should be a DNS or ENS url and it should be unique. Anyone can add an AP but it should requires a payment. May emit a {NewAccessPoint} event. Requirements: - the tokenId must be minted and valid. IMPORTANT: The payment is not set yet\"},\"appAccessPoints(uint256)\":{\"details\":\"A view function to gether the list of mirrros for a given app. Requirements: - the tokenId must be minted and valid.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns a previously minted `tokenId`. May emit a {Transfer} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenOwner` role.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"decreaseAccessPointScore(string)\":{\"details\":\"Decreases the score of a AccessPoint registry if is greater than 0. May emit a {ChangeAccessPointScore} event. Requirements: - the AP must exist.\"},\"getAccessPointJSON(string)\":{\"details\":\"A view function to gether information about an AccessPoint. It returns a JSON string representing the AccessPoint information. Requirements: - the AP must exist.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCollectionRoleMembers(uint8)\":{\"details\":\"Returns an array of addresses that all have the collection role.\"},\"getTokenRoleMembers(uint256,uint8)\":{\"details\":\"Returns an array of addresses that all have the same token role for a certain tokenId.\"},\"grantCollectionRole(uint8,address)\":{\"details\":\"Grants the collection role to an address. Requirements: - the caller should have the collection role.\"},\"grantTokenRole(uint256,uint8,address)\":{\"details\":\"Grants the token role to an address. Requirements: - the caller should have the token role.\"},\"hasCollectionRole(uint8,address)\":{\"details\":\"Returns `True` if a certain address has the collection role.\"},\"hasTokenRole(uint256,uint8,address)\":{\"details\":\"Returns `True` if a certain address has the token role.\"},\"increaseAccessPointScore(string)\":{\"details\":\"Increases the score of a AccessPoint registry. May emit a {ChangeAccessPointScore} event. Requirements: - the AP must exist.\"},\"isAccessPointNameVerified(string)\":{\"details\":\"A view function to check if a AccessPoint is verified. Requirements: - the AP must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,string,string,string,string,string,string)\":{\"details\":\"Mints a token and returns a tokenId. If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event. Requirements: - the caller must have ``collectionOwner``'s admin role.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"removeAccessPoint(string)\":{\"details\":\"Remove an AccessPoint registry for an app token. It will also remove the AP from the app token APs list. May emit a {RemoveAccessPoint} event. Requirements: - the AP must exist. - must be called by the AP owner.\"},\"revokeCollectionRole(uint8,address)\":{\"details\":\"Revokes the collection role of an address. Requirements: - the caller should have the collection role.\"},\"revokeTokenRole(uint256,uint8,address)\":{\"details\":\"Revokes the token role of an address. Requirements: - the caller should have the token role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAccessPointContentVerify(string,bool)\":{\"details\":\"Set the content verification of a AccessPoint registry. May emit a {ChangeAccessPointContentVerify} event. Requirements: - the AP must exist. - the sender must have the token controller role.\"},\"setAccessPointNameVerify(string,bool)\":{\"details\":\"Set the name verification of a AccessPoint registry. May emit a {ChangeAccessPointNameVerify} event. Requirements: - the AP must exist. - the sender must have the token controller role.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setTokenBuild(uint256,string,string)\":{\"details\":\"Adds a new build to a minted `tokenId`'s builds mapping. May emit a {NewBuild} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenDescription(uint256,string)\":{\"details\":\"Updates the `description` metadata field of a minted `tokenId`. May emit a {NewTokenDescription} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenENS(uint256,string)\":{\"details\":\"Updates the `ENS` metadata field of a minted `tokenId`. May emit a {NewTokenENS} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenExternalURL(uint256,string)\":{\"details\":\"Updates the `externalURL` metadata field of a minted `tokenId`. May emit a {NewTokenExternalURL} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"setTokenName(uint256,string)\":{\"details\":\"Updates the `name` metadata field of a minted `tokenId`. May emit a {NewTokenName} event. Requirements: - the tokenId must be minted and valid. - the sender must have the `tokenController` role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the token metadata associated with the `tokenId`. Returns a based64 encoded string value of the URI. Requirements: - the tokenId must be minted and valid.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FleekERC721.sol\":\"FleekERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/FleekAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract FleekAccessControl {\\n    using Counters for Counters.Counter;\\n\\n    enum Roles {\\n        Owner,\\n        Controller\\n    }\\n\\n    event TokenRoleGranted(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event TokenRoleRevoked(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleGranted(Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleRevoked(Roles indexed role, address indexed toAddress, address byAddress);\\n\\n    struct Role {\\n        mapping(address => uint256) indexes;\\n        address[] members;\\n    }\\n\\n    Counters.Counter private _collectionRolesVersion;\\n    // _collectionRoles[version][role]\\n    mapping(uint256 => mapping(Roles => Role)) private _collectionRoles;\\n\\n    mapping(uint256 => Counters.Counter) private _tokenRolesVersion;\\n    // _tokenRoles[tokenId][version][role]\\n    mapping(uint256 => mapping(uint256 => mapping(Roles => Role))) private _tokenRoles;\\n\\n    /**\\n     * @dev Initializes the contract by granting the `Owner` role to the deployer.\\n     */\\n    constructor() {\\n        _grantCollectionRole(Roles.Owner, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Checks if the `msg.sender` has a certain role.\\n     */\\n    modifier requireCollectionRole(Roles role) {\\n        require(\\n            hasCollectionRole(role, msg.sender) || hasCollectionRole(Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have collection role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if the `msg.sender` has the `Token` role for a certain `tokenId`.\\n     */\\n    modifier requireTokenRole(uint256 tokenId, Roles role) {\\n        require(\\n            hasTokenRole(tokenId, role, msg.sender) || hasTokenRole(tokenId, Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have token role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function grantCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _grantCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function grantTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _grantTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function revokeCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _revokeCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function revokeTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _revokeTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the collection role.\\n     */\\n    function hasCollectionRole(Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n\\n        return _collectionRoles[currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the token role.\\n     */\\n    function hasTokenRole(uint256 tokenId, Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the collection role.\\n     */\\n    function getCollectionRoleMembers(Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        return _collectionRoles[currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the same token role for a certain tokenId.\\n     */\\n    function getTokenRoleMembers(uint256 tokenId, Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     */\\n    function _grantCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _grantRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     */\\n    function _revokeCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _revokeRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     */\\n    function _grantTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _grantRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleGranted(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     */\\n    function _revokeTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _revokeRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleRevoked(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants a certain role to a certain address.\\n     */\\n    function _grantRole(Role storage role, address account) internal {\\n        if (role.indexes[account] == 0) {\\n            role.members.push(account);\\n            role.indexes[account] = role.members.length;\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes a certain role from a certain address.\\n     */\\n    function _revokeRole(Role storage role, address account) internal {\\n        if (role.indexes[account] != 0) {\\n            uint256 index = role.indexes[account] - 1;\\n            uint256 lastIndex = role.members.length - 1;\\n            address lastAccount = role.members[lastIndex];\\n\\n            role.members[index] = lastAccount;\\n            role.indexes[lastAccount] = index + 1;\\n\\n            role.members.pop();\\n            delete role.indexes[account];\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId.\\n     * Should only be used for burning tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId) internal {\\n        _tokenRolesVersion[tokenId].increment();\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId and grants the owner role to a new address.\\n     * Should only be used for transferring tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId, address newOwner) internal {\\n        _clearAllTokenRoles(tokenId);\\n        _grantTokenRole(tokenId, Roles.Owner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x116e95aebf5f69698c91d6b4605e934f19427ee43939eaf970df90d178d64cc0\",\"license\":\"MIT\"},\"contracts/FleekERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./FleekAccessControl.sol\\\";\\nimport \\\"./util/FleekStrings.sol\\\";\\n\\ncontract FleekERC721 is ERC721, FleekAccessControl {\\n    using Counters for Counters.Counter;\\n    using FleekStrings for FleekERC721.App;\\n    using FleekStrings for FleekERC721.AccessPoint;\\n    using FleekStrings for string;\\n\\n    event NewBuild(uint256 indexed token, string indexed commitHash, address indexed triggeredBy);\\n    event NewTokenName(uint256 indexed token, string indexed name, address indexed triggeredBy);\\n    event NewTokenDescription(uint256 indexed token, string indexed description, address indexed triggeredBy);\\n    event NewTokenImage(uint256 indexed token, string indexed image, address indexed triggeredBy);\\n    event NewTokenExternalURL(uint256 indexed token, string indexed externalURL, address indexed triggeredBy);\\n    event NewTokenENS(uint256 indexed token, string indexed ENS, address indexed triggeredBy);\\n\\n    event NewAccessPoint(string indexed apName, uint256 indexed tokenId, address indexed owner);\\n    event RemoveAccessPoint(string indexed apName, uint256 indexed tokenId, address indexed owner);\\n    event ChangeAccessPointScore(\\n        string indexed apName,\\n        uint256 indexed tokenId,\\n        uint256 score,\\n        address indexed triggeredBy\\n    );\\n    event ChangeAccessPointNameVerify(\\n        string indexed apName,\\n        uint256 tokenId,\\n        bool indexed verified,\\n        address indexed triggeredBy\\n    );\\n    event ChangeAccessPointContentVerify(\\n        string indexed apName,\\n        uint256 tokenId,\\n        bool indexed verified,\\n        address indexed triggeredBy\\n    );\\n\\n    /**\\n     * The properties are stored as string to keep consistency with\\n     * other token contracts, we might consider changing for bytes32\\n     * in the future due to gas optimization.\\n     */\\n    struct App {\\n        string name; // Name of the site\\n        string description; // Description about the site\\n        string externalURL; // Site URL\\n        string ENS; // ENS ID\\n        uint256 currentBuild; // The current build number (Increments by one with each change, starts at zero)\\n        mapping(uint256 => Build) builds; // Mapping to build details for each build number\\n        string[] accessPoints; // List of app AccessPoint\\n    }\\n\\n    /**\\n     * The metadata that is stored for each build.\\n     */\\n    struct Build {\\n        string commitHash;\\n        string gitRepository;\\n    }\\n\\n    /**\\n     * The stored data for each AccessPoint.\\n     */\\n    struct AccessPoint {\\n        uint256 tokenId;\\n        uint256 index;\\n        uint256 score;\\n        bool contentVerified;\\n        bool nameVerified;\\n        address owner;\\n    }\\n\\n    Counters.Counter private _appIds;\\n    mapping(uint256 => App) private _apps;\\n    mapping(string => AccessPoint) private _accessPoints;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\\n\\n    /**\\n     * @dev Checks if the AccessPoint exists.\\n     */\\n    modifier requireAP(string memory apName) {\\n        require(_accessPoints[apName].owner != address(0), \\\"FleekERC721: invalid AP\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Mints a token and returns a tokenId.\\n     *\\n     * If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``collectionOwner``'s admin role.\\n     *\\n     */\\n    function mint(\\n        address to,\\n        string memory name,\\n        string memory description,\\n        string memory externalURL,\\n        string memory ENS,\\n        string memory commitHash,\\n        string memory gitRepository\\n    ) public payable requireCollectionRole(Roles.Owner) returns (uint256) {\\n        uint256 tokenId = _appIds.current();\\n        _mint(to, tokenId);\\n        _appIds.increment();\\n\\n        App storage app = _apps[tokenId];\\n        app.name = name;\\n        app.description = description;\\n        app.externalURL = externalURL;\\n        app.ENS = ENS;\\n\\n        // The mint interaction is considered to be the first build of the site. Updates from now on all increment the currentBuild by one and update the mapping.\\n        app.currentBuild = 0;\\n        app.builds[0] = Build(commitHash, gitRepository);\\n        app.accessPoints = new string[](0);\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Returns the token metadata associated with the `tokenId`.\\n     *\\n     * Returns a based64 encoded string value of the URI.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     *\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n        address owner = ownerOf(tokenId);\\n        App storage app = _apps[tokenId];\\n\\n        return string(abi.encodePacked(_baseURI(), app.toString(owner).toBase64()));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Override of _beforeTokenTransfer of ERC721.\\n     * Here it needs to update the token controller roles for mint, burn and transfer.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        if (from != address(0) && to != address(0)) {\\n            // Transfer\\n            _clearAllTokenRoles(tokenId, to);\\n        } else if (from == address(0)) {\\n            // Mint\\n            _grantTokenRole(tokenId, Roles.Owner, to);\\n        } else if (to == address(0)) {\\n            // Burn\\n            _clearAllTokenRoles(tokenId);\\n        }\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    /**\\n     * @dev A baseURI internal function implementation to be called in the `tokenURI` function.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return \\\"data:application/json;base64,\\\";\\n    }\\n\\n    /**\\n     * @dev Updates the `externalURL` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenExternalURL} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenExternalURL(\\n        uint256 tokenId,\\n        string memory _tokenExternalURL\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].externalURL = _tokenExternalURL;\\n        emit NewTokenExternalURL(tokenId, _tokenExternalURL, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `ENS` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenENS} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenENS(\\n        uint256 tokenId,\\n        string memory _tokenENS\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].ENS = _tokenENS;\\n        emit NewTokenENS(tokenId, _tokenENS, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `name` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenName} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenName(\\n        uint256 tokenId,\\n        string memory _tokenName\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].name = _tokenName;\\n        emit NewTokenName(tokenId, _tokenName, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `description` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenDescription} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenDescription(\\n        uint256 tokenId,\\n        string memory _tokenDescription\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].description = _tokenDescription;\\n        emit NewTokenDescription(tokenId, _tokenDescription, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Add a new AccessPoint register for an app token.\\n     * The AP name should be a DNS or ENS url and it should be unique.\\n     * Anyone can add an AP but it should requires a payment.\\n     *\\n     * May emit a {NewAccessPoint} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     *\\n     * IMPORTANT: The payment is not set yet\\n     */\\n    function addAccessPoint(uint256 tokenId, string memory apName) public payable {\\n        // require(msg.value == 0.1 ether, \\\"You need to pay at least 0.1 ETH\\\"); // TODO: define a minimum price\\n        _requireMinted(tokenId);\\n        require(_accessPoints[apName].owner == address(0), \\\"FleekERC721: AP already exists\\\");\\n\\n        _accessPoints[apName] = AccessPoint(tokenId, _apps[tokenId].accessPoints.length, 0, false, false, msg.sender);\\n        _apps[tokenId].accessPoints.push(apName);\\n\\n        emit NewAccessPoint(apName, tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Remove an AccessPoint registry for an app token.\\n     * It will also remove the AP from the app token APs list.\\n     *\\n     * May emit a {RemoveAccessPoint} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - must be called by the AP owner.\\n     */\\n    function removeAccessPoint(string memory apName) public requireAP(apName) {\\n        require(msg.sender == _accessPoints[apName].owner, \\\"FleekERC721: must be AP owner\\\");\\n        uint256 tokenId = _accessPoints[apName].tokenId;\\n        App storage _app = _apps[tokenId];\\n\\n        // the index of the AP to remove\\n        uint256 indexToRemove = _accessPoints[apName].index;\\n\\n        // the last item is reposited in the index to remove\\n        string memory lastAP = _app.accessPoints[_app.accessPoints.length - 1];\\n        _app.accessPoints[indexToRemove] = lastAP;\\n        _accessPoints[lastAP].index = indexToRemove;\\n\\n        // remove the last item\\n        _app.accessPoints.pop();\\n\\n        delete _accessPoints[apName];\\n        emit RemoveAccessPoint(apName, tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev A view function to gether information about an AccessPoint.\\n     * It returns a JSON string representing the AccessPoint information.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function getAccessPointJSON(string memory apName) public view requireAP(apName) returns (string memory) {\\n        AccessPoint storage _ap = _accessPoints[apName];\\n        return _ap.toString();\\n    }\\n\\n    /**\\n     * @dev A view function to check if a AccessPoint is verified.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function isAccessPointNameVerified(string memory apName) public view requireAP(apName) returns (bool) {\\n        return _accessPoints[apName].nameVerified;\\n    }\\n\\n    /**\\n     * @dev Increases the score of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointScore} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function increaseAccessPointScore(string memory apName) public requireAP(apName) {\\n        _accessPoints[apName].score++;\\n        emit ChangeAccessPointScore(apName, _accessPoints[apName].tokenId, _accessPoints[apName].score, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Decreases the score of a AccessPoint registry if is greater than 0.\\n     *\\n     * May emit a {ChangeAccessPointScore} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function decreaseAccessPointScore(string memory apName) public requireAP(apName) {\\n        require(_accessPoints[apName].score > 0, \\\"FleekERC721: score cant be lower\\\");\\n        _accessPoints[apName].score--;\\n        emit ChangeAccessPointScore(apName, _accessPoints[apName].tokenId, _accessPoints[apName].score, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Set the content verification of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointContentVerify} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - the sender must have the token controller role.\\n     *\\n     */\\n    function setAccessPointContentVerify(\\n        string memory apName,\\n        bool verified\\n    ) public requireAP(apName) requireTokenRole(_accessPoints[apName].tokenId, Roles.Controller) {\\n        _accessPoints[apName].contentVerified = verified;\\n        emit ChangeAccessPointContentVerify(apName, _accessPoints[apName].tokenId, verified, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Set the name verification of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointNameVerify} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - the sender must have the token controller role.\\n     *\\n     */\\n    function setAccessPointNameVerify(\\n        string memory apName,\\n        bool verified\\n    ) public requireAP(apName) requireTokenRole(_accessPoints[apName].tokenId, Roles.Controller) {\\n        _accessPoints[apName].nameVerified = verified;\\n        emit ChangeAccessPointNameVerify(apName, _accessPoints[apName].tokenId, verified, msg.sender);\\n    }\\n\\n    /**\\n     * @dev A view function to gether the list of mirrros for a given app.\\n     *\\n     * Requirements:\\n     * - the tokenId must be minted and valid.\\n     *\\n     */\\n    function appAccessPoints(uint256 tokenId) public view returns (string[] memory) {\\n        _requireMinted(tokenId);\\n        return _apps[tokenId].accessPoints;\\n    }\\n\\n    /**\\n     * @dev Adds a new build to a minted `tokenId`'s builds mapping.\\n     *\\n     * May emit a {NewBuild} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenBuild(\\n        uint256 tokenId,\\n        string memory _commitHash,\\n        string memory _gitRepository\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].builds[++_apps[tokenId].currentBuild] = Build(_commitHash, _gitRepository);\\n        emit NewBuild(tokenId, _commitHash, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Burns a previously minted `tokenId`.\\n     *\\n     * May emit a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenOwner` role.\\n     *\\n     */\\n    function burn(uint256 tokenId) public virtual requireTokenRole(tokenId, Roles.Owner) {\\n        super._burn(tokenId);\\n\\n        if (bytes(_apps[tokenId].externalURL).length != 0) {\\n            delete _apps[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd178e64d1b951e02345f1b9ed712fd97ebe9a968560e8f8c56b7fd2a8a050003\",\"license\":\"MIT\"},\"contracts/util/FleekSVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../FleekERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nlibrary FleekSVG {\\n    /**\\n     * @dev Generates a SVG image.\\n     */\\n    function generateBase64(string memory name, string memory ENS) internal pure returns (string memory) {\\n        return (\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" version=\\\"1.1\\\" width=\\\"640\\\" height=\\\"480\\\" viewBox=\\\"0 0 640 480\\\" xml:space=\\\"preserve\\\">',\\n                            \\\"<defs>\\\",\\n                            \\\"</defs>\\\",\\n                            '<g transform=\\\"matrix(3.42 0 0 3.42 300.98 252.98)\\\"  >',\\n                            '<polygon style=\\\"stroke: rgb(0,0,0); stroke-width: 8; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(152,152,183); fill-rule: nonzero; opacity: 1;\\\" vector-effect=\\\"non-scaling-stroke\\\"  points=\\\"-50,-50 -50,50 50,50 50,-50 \\\" />',\\n                            \\\"</g>\\\",\\n                            '<g transform=\\\"matrix(1 0 0 1 303.5 115.67)\\\" style=\\\"\\\"  >',\\n                            '<text xml:space=\\\"preserve\\\" font-family=\\\"Open Sans\\\" font-size=\\\"24\\\" font-style=\\\"normal\\\" font-weight=\\\"normal\\\" style=\\\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\\\" ><tspan x=\\\"-45.7\\\" y=\\\"5.65\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">Fleek NFAs</tspan></text>',\\n                            \\\"</g>\\\",\\n                            '<g transform=\\\"matrix(1 0 0 1 302 261.47)\\\" style=\\\"\\\"  >',\\n                            '<text xml:space=\\\"preserve\\\" font-family=\\\"Open Sans\\\" font-size=\\\"28\\\" font-style=\\\"normal\\\" font-weight=\\\"normal\\\" style=\\\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\\\" ><tspan x=\\\"-44.26\\\" y=\\\"-6.14\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">',\\n                            name,\\n                            '</tspan><tspan x=\\\"-37.14\\\" y=\\\"17.45\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">',\\n                            ENS,\\n                            \\\"</tspan></text>\\\",\\n                            \\\"</g>\\\",\\n                            \\\"</svg>\\\"\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4bb69cf1e7c35e9e9eaa1e363979b423e111f869b952748a277a6c0875b915f4\",\"license\":\"MIT\"},\"contracts/util/FleekStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../FleekERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./FleekSVG.sol\\\";\\n\\nlibrary FleekStrings {\\n    using Strings for uint256;\\n    using Strings for uint160;\\n    using FleekStrings for bool;\\n\\n    /**\\n     * @dev Converts a boolean value to a string.\\n     */\\n    function toString(bool _bool) internal pure returns (string memory) {\\n        return _bool ? \\\"true\\\" : \\\"false\\\";\\n    }\\n\\n    /**\\n     * @dev Converts a string to a base64 string.\\n     */\\n    function toBase64(string memory str) internal pure returns (string memory) {\\n        return Base64.encode(bytes(str));\\n    }\\n\\n    /**\\n     * @dev Converts FleekERC721.App to a JSON string.\\n     * It requires to receive owner address as a parameter.\\n     */\\n    function toString(FleekERC721.App storage app, address owner) internal view returns (string memory) {\\n        // prettier-ignore\\n        return string(abi.encodePacked(\\n            '{',\\n                '\\\"name\\\":\\\"', app.name, '\\\",',\\n                '\\\"description\\\":\\\"', app.description, '\\\",',\\n                '\\\"owner\\\":\\\"', uint160(owner).toHexString(20), '\\\",',\\n                '\\\"external_url\\\":\\\"', app.externalURL, '\\\",',\\n                '\\\"image\\\":\\\"', FleekSVG.generateBase64(app.name, app.ENS), '\\\",',\\n                '\\\"attributes\\\": [',\\n                    '{\\\"trait_type\\\": \\\"ENS\\\", \\\"value\\\":\\\"', app.ENS,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Commit Hash\\\", \\\"value\\\":\\\"', app.builds[app.currentBuild].commitHash,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Repository\\\", \\\"value\\\":\\\"', app.builds[app.currentBuild].gitRepository,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Version\\\", \\\"value\\\":\\\"', app.currentBuild.toString(),'\\\"}',\\n                ']',\\n            '}'\\n        ));\\n    }\\n\\n    /**\\n     * @dev Converts FleekERC721.AccessPoint to a JSON string.\\n     */\\n    function toString(FleekERC721.AccessPoint storage ap) internal view returns (string memory) {\\n        // prettier-ignore\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"tokenId\\\":', ap.tokenId.toString(), \\\",\\\",\\n                '\\\"score\\\":', ap.score.toString(), \\\",\\\",\\n                '\\\"nameVerified\\\":', ap.nameVerified.toString(), \\\",\\\",\\n                '\\\"contentVerified\\\":', ap.contentVerified.toString(), \\\",\\\",\\n                '\\\"owner\\\":\\\"', uint160(ap.owner).toHexString(20), '\\\"',\\n            \\\"}\\\"\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x5b1d8a2ef3f2c9b93fac2ca9d45cc12dd075c79f110b9d5a6329dc7a6d197611\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 25,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_name",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
              },
              {
                "astId": 27,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_symbol",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 31,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_owners",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 35,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_balances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "astId": 39,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_tokenApprovals",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
              },
              {
                "astId": 45,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_operatorApprovals",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
              },
              {
                "astId": 2715,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_collectionRolesVersion",
                "offset": 0,
                "slot": "6",
                "type": "t_struct(Counter)1510_storage"
              },
              {
                "astId": 2723,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_collectionRoles",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))"
              },
              {
                "astId": 2728,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_tokenRolesVersion",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_uint256,t_struct(Counter)1510_storage)"
              },
              {
                "astId": 2738,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_tokenRoles",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)))"
              },
              {
                "astId": 3449,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_appIds",
                "offset": 0,
                "slot": "10",
                "type": "t_struct(Counter)1510_storage"
              },
              {
                "astId": 3454,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_apps",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_uint256,t_struct(App)3428_storage)"
              },
              {
                "astId": 3459,
                "contract": "contracts/FleekERC721.sol:FleekERC721",
                "label": "_accessPoints",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_string_memory_ptr,t_struct(AccessPoint)3446_storage)"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
              },
              "t_array(t_string_storage)dyn_storage": {
                "base": "t_string_storage",
                "encoding": "dynamic_array",
                "label": "string[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_enum(Roles)2664": {
                "encoding": "inplace",
                "label": "enum FleekAccessControl.Roles",
                "numberOfBytes": "1"
              },
              "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
              },
              "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)": {
                "encoding": "mapping",
                "key": "t_enum(Roles)2664",
                "label": "mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)",
                "numberOfBytes": "32",
                "value": "t_struct(Role)2712_storage"
              },
              "t_mapping(t_string_memory_ptr,t_struct(AccessPoint)3446_storage)": {
                "encoding": "mapping",
                "key": "t_string_memory_ptr",
                "label": "mapping(string => struct FleekERC721.AccessPoint)",
                "numberOfBytes": "32",
                "value": "t_struct(AccessPoint)3446_storage"
              },
              "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
              },
              "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)"
              },
              "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage)))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(uint256 => mapping(enum FleekAccessControl.Roles => struct FleekAccessControl.Role)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_enum(Roles)2664,t_struct(Role)2712_storage))"
              },
              "t_mapping(t_uint256,t_struct(App)3428_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct FleekERC721.App)",
                "numberOfBytes": "32",
                "value": "t_struct(App)3428_storage"
              },
              "t_mapping(t_uint256,t_struct(Build)3433_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct FleekERC721.Build)",
                "numberOfBytes": "32",
                "value": "t_struct(Build)3433_storage"
              },
              "t_mapping(t_uint256,t_struct(Counter)1510_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct Counters.Counter)",
                "numberOfBytes": "32",
                "value": "t_struct(Counter)1510_storage"
              },
              "t_string_memory_ptr": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_struct(AccessPoint)3446_storage": {
                "encoding": "inplace",
                "label": "struct FleekERC721.AccessPoint",
                "members": [
                  {
                    "astId": 3435,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "tokenId",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 3437,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "index",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 3439,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "score",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 3441,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "contentVerified",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_bool"
                  },
                  {
                    "astId": 3443,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "nameVerified",
                    "offset": 1,
                    "slot": "3",
                    "type": "t_bool"
                  },
                  {
                    "astId": 3445,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "owner",
                    "offset": 2,
                    "slot": "3",
                    "type": "t_address"
                  }
                ],
                "numberOfBytes": "128"
              },
              "t_struct(App)3428_storage": {
                "encoding": "inplace",
                "label": "struct FleekERC721.App",
                "members": [
                  {
                    "astId": 3411,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "name",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 3413,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "description",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 3415,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "externalURL",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 3417,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "ENS",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 3419,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "currentBuild",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 3424,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "builds",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_mapping(t_uint256,t_struct(Build)3433_storage)"
                  },
                  {
                    "astId": 3427,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "accessPoints",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_array(t_string_storage)dyn_storage"
                  }
                ],
                "numberOfBytes": "224"
              },
              "t_struct(Build)3433_storage": {
                "encoding": "inplace",
                "label": "struct FleekERC721.Build",
                "members": [
                  {
                    "astId": 3430,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "commitHash",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 3432,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "gitRepository",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_string_storage"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_struct(Counter)1510_storage": {
                "encoding": "inplace",
                "label": "struct Counters.Counter",
                "members": [
                  {
                    "astId": 1509,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "_value",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "32"
              },
              "t_struct(Role)2712_storage": {
                "encoding": "inplace",
                "label": "struct FleekAccessControl.Role",
                "members": [
                  {
                    "astId": 2708,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "indexes",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_mapping(t_address,t_uint256)"
                  },
                  {
                    "astId": 2711,
                    "contract": "contracts/FleekERC721.sol:FleekERC721",
                    "label": "members",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_array(t_address)dyn_storage"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "contracts/util/FleekSVG.sol": {
        "FleekSVG": {
          "abi": [],
          "devdoc": { "kind": "dev", "methods": {}, "version": 1 },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea36469706673582212201b7351169c53e03f5016d61551fc6cf82b79b149d84097f9d53b445e88377a056c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHL PUSH20 0x51169C53E03F5016D61551FC6CF82B79B149D840 SWAP8 0xF9 0xD5 EXTCODESIZE DIFFICULTY 0x5E DUP9 CALLDATACOPY PUSH27 0x56C6578706572696D656E74616CF564736F6C634300080C004100 ",
              "sourceMap": "191:2887:14:-:0;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea36469706673582212201b7351169c53e03f5016d61551fc6cf82b79b149d84097f9d53b445e88377a056c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHL PUSH20 0x51169C53E03F5016D61551FC6CF82B79B149D840 SWAP8 0xF9 0xD5 EXTCODESIZE DIFFICULTY 0x5E DUP9 CALLDATACOPY PUSH27 0x56C6578706572696D656E74616CF564736F6C634300080C004100 ",
              "sourceMap": "191:2887:14:-:0;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "generateBase64(string memory,string memory)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/util/FleekSVG.sol\":\"FleekSVG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/FleekAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract FleekAccessControl {\\n    using Counters for Counters.Counter;\\n\\n    enum Roles {\\n        Owner,\\n        Controller\\n    }\\n\\n    event TokenRoleGranted(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event TokenRoleRevoked(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleGranted(Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleRevoked(Roles indexed role, address indexed toAddress, address byAddress);\\n\\n    struct Role {\\n        mapping(address => uint256) indexes;\\n        address[] members;\\n    }\\n\\n    Counters.Counter private _collectionRolesVersion;\\n    // _collectionRoles[version][role]\\n    mapping(uint256 => mapping(Roles => Role)) private _collectionRoles;\\n\\n    mapping(uint256 => Counters.Counter) private _tokenRolesVersion;\\n    // _tokenRoles[tokenId][version][role]\\n    mapping(uint256 => mapping(uint256 => mapping(Roles => Role))) private _tokenRoles;\\n\\n    /**\\n     * @dev Initializes the contract by granting the `Owner` role to the deployer.\\n     */\\n    constructor() {\\n        _grantCollectionRole(Roles.Owner, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Checks if the `msg.sender` has a certain role.\\n     */\\n    modifier requireCollectionRole(Roles role) {\\n        require(\\n            hasCollectionRole(role, msg.sender) || hasCollectionRole(Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have collection role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if the `msg.sender` has the `Token` role for a certain `tokenId`.\\n     */\\n    modifier requireTokenRole(uint256 tokenId, Roles role) {\\n        require(\\n            hasTokenRole(tokenId, role, msg.sender) || hasTokenRole(tokenId, Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have token role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function grantCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _grantCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function grantTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _grantTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function revokeCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _revokeCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function revokeTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _revokeTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the collection role.\\n     */\\n    function hasCollectionRole(Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n\\n        return _collectionRoles[currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the token role.\\n     */\\n    function hasTokenRole(uint256 tokenId, Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the collection role.\\n     */\\n    function getCollectionRoleMembers(Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        return _collectionRoles[currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the same token role for a certain tokenId.\\n     */\\n    function getTokenRoleMembers(uint256 tokenId, Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     */\\n    function _grantCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _grantRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     */\\n    function _revokeCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _revokeRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     */\\n    function _grantTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _grantRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleGranted(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     */\\n    function _revokeTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _revokeRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleRevoked(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants a certain role to a certain address.\\n     */\\n    function _grantRole(Role storage role, address account) internal {\\n        if (role.indexes[account] == 0) {\\n            role.members.push(account);\\n            role.indexes[account] = role.members.length;\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes a certain role from a certain address.\\n     */\\n    function _revokeRole(Role storage role, address account) internal {\\n        if (role.indexes[account] != 0) {\\n            uint256 index = role.indexes[account] - 1;\\n            uint256 lastIndex = role.members.length - 1;\\n            address lastAccount = role.members[lastIndex];\\n\\n            role.members[index] = lastAccount;\\n            role.indexes[lastAccount] = index + 1;\\n\\n            role.members.pop();\\n            delete role.indexes[account];\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId.\\n     * Should only be used for burning tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId) internal {\\n        _tokenRolesVersion[tokenId].increment();\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId and grants the owner role to a new address.\\n     * Should only be used for transferring tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId, address newOwner) internal {\\n        _clearAllTokenRoles(tokenId);\\n        _grantTokenRole(tokenId, Roles.Owner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x116e95aebf5f69698c91d6b4605e934f19427ee43939eaf970df90d178d64cc0\",\"license\":\"MIT\"},\"contracts/FleekERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./FleekAccessControl.sol\\\";\\nimport \\\"./util/FleekStrings.sol\\\";\\n\\ncontract FleekERC721 is ERC721, FleekAccessControl {\\n    using Counters for Counters.Counter;\\n    using FleekStrings for FleekERC721.App;\\n    using FleekStrings for FleekERC721.AccessPoint;\\n    using FleekStrings for string;\\n\\n    event NewBuild(uint256 indexed token, string indexed commitHash, address indexed triggeredBy);\\n    event NewTokenName(uint256 indexed token, string indexed name, address indexed triggeredBy);\\n    event NewTokenDescription(uint256 indexed token, string indexed description, address indexed triggeredBy);\\n    event NewTokenImage(uint256 indexed token, string indexed image, address indexed triggeredBy);\\n    event NewTokenExternalURL(uint256 indexed token, string indexed externalURL, address indexed triggeredBy);\\n    event NewTokenENS(uint256 indexed token, string indexed ENS, address indexed triggeredBy);\\n\\n    event NewAccessPoint(string indexed apName, uint256 indexed tokenId, address indexed owner);\\n    event RemoveAccessPoint(string indexed apName, uint256 indexed tokenId, address indexed owner);\\n    event ChangeAccessPointScore(\\n        string indexed apName,\\n        uint256 indexed tokenId,\\n        uint256 score,\\n        address indexed triggeredBy\\n    );\\n    event ChangeAccessPointNameVerify(\\n        string indexed apName,\\n        uint256 tokenId,\\n        bool indexed verified,\\n        address indexed triggeredBy\\n    );\\n    event ChangeAccessPointContentVerify(\\n        string indexed apName,\\n        uint256 tokenId,\\n        bool indexed verified,\\n        address indexed triggeredBy\\n    );\\n\\n    /**\\n     * The properties are stored as string to keep consistency with\\n     * other token contracts, we might consider changing for bytes32\\n     * in the future due to gas optimization.\\n     */\\n    struct App {\\n        string name; // Name of the site\\n        string description; // Description about the site\\n        string externalURL; // Site URL\\n        string ENS; // ENS ID\\n        uint256 currentBuild; // The current build number (Increments by one with each change, starts at zero)\\n        mapping(uint256 => Build) builds; // Mapping to build details for each build number\\n        string[] accessPoints; // List of app AccessPoint\\n    }\\n\\n    /**\\n     * The metadata that is stored for each build.\\n     */\\n    struct Build {\\n        string commitHash;\\n        string gitRepository;\\n    }\\n\\n    /**\\n     * The stored data for each AccessPoint.\\n     */\\n    struct AccessPoint {\\n        uint256 tokenId;\\n        uint256 index;\\n        uint256 score;\\n        bool contentVerified;\\n        bool nameVerified;\\n        address owner;\\n    }\\n\\n    Counters.Counter private _appIds;\\n    mapping(uint256 => App) private _apps;\\n    mapping(string => AccessPoint) private _accessPoints;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\\n\\n    /**\\n     * @dev Checks if the AccessPoint exists.\\n     */\\n    modifier requireAP(string memory apName) {\\n        require(_accessPoints[apName].owner != address(0), \\\"FleekERC721: invalid AP\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Mints a token and returns a tokenId.\\n     *\\n     * If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``collectionOwner``'s admin role.\\n     *\\n     */\\n    function mint(\\n        address to,\\n        string memory name,\\n        string memory description,\\n        string memory externalURL,\\n        string memory ENS,\\n        string memory commitHash,\\n        string memory gitRepository\\n    ) public payable requireCollectionRole(Roles.Owner) returns (uint256) {\\n        uint256 tokenId = _appIds.current();\\n        _mint(to, tokenId);\\n        _appIds.increment();\\n\\n        App storage app = _apps[tokenId];\\n        app.name = name;\\n        app.description = description;\\n        app.externalURL = externalURL;\\n        app.ENS = ENS;\\n\\n        // The mint interaction is considered to be the first build of the site. Updates from now on all increment the currentBuild by one and update the mapping.\\n        app.currentBuild = 0;\\n        app.builds[0] = Build(commitHash, gitRepository);\\n        app.accessPoints = new string[](0);\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Returns the token metadata associated with the `tokenId`.\\n     *\\n     * Returns a based64 encoded string value of the URI.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     *\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n        address owner = ownerOf(tokenId);\\n        App storage app = _apps[tokenId];\\n\\n        return string(abi.encodePacked(_baseURI(), app.toString(owner).toBase64()));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Override of _beforeTokenTransfer of ERC721.\\n     * Here it needs to update the token controller roles for mint, burn and transfer.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        if (from != address(0) && to != address(0)) {\\n            // Transfer\\n            _clearAllTokenRoles(tokenId, to);\\n        } else if (from == address(0)) {\\n            // Mint\\n            _grantTokenRole(tokenId, Roles.Owner, to);\\n        } else if (to == address(0)) {\\n            // Burn\\n            _clearAllTokenRoles(tokenId);\\n        }\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    /**\\n     * @dev A baseURI internal function implementation to be called in the `tokenURI` function.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return \\\"data:application/json;base64,\\\";\\n    }\\n\\n    /**\\n     * @dev Updates the `externalURL` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenExternalURL} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenExternalURL(\\n        uint256 tokenId,\\n        string memory _tokenExternalURL\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].externalURL = _tokenExternalURL;\\n        emit NewTokenExternalURL(tokenId, _tokenExternalURL, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `ENS` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenENS} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenENS(\\n        uint256 tokenId,\\n        string memory _tokenENS\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].ENS = _tokenENS;\\n        emit NewTokenENS(tokenId, _tokenENS, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `name` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenName} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenName(\\n        uint256 tokenId,\\n        string memory _tokenName\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].name = _tokenName;\\n        emit NewTokenName(tokenId, _tokenName, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `description` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenDescription} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenDescription(\\n        uint256 tokenId,\\n        string memory _tokenDescription\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].description = _tokenDescription;\\n        emit NewTokenDescription(tokenId, _tokenDescription, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Add a new AccessPoint register for an app token.\\n     * The AP name should be a DNS or ENS url and it should be unique.\\n     * Anyone can add an AP but it should requires a payment.\\n     *\\n     * May emit a {NewAccessPoint} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     *\\n     * IMPORTANT: The payment is not set yet\\n     */\\n    function addAccessPoint(uint256 tokenId, string memory apName) public payable {\\n        // require(msg.value == 0.1 ether, \\\"You need to pay at least 0.1 ETH\\\"); // TODO: define a minimum price\\n        _requireMinted(tokenId);\\n        require(_accessPoints[apName].owner == address(0), \\\"FleekERC721: AP already exists\\\");\\n\\n        _accessPoints[apName] = AccessPoint(tokenId, _apps[tokenId].accessPoints.length, 0, false, false, msg.sender);\\n        _apps[tokenId].accessPoints.push(apName);\\n\\n        emit NewAccessPoint(apName, tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Remove an AccessPoint registry for an app token.\\n     * It will also remove the AP from the app token APs list.\\n     *\\n     * May emit a {RemoveAccessPoint} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - must be called by the AP owner.\\n     */\\n    function removeAccessPoint(string memory apName) public requireAP(apName) {\\n        require(msg.sender == _accessPoints[apName].owner, \\\"FleekERC721: must be AP owner\\\");\\n        uint256 tokenId = _accessPoints[apName].tokenId;\\n        App storage _app = _apps[tokenId];\\n\\n        // the index of the AP to remove\\n        uint256 indexToRemove = _accessPoints[apName].index;\\n\\n        // the last item is reposited in the index to remove\\n        string memory lastAP = _app.accessPoints[_app.accessPoints.length - 1];\\n        _app.accessPoints[indexToRemove] = lastAP;\\n        _accessPoints[lastAP].index = indexToRemove;\\n\\n        // remove the last item\\n        _app.accessPoints.pop();\\n\\n        delete _accessPoints[apName];\\n        emit RemoveAccessPoint(apName, tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev A view function to gether information about an AccessPoint.\\n     * It returns a JSON string representing the AccessPoint information.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function getAccessPointJSON(string memory apName) public view requireAP(apName) returns (string memory) {\\n        AccessPoint storage _ap = _accessPoints[apName];\\n        return _ap.toString();\\n    }\\n\\n    /**\\n     * @dev A view function to check if a AccessPoint is verified.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function isAccessPointNameVerified(string memory apName) public view requireAP(apName) returns (bool) {\\n        return _accessPoints[apName].nameVerified;\\n    }\\n\\n    /**\\n     * @dev Increases the score of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointScore} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function increaseAccessPointScore(string memory apName) public requireAP(apName) {\\n        _accessPoints[apName].score++;\\n        emit ChangeAccessPointScore(apName, _accessPoints[apName].tokenId, _accessPoints[apName].score, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Decreases the score of a AccessPoint registry if is greater than 0.\\n     *\\n     * May emit a {ChangeAccessPointScore} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function decreaseAccessPointScore(string memory apName) public requireAP(apName) {\\n        require(_accessPoints[apName].score > 0, \\\"FleekERC721: score cant be lower\\\");\\n        _accessPoints[apName].score--;\\n        emit ChangeAccessPointScore(apName, _accessPoints[apName].tokenId, _accessPoints[apName].score, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Set the content verification of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointContentVerify} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - the sender must have the token controller role.\\n     *\\n     */\\n    function setAccessPointContentVerify(\\n        string memory apName,\\n        bool verified\\n    ) public requireAP(apName) requireTokenRole(_accessPoints[apName].tokenId, Roles.Controller) {\\n        _accessPoints[apName].contentVerified = verified;\\n        emit ChangeAccessPointContentVerify(apName, _accessPoints[apName].tokenId, verified, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Set the name verification of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointNameVerify} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - the sender must have the token controller role.\\n     *\\n     */\\n    function setAccessPointNameVerify(\\n        string memory apName,\\n        bool verified\\n    ) public requireAP(apName) requireTokenRole(_accessPoints[apName].tokenId, Roles.Controller) {\\n        _accessPoints[apName].nameVerified = verified;\\n        emit ChangeAccessPointNameVerify(apName, _accessPoints[apName].tokenId, verified, msg.sender);\\n    }\\n\\n    /**\\n     * @dev A view function to gether the list of mirrros for a given app.\\n     *\\n     * Requirements:\\n     * - the tokenId must be minted and valid.\\n     *\\n     */\\n    function appAccessPoints(uint256 tokenId) public view returns (string[] memory) {\\n        _requireMinted(tokenId);\\n        return _apps[tokenId].accessPoints;\\n    }\\n\\n    /**\\n     * @dev Adds a new build to a minted `tokenId`'s builds mapping.\\n     *\\n     * May emit a {NewBuild} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenBuild(\\n        uint256 tokenId,\\n        string memory _commitHash,\\n        string memory _gitRepository\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].builds[++_apps[tokenId].currentBuild] = Build(_commitHash, _gitRepository);\\n        emit NewBuild(tokenId, _commitHash, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Burns a previously minted `tokenId`.\\n     *\\n     * May emit a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenOwner` role.\\n     *\\n     */\\n    function burn(uint256 tokenId) public virtual requireTokenRole(tokenId, Roles.Owner) {\\n        super._burn(tokenId);\\n\\n        if (bytes(_apps[tokenId].externalURL).length != 0) {\\n            delete _apps[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd178e64d1b951e02345f1b9ed712fd97ebe9a968560e8f8c56b7fd2a8a050003\",\"license\":\"MIT\"},\"contracts/util/FleekSVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../FleekERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nlibrary FleekSVG {\\n    /**\\n     * @dev Generates a SVG image.\\n     */\\n    function generateBase64(string memory name, string memory ENS) internal pure returns (string memory) {\\n        return (\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" version=\\\"1.1\\\" width=\\\"640\\\" height=\\\"480\\\" viewBox=\\\"0 0 640 480\\\" xml:space=\\\"preserve\\\">',\\n                            \\\"<defs>\\\",\\n                            \\\"</defs>\\\",\\n                            '<g transform=\\\"matrix(3.42 0 0 3.42 300.98 252.98)\\\"  >',\\n                            '<polygon style=\\\"stroke: rgb(0,0,0); stroke-width: 8; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(152,152,183); fill-rule: nonzero; opacity: 1;\\\" vector-effect=\\\"non-scaling-stroke\\\"  points=\\\"-50,-50 -50,50 50,50 50,-50 \\\" />',\\n                            \\\"</g>\\\",\\n                            '<g transform=\\\"matrix(1 0 0 1 303.5 115.67)\\\" style=\\\"\\\"  >',\\n                            '<text xml:space=\\\"preserve\\\" font-family=\\\"Open Sans\\\" font-size=\\\"24\\\" font-style=\\\"normal\\\" font-weight=\\\"normal\\\" style=\\\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\\\" ><tspan x=\\\"-45.7\\\" y=\\\"5.65\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">Fleek NFAs</tspan></text>',\\n                            \\\"</g>\\\",\\n                            '<g transform=\\\"matrix(1 0 0 1 302 261.47)\\\" style=\\\"\\\"  >',\\n                            '<text xml:space=\\\"preserve\\\" font-family=\\\"Open Sans\\\" font-size=\\\"28\\\" font-style=\\\"normal\\\" font-weight=\\\"normal\\\" style=\\\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\\\" ><tspan x=\\\"-44.26\\\" y=\\\"-6.14\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">',\\n                            name,\\n                            '</tspan><tspan x=\\\"-37.14\\\" y=\\\"17.45\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">',\\n                            ENS,\\n                            \\\"</tspan></text>\\\",\\n                            \\\"</g>\\\",\\n                            \\\"</svg>\\\"\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4bb69cf1e7c35e9e9eaa1e363979b423e111f869b952748a277a6c0875b915f4\",\"license\":\"MIT\"},\"contracts/util/FleekStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../FleekERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./FleekSVG.sol\\\";\\n\\nlibrary FleekStrings {\\n    using Strings for uint256;\\n    using Strings for uint160;\\n    using FleekStrings for bool;\\n\\n    /**\\n     * @dev Converts a boolean value to a string.\\n     */\\n    function toString(bool _bool) internal pure returns (string memory) {\\n        return _bool ? \\\"true\\\" : \\\"false\\\";\\n    }\\n\\n    /**\\n     * @dev Converts a string to a base64 string.\\n     */\\n    function toBase64(string memory str) internal pure returns (string memory) {\\n        return Base64.encode(bytes(str));\\n    }\\n\\n    /**\\n     * @dev Converts FleekERC721.App to a JSON string.\\n     * It requires to receive owner address as a parameter.\\n     */\\n    function toString(FleekERC721.App storage app, address owner) internal view returns (string memory) {\\n        // prettier-ignore\\n        return string(abi.encodePacked(\\n            '{',\\n                '\\\"name\\\":\\\"', app.name, '\\\",',\\n                '\\\"description\\\":\\\"', app.description, '\\\",',\\n                '\\\"owner\\\":\\\"', uint160(owner).toHexString(20), '\\\",',\\n                '\\\"external_url\\\":\\\"', app.externalURL, '\\\",',\\n                '\\\"image\\\":\\\"', FleekSVG.generateBase64(app.name, app.ENS), '\\\",',\\n                '\\\"attributes\\\": [',\\n                    '{\\\"trait_type\\\": \\\"ENS\\\", \\\"value\\\":\\\"', app.ENS,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Commit Hash\\\", \\\"value\\\":\\\"', app.builds[app.currentBuild].commitHash,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Repository\\\", \\\"value\\\":\\\"', app.builds[app.currentBuild].gitRepository,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Version\\\", \\\"value\\\":\\\"', app.currentBuild.toString(),'\\\"}',\\n                ']',\\n            '}'\\n        ));\\n    }\\n\\n    /**\\n     * @dev Converts FleekERC721.AccessPoint to a JSON string.\\n     */\\n    function toString(FleekERC721.AccessPoint storage ap) internal view returns (string memory) {\\n        // prettier-ignore\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"tokenId\\\":', ap.tokenId.toString(), \\\",\\\",\\n                '\\\"score\\\":', ap.score.toString(), \\\",\\\",\\n                '\\\"nameVerified\\\":', ap.nameVerified.toString(), \\\",\\\",\\n                '\\\"contentVerified\\\":', ap.contentVerified.toString(), \\\",\\\",\\n                '\\\"owner\\\":\\\"', uint160(ap.owner).toHexString(20), '\\\"',\\n            \\\"}\\\"\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x5b1d8a2ef3f2c9b93fac2ca9d45cc12dd075c79f110b9d5a6329dc7a6d197611\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "contracts/util/FleekStrings.sol": {
        "FleekStrings": {
          "abi": [],
          "devdoc": { "kind": "dev", "methods": {}, "version": 1 },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea36469706673582212209942cd5d9928b0fe2fab262a644c5904488beb1f8905127ca3069517969fffa56c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 TIMESTAMP 0xCD 0x5D SWAP10 0x28 0xB0 INVALID 0x2F 0xAB 0x26 0x2A PUSH5 0x4C5904488B 0xEB 0x1F DUP10 SDIV SLT PUSH29 0xA3069517969FFFA56C6578706572696D656E74616CF564736F6C634300 ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "216:2226:15:-:0;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea36469706673582212209942cd5d9928b0fe2fab262a644c5904488beb1f8905127ca3069517969fffa56c6578706572696d656e74616cf564736f6c634300080c0041",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 TIMESTAMP 0xCD 0x5D SWAP10 0x28 0xB0 INVALID 0x2F 0xAB 0x26 0x2A PUSH5 0x4C5904488B 0xEB 0x1F DUP10 SDIV SLT PUSH29 0xA3069517969FFFA56C6578706572696D656E74616CF564736F6C634300 ADDMOD 0xC STOP COINBASE ",
              "sourceMap": "216:2226:15:-:0;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "internal": {
                "toBase64(string memory)": "infinite",
                "toString(bool)": "infinite",
                "toString(struct FleekERC721.AccessPoint storage pointer)": "infinite",
                "toString(struct FleekERC721.App storage pointer,address)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/util/FleekStrings.sol\":\"FleekStrings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/FleekAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract FleekAccessControl {\\n    using Counters for Counters.Counter;\\n\\n    enum Roles {\\n        Owner,\\n        Controller\\n    }\\n\\n    event TokenRoleGranted(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event TokenRoleRevoked(uint256 indexed tokenId, Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleGranted(Roles indexed role, address indexed toAddress, address byAddress);\\n    event CollectionRoleRevoked(Roles indexed role, address indexed toAddress, address byAddress);\\n\\n    struct Role {\\n        mapping(address => uint256) indexes;\\n        address[] members;\\n    }\\n\\n    Counters.Counter private _collectionRolesVersion;\\n    // _collectionRoles[version][role]\\n    mapping(uint256 => mapping(Roles => Role)) private _collectionRoles;\\n\\n    mapping(uint256 => Counters.Counter) private _tokenRolesVersion;\\n    // _tokenRoles[tokenId][version][role]\\n    mapping(uint256 => mapping(uint256 => mapping(Roles => Role))) private _tokenRoles;\\n\\n    /**\\n     * @dev Initializes the contract by granting the `Owner` role to the deployer.\\n     */\\n    constructor() {\\n        _grantCollectionRole(Roles.Owner, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Checks if the `msg.sender` has a certain role.\\n     */\\n    modifier requireCollectionRole(Roles role) {\\n        require(\\n            hasCollectionRole(role, msg.sender) || hasCollectionRole(Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have collection role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if the `msg.sender` has the `Token` role for a certain `tokenId`.\\n     */\\n    modifier requireTokenRole(uint256 tokenId, Roles role) {\\n        require(\\n            hasTokenRole(tokenId, role, msg.sender) || hasTokenRole(tokenId, Roles.Owner, msg.sender),\\n            \\\"FleekAccessControl: must have token role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function grantCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _grantCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function grantTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _grantTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the collection role.\\n     *\\n     */\\n    function revokeCollectionRole(Roles role, address account) public requireCollectionRole(Roles.Owner) {\\n        _revokeCollectionRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller should have the token role.\\n     *\\n     */\\n    function revokeTokenRole(\\n        uint256 tokenId,\\n        Roles role,\\n        address account\\n    ) public requireTokenRole(tokenId, Roles.Owner) {\\n        _revokeTokenRole(tokenId, role, account);\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the collection role.\\n     */\\n    function hasCollectionRole(Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n\\n        return _collectionRoles[currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns `True` if a certain address has the token role.\\n     */\\n    function hasTokenRole(uint256 tokenId, Roles role, address account) public view returns (bool) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].indexes[account] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the collection role.\\n     */\\n    function getCollectionRoleMembers(Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        return _collectionRoles[currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Returns an array of addresses that all have the same token role for a certain tokenId.\\n     */\\n    function getTokenRoleMembers(uint256 tokenId, Roles role) public view returns (address[] memory) {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        return _tokenRoles[tokenId][currentVersion][role].members;\\n    }\\n\\n    /**\\n     * @dev Grants the collection role to an address.\\n     */\\n    function _grantCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _grantRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the collection role of an address.\\n     */\\n    function _revokeCollectionRole(Roles role, address account) internal {\\n        uint256 currentVersion = _collectionRolesVersion.current();\\n        _revokeRole(_collectionRoles[currentVersion][role], account);\\n        emit CollectionRoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants the token role to an address.\\n     */\\n    function _grantTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _grantRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleGranted(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revokes the token role of an address.\\n     */\\n    function _revokeTokenRole(uint256 tokenId, Roles role, address account) internal {\\n        uint256 currentVersion = _tokenRolesVersion[tokenId].current();\\n        _revokeRole(_tokenRoles[tokenId][currentVersion][role], account);\\n        emit TokenRoleRevoked(tokenId, role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Grants a certain role to a certain address.\\n     */\\n    function _grantRole(Role storage role, address account) internal {\\n        if (role.indexes[account] == 0) {\\n            role.members.push(account);\\n            role.indexes[account] = role.members.length;\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes a certain role from a certain address.\\n     */\\n    function _revokeRole(Role storage role, address account) internal {\\n        if (role.indexes[account] != 0) {\\n            uint256 index = role.indexes[account] - 1;\\n            uint256 lastIndex = role.members.length - 1;\\n            address lastAccount = role.members[lastIndex];\\n\\n            role.members[index] = lastAccount;\\n            role.indexes[lastAccount] = index + 1;\\n\\n            role.members.pop();\\n            delete role.indexes[account];\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId.\\n     * Should only be used for burning tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId) internal {\\n        _tokenRolesVersion[tokenId].increment();\\n    }\\n\\n    /**\\n     * @dev Clears all token roles for a certain tokenId and grants the owner role to a new address.\\n     * Should only be used for transferring tokens.\\n     */\\n    function _clearAllTokenRoles(uint256 tokenId, address newOwner) internal {\\n        _clearAllTokenRoles(tokenId);\\n        _grantTokenRole(tokenId, Roles.Owner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x116e95aebf5f69698c91d6b4605e934f19427ee43939eaf970df90d178d64cc0\",\"license\":\"MIT\"},\"contracts/FleekERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./FleekAccessControl.sol\\\";\\nimport \\\"./util/FleekStrings.sol\\\";\\n\\ncontract FleekERC721 is ERC721, FleekAccessControl {\\n    using Counters for Counters.Counter;\\n    using FleekStrings for FleekERC721.App;\\n    using FleekStrings for FleekERC721.AccessPoint;\\n    using FleekStrings for string;\\n\\n    event NewBuild(uint256 indexed token, string indexed commitHash, address indexed triggeredBy);\\n    event NewTokenName(uint256 indexed token, string indexed name, address indexed triggeredBy);\\n    event NewTokenDescription(uint256 indexed token, string indexed description, address indexed triggeredBy);\\n    event NewTokenImage(uint256 indexed token, string indexed image, address indexed triggeredBy);\\n    event NewTokenExternalURL(uint256 indexed token, string indexed externalURL, address indexed triggeredBy);\\n    event NewTokenENS(uint256 indexed token, string indexed ENS, address indexed triggeredBy);\\n\\n    event NewAccessPoint(string indexed apName, uint256 indexed tokenId, address indexed owner);\\n    event RemoveAccessPoint(string indexed apName, uint256 indexed tokenId, address indexed owner);\\n    event ChangeAccessPointScore(\\n        string indexed apName,\\n        uint256 indexed tokenId,\\n        uint256 score,\\n        address indexed triggeredBy\\n    );\\n    event ChangeAccessPointNameVerify(\\n        string indexed apName,\\n        uint256 tokenId,\\n        bool indexed verified,\\n        address indexed triggeredBy\\n    );\\n    event ChangeAccessPointContentVerify(\\n        string indexed apName,\\n        uint256 tokenId,\\n        bool indexed verified,\\n        address indexed triggeredBy\\n    );\\n\\n    /**\\n     * The properties are stored as string to keep consistency with\\n     * other token contracts, we might consider changing for bytes32\\n     * in the future due to gas optimization.\\n     */\\n    struct App {\\n        string name; // Name of the site\\n        string description; // Description about the site\\n        string externalURL; // Site URL\\n        string ENS; // ENS ID\\n        uint256 currentBuild; // The current build number (Increments by one with each change, starts at zero)\\n        mapping(uint256 => Build) builds; // Mapping to build details for each build number\\n        string[] accessPoints; // List of app AccessPoint\\n    }\\n\\n    /**\\n     * The metadata that is stored for each build.\\n     */\\n    struct Build {\\n        string commitHash;\\n        string gitRepository;\\n    }\\n\\n    /**\\n     * The stored data for each AccessPoint.\\n     */\\n    struct AccessPoint {\\n        uint256 tokenId;\\n        uint256 index;\\n        uint256 score;\\n        bool contentVerified;\\n        bool nameVerified;\\n        address owner;\\n    }\\n\\n    Counters.Counter private _appIds;\\n    mapping(uint256 => App) private _apps;\\n    mapping(string => AccessPoint) private _accessPoints;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\\n\\n    /**\\n     * @dev Checks if the AccessPoint exists.\\n     */\\n    modifier requireAP(string memory apName) {\\n        require(_accessPoints[apName].owner != address(0), \\\"FleekERC721: invalid AP\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Mints a token and returns a tokenId.\\n     *\\n     * If the `tokenId` has not been minted before, and the `to` address is not zero, emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``collectionOwner``'s admin role.\\n     *\\n     */\\n    function mint(\\n        address to,\\n        string memory name,\\n        string memory description,\\n        string memory externalURL,\\n        string memory ENS,\\n        string memory commitHash,\\n        string memory gitRepository\\n    ) public payable requireCollectionRole(Roles.Owner) returns (uint256) {\\n        uint256 tokenId = _appIds.current();\\n        _mint(to, tokenId);\\n        _appIds.increment();\\n\\n        App storage app = _apps[tokenId];\\n        app.name = name;\\n        app.description = description;\\n        app.externalURL = externalURL;\\n        app.ENS = ENS;\\n\\n        // The mint interaction is considered to be the first build of the site. Updates from now on all increment the currentBuild by one and update the mapping.\\n        app.currentBuild = 0;\\n        app.builds[0] = Build(commitHash, gitRepository);\\n        app.accessPoints = new string[](0);\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Returns the token metadata associated with the `tokenId`.\\n     *\\n     * Returns a based64 encoded string value of the URI.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     *\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n        address owner = ownerOf(tokenId);\\n        App storage app = _apps[tokenId];\\n\\n        return string(abi.encodePacked(_baseURI(), app.toString(owner).toBase64()));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Override of _beforeTokenTransfer of ERC721.\\n     * Here it needs to update the token controller roles for mint, burn and transfer.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        if (from != address(0) && to != address(0)) {\\n            // Transfer\\n            _clearAllTokenRoles(tokenId, to);\\n        } else if (from == address(0)) {\\n            // Mint\\n            _grantTokenRole(tokenId, Roles.Owner, to);\\n        } else if (to == address(0)) {\\n            // Burn\\n            _clearAllTokenRoles(tokenId);\\n        }\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    /**\\n     * @dev A baseURI internal function implementation to be called in the `tokenURI` function.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return \\\"data:application/json;base64,\\\";\\n    }\\n\\n    /**\\n     * @dev Updates the `externalURL` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenExternalURL} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenExternalURL(\\n        uint256 tokenId,\\n        string memory _tokenExternalURL\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].externalURL = _tokenExternalURL;\\n        emit NewTokenExternalURL(tokenId, _tokenExternalURL, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `ENS` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenENS} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenENS(\\n        uint256 tokenId,\\n        string memory _tokenENS\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].ENS = _tokenENS;\\n        emit NewTokenENS(tokenId, _tokenENS, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `name` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenName} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenName(\\n        uint256 tokenId,\\n        string memory _tokenName\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].name = _tokenName;\\n        emit NewTokenName(tokenId, _tokenName, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the `description` metadata field of a minted `tokenId`.\\n     *\\n     * May emit a {NewTokenDescription} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenDescription(\\n        uint256 tokenId,\\n        string memory _tokenDescription\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].description = _tokenDescription;\\n        emit NewTokenDescription(tokenId, _tokenDescription, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Add a new AccessPoint register for an app token.\\n     * The AP name should be a DNS or ENS url and it should be unique.\\n     * Anyone can add an AP but it should requires a payment.\\n     *\\n     * May emit a {NewAccessPoint} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     *\\n     * IMPORTANT: The payment is not set yet\\n     */\\n    function addAccessPoint(uint256 tokenId, string memory apName) public payable {\\n        // require(msg.value == 0.1 ether, \\\"You need to pay at least 0.1 ETH\\\"); // TODO: define a minimum price\\n        _requireMinted(tokenId);\\n        require(_accessPoints[apName].owner == address(0), \\\"FleekERC721: AP already exists\\\");\\n\\n        _accessPoints[apName] = AccessPoint(tokenId, _apps[tokenId].accessPoints.length, 0, false, false, msg.sender);\\n        _apps[tokenId].accessPoints.push(apName);\\n\\n        emit NewAccessPoint(apName, tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Remove an AccessPoint registry for an app token.\\n     * It will also remove the AP from the app token APs list.\\n     *\\n     * May emit a {RemoveAccessPoint} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - must be called by the AP owner.\\n     */\\n    function removeAccessPoint(string memory apName) public requireAP(apName) {\\n        require(msg.sender == _accessPoints[apName].owner, \\\"FleekERC721: must be AP owner\\\");\\n        uint256 tokenId = _accessPoints[apName].tokenId;\\n        App storage _app = _apps[tokenId];\\n\\n        // the index of the AP to remove\\n        uint256 indexToRemove = _accessPoints[apName].index;\\n\\n        // the last item is reposited in the index to remove\\n        string memory lastAP = _app.accessPoints[_app.accessPoints.length - 1];\\n        _app.accessPoints[indexToRemove] = lastAP;\\n        _accessPoints[lastAP].index = indexToRemove;\\n\\n        // remove the last item\\n        _app.accessPoints.pop();\\n\\n        delete _accessPoints[apName];\\n        emit RemoveAccessPoint(apName, tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev A view function to gether information about an AccessPoint.\\n     * It returns a JSON string representing the AccessPoint information.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function getAccessPointJSON(string memory apName) public view requireAP(apName) returns (string memory) {\\n        AccessPoint storage _ap = _accessPoints[apName];\\n        return _ap.toString();\\n    }\\n\\n    /**\\n     * @dev A view function to check if a AccessPoint is verified.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function isAccessPointNameVerified(string memory apName) public view requireAP(apName) returns (bool) {\\n        return _accessPoints[apName].nameVerified;\\n    }\\n\\n    /**\\n     * @dev Increases the score of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointScore} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function increaseAccessPointScore(string memory apName) public requireAP(apName) {\\n        _accessPoints[apName].score++;\\n        emit ChangeAccessPointScore(apName, _accessPoints[apName].tokenId, _accessPoints[apName].score, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Decreases the score of a AccessPoint registry if is greater than 0.\\n     *\\n     * May emit a {ChangeAccessPointScore} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     *\\n     */\\n    function decreaseAccessPointScore(string memory apName) public requireAP(apName) {\\n        require(_accessPoints[apName].score > 0, \\\"FleekERC721: score cant be lower\\\");\\n        _accessPoints[apName].score--;\\n        emit ChangeAccessPointScore(apName, _accessPoints[apName].tokenId, _accessPoints[apName].score, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Set the content verification of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointContentVerify} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - the sender must have the token controller role.\\n     *\\n     */\\n    function setAccessPointContentVerify(\\n        string memory apName,\\n        bool verified\\n    ) public requireAP(apName) requireTokenRole(_accessPoints[apName].tokenId, Roles.Controller) {\\n        _accessPoints[apName].contentVerified = verified;\\n        emit ChangeAccessPointContentVerify(apName, _accessPoints[apName].tokenId, verified, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Set the name verification of a AccessPoint registry.\\n     *\\n     * May emit a {ChangeAccessPointNameVerify} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the AP must exist.\\n     * - the sender must have the token controller role.\\n     *\\n     */\\n    function setAccessPointNameVerify(\\n        string memory apName,\\n        bool verified\\n    ) public requireAP(apName) requireTokenRole(_accessPoints[apName].tokenId, Roles.Controller) {\\n        _accessPoints[apName].nameVerified = verified;\\n        emit ChangeAccessPointNameVerify(apName, _accessPoints[apName].tokenId, verified, msg.sender);\\n    }\\n\\n    /**\\n     * @dev A view function to gether the list of mirrros for a given app.\\n     *\\n     * Requirements:\\n     * - the tokenId must be minted and valid.\\n     *\\n     */\\n    function appAccessPoints(uint256 tokenId) public view returns (string[] memory) {\\n        _requireMinted(tokenId);\\n        return _apps[tokenId].accessPoints;\\n    }\\n\\n    /**\\n     * @dev Adds a new build to a minted `tokenId`'s builds mapping.\\n     *\\n     * May emit a {NewBuild} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenController` role.\\n     *\\n     */\\n    function setTokenBuild(\\n        uint256 tokenId,\\n        string memory _commitHash,\\n        string memory _gitRepository\\n    ) public virtual requireTokenRole(tokenId, Roles.Controller) {\\n        _requireMinted(tokenId);\\n        _apps[tokenId].builds[++_apps[tokenId].currentBuild] = Build(_commitHash, _gitRepository);\\n        emit NewBuild(tokenId, _commitHash, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Burns a previously minted `tokenId`.\\n     *\\n     * May emit a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the tokenId must be minted and valid.\\n     * - the sender must have the `tokenOwner` role.\\n     *\\n     */\\n    function burn(uint256 tokenId) public virtual requireTokenRole(tokenId, Roles.Owner) {\\n        super._burn(tokenId);\\n\\n        if (bytes(_apps[tokenId].externalURL).length != 0) {\\n            delete _apps[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd178e64d1b951e02345f1b9ed712fd97ebe9a968560e8f8c56b7fd2a8a050003\",\"license\":\"MIT\"},\"contracts/util/FleekSVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../FleekERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nlibrary FleekSVG {\\n    /**\\n     * @dev Generates a SVG image.\\n     */\\n    function generateBase64(string memory name, string memory ENS) internal pure returns (string memory) {\\n        return (\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" version=\\\"1.1\\\" width=\\\"640\\\" height=\\\"480\\\" viewBox=\\\"0 0 640 480\\\" xml:space=\\\"preserve\\\">',\\n                            \\\"<defs>\\\",\\n                            \\\"</defs>\\\",\\n                            '<g transform=\\\"matrix(3.42 0 0 3.42 300.98 252.98)\\\"  >',\\n                            '<polygon style=\\\"stroke: rgb(0,0,0); stroke-width: 8; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(152,152,183); fill-rule: nonzero; opacity: 1;\\\" vector-effect=\\\"non-scaling-stroke\\\"  points=\\\"-50,-50 -50,50 50,50 50,-50 \\\" />',\\n                            \\\"</g>\\\",\\n                            '<g transform=\\\"matrix(1 0 0 1 303.5 115.67)\\\" style=\\\"\\\"  >',\\n                            '<text xml:space=\\\"preserve\\\" font-family=\\\"Open Sans\\\" font-size=\\\"24\\\" font-style=\\\"normal\\\" font-weight=\\\"normal\\\" style=\\\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\\\" ><tspan x=\\\"-45.7\\\" y=\\\"5.65\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">Fleek NFAs</tspan></text>',\\n                            \\\"</g>\\\",\\n                            '<g transform=\\\"matrix(1 0 0 1 302 261.47)\\\" style=\\\"\\\"  >',\\n                            '<text xml:space=\\\"preserve\\\" font-family=\\\"Open Sans\\\" font-size=\\\"28\\\" font-style=\\\"normal\\\" font-weight=\\\"normal\\\" style=\\\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1; white-space: pre;\\\" ><tspan x=\\\"-44.26\\\" y=\\\"-6.14\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">',\\n                            name,\\n                            '</tspan><tspan x=\\\"-37.14\\\" y=\\\"17.45\\\" style=\\\"stroke-width: 1; font-family: \\\"Open Sans\\\", sans-serif; font-size: 18px; font-style: normal; font-weight: normal; fill: rgb(0,0,0); \\\">',\\n                            ENS,\\n                            \\\"</tspan></text>\\\",\\n                            \\\"</g>\\\",\\n                            \\\"</svg>\\\"\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4bb69cf1e7c35e9e9eaa1e363979b423e111f869b952748a277a6c0875b915f4\",\"license\":\"MIT\"},\"contracts/util/FleekStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../FleekERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./FleekSVG.sol\\\";\\n\\nlibrary FleekStrings {\\n    using Strings for uint256;\\n    using Strings for uint160;\\n    using FleekStrings for bool;\\n\\n    /**\\n     * @dev Converts a boolean value to a string.\\n     */\\n    function toString(bool _bool) internal pure returns (string memory) {\\n        return _bool ? \\\"true\\\" : \\\"false\\\";\\n    }\\n\\n    /**\\n     * @dev Converts a string to a base64 string.\\n     */\\n    function toBase64(string memory str) internal pure returns (string memory) {\\n        return Base64.encode(bytes(str));\\n    }\\n\\n    /**\\n     * @dev Converts FleekERC721.App to a JSON string.\\n     * It requires to receive owner address as a parameter.\\n     */\\n    function toString(FleekERC721.App storage app, address owner) internal view returns (string memory) {\\n        // prettier-ignore\\n        return string(abi.encodePacked(\\n            '{',\\n                '\\\"name\\\":\\\"', app.name, '\\\",',\\n                '\\\"description\\\":\\\"', app.description, '\\\",',\\n                '\\\"owner\\\":\\\"', uint160(owner).toHexString(20), '\\\",',\\n                '\\\"external_url\\\":\\\"', app.externalURL, '\\\",',\\n                '\\\"image\\\":\\\"', FleekSVG.generateBase64(app.name, app.ENS), '\\\",',\\n                '\\\"attributes\\\": [',\\n                    '{\\\"trait_type\\\": \\\"ENS\\\", \\\"value\\\":\\\"', app.ENS,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Commit Hash\\\", \\\"value\\\":\\\"', app.builds[app.currentBuild].commitHash,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Repository\\\", \\\"value\\\":\\\"', app.builds[app.currentBuild].gitRepository,'\\\"},',\\n                    '{\\\"trait_type\\\": \\\"Version\\\", \\\"value\\\":\\\"', app.currentBuild.toString(),'\\\"}',\\n                ']',\\n            '}'\\n        ));\\n    }\\n\\n    /**\\n     * @dev Converts FleekERC721.AccessPoint to a JSON string.\\n     */\\n    function toString(FleekERC721.AccessPoint storage ap) internal view returns (string memory) {\\n        // prettier-ignore\\n        return string(abi.encodePacked(\\n            \\\"{\\\",\\n                '\\\"tokenId\\\":', ap.tokenId.toString(), \\\",\\\",\\n                '\\\"score\\\":', ap.score.toString(), \\\",\\\",\\n                '\\\"nameVerified\\\":', ap.nameVerified.toString(), \\\",\\\",\\n                '\\\"contentVerified\\\":', ap.contentVerified.toString(), \\\",\\\",\\n                '\\\"owner\\\":\\\"', uint160(ap.owner).toHexString(20), '\\\"',\\n            \\\"}\\\"\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x5b1d8a2ef3f2c9b93fac2ca9d45cc12dd075c79f110b9d5a6329dc7a6d197611\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      }
    }
  }
}
