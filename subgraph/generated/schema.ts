// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from '@graphprotocol/graph-ts';

export class Approval extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Approval entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Approval must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Approval', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Approval | null {
    return changetype<Approval | null>(store.get('Approval', id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get('owner');
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set('owner', Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get('approved');
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set('approved', Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get('tokenId');
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set('tokenId', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class ApprovalForAll extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save ApprovalForAll entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ApprovalForAll must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('ApprovalForAll', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(
      store.get('ApprovalForAll', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get('owner');
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set('owner', Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get('operator');
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set('operator', Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get('approved');
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set('approved', Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class CollectionRoleGranted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(
      id != null,
      'Cannot save CollectionRoleGranted entity without an ID'
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionRoleGranted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('CollectionRoleGranted', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionRoleGranted | null {
    return changetype<CollectionRoleGranted | null>(
      store.get('CollectionRoleGranted', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get role(): i32 {
    let value = this.get('role');
    return value!.toI32();
  }

  set role(value: i32) {
    this.set('role', Value.fromI32(value));
  }

  get toAddress(): Bytes {
    let value = this.get('toAddress');
    return value!.toBytes();
  }

  set toAddress(value: Bytes) {
    this.set('toAddress', Value.fromBytes(value));
  }

  get byAddress(): Bytes {
    let value = this.get('byAddress');
    return value!.toBytes();
  }

  set byAddress(value: Bytes) {
    this.set('byAddress', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class CollectionRoleRevoked extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(
      id != null,
      'Cannot save CollectionRoleRevoked entity without an ID'
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionRoleRevoked must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('CollectionRoleRevoked', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionRoleRevoked | null {
    return changetype<CollectionRoleRevoked | null>(
      store.get('CollectionRoleRevoked', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get role(): i32 {
    let value = this.get('role');
    return value!.toI32();
  }

  set role(value: i32) {
    this.set('role', Value.fromI32(value));
  }

  get toAddress(): Bytes {
    let value = this.get('toAddress');
    return value!.toBytes();
  }

  set toAddress(value: Bytes) {
    this.set('toAddress', Value.fromBytes(value));
  }

  get byAddress(): Bytes {
    let value = this.get('byAddress');
    return value!.toBytes();
  }

  set byAddress(value: Bytes) {
    this.set('byAddress', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class NewBuild extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save NewBuild entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewBuild must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('NewBuild', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NewBuild | null {
    return changetype<NewBuild | null>(store.get('NewBuild', id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get token(): BigInt {
    let value = this.get('token');
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set('token', Value.fromBigInt(value));
  }

  get commitHash(): string {
    let value = this.get('commitHash');
    return value!.toString();
  }

  set commitHash(value: string) {
    this.set('commitHash', Value.fromString(value));
  }

  get triggeredBy(): Bytes {
    let value = this.get('triggeredBy');
    return value!.toBytes();
  }

  set triggeredBy(value: Bytes) {
    this.set('triggeredBy', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class NewTokenDescription extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save NewTokenDescription entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewTokenDescription must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('NewTokenDescription', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NewTokenDescription | null {
    return changetype<NewTokenDescription | null>(
      store.get('NewTokenDescription', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get token(): BigInt {
    let value = this.get('token');
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set('token', Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get('description');
    return value!.toString();
  }

  set description(value: string) {
    this.set('description', Value.fromString(value));
  }

  get triggeredBy(): Bytes {
    let value = this.get('triggeredBy');
    return value!.toBytes();
  }

  set triggeredBy(value: Bytes) {
    this.set('triggeredBy', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class NewTokenENS extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save NewTokenENS entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewTokenENS must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('NewTokenENS', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NewTokenENS | null {
    return changetype<NewTokenENS | null>(
      store.get('NewTokenENS', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get token(): BigInt {
    let value = this.get('token');
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set('token', Value.fromBigInt(value));
  }

  get ENS(): string {
    let value = this.get('ENS');
    return value!.toString();
  }

  set ENS(value: string) {
    this.set('ENS', Value.fromString(value));
  }

  get triggeredBy(): Bytes {
    let value = this.get('triggeredBy');
    return value!.toBytes();
  }

  set triggeredBy(value: Bytes) {
    this.set('triggeredBy', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class NewTokenExternalURL extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save NewTokenExternalURL entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewTokenExternalURL must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('NewTokenExternalURL', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NewTokenExternalURL | null {
    return changetype<NewTokenExternalURL | null>(
      store.get('NewTokenExternalURL', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get token(): BigInt {
    let value = this.get('token');
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set('token', Value.fromBigInt(value));
  }

  get externalURL(): string {
    let value = this.get('externalURL');
    return value!.toString();
  }

  set externalURL(value: string) {
    this.set('externalURL', Value.fromString(value));
  }

  get triggeredBy(): Bytes {
    let value = this.get('triggeredBy');
    return value!.toBytes();
  }

  set triggeredBy(value: Bytes) {
    this.set('triggeredBy', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class NewTokenImage extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save NewTokenImage entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewTokenImage must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('NewTokenImage', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NewTokenImage | null {
    return changetype<NewTokenImage | null>(
      store.get('NewTokenImage', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get token(): BigInt {
    let value = this.get('token');
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set('token', Value.fromBigInt(value));
  }

  get image(): string {
    let value = this.get('image');
    return value!.toString();
  }

  set image(value: string) {
    this.set('image', Value.fromString(value));
  }

  get triggeredBy(): Bytes {
    let value = this.get('triggeredBy');
    return value!.toBytes();
  }

  set triggeredBy(value: Bytes) {
    this.set('triggeredBy', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class NewTokenName extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save NewTokenName entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewTokenName must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('NewTokenName', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NewTokenName | null {
    return changetype<NewTokenName | null>(
      store.get('NewTokenName', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get token(): BigInt {
    let value = this.get('token');
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set('token', Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get('name');
    return value!.toString();
  }

  set name(value: string) {
    this.set('name', Value.fromString(value));
  }

  get triggeredBy(): Bytes {
    let value = this.get('triggeredBy');
    return value!.toBytes();
  }

  set triggeredBy(value: Bytes) {
    this.set('triggeredBy', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class TokenRoleGranted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TokenRoleGranted entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenRoleGranted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TokenRoleGranted', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TokenRoleGranted | null {
    return changetype<TokenRoleGranted | null>(
      store.get('TokenRoleGranted', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get('tokenId');
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set('tokenId', Value.fromBigInt(value));
  }

  get role(): i32 {
    let value = this.get('role');
    return value!.toI32();
  }

  set role(value: i32) {
    this.set('role', Value.fromI32(value));
  }

  get toAddress(): Bytes {
    let value = this.get('toAddress');
    return value!.toBytes();
  }

  set toAddress(value: Bytes) {
    this.set('toAddress', Value.fromBytes(value));
  }

  get byAddress(): Bytes {
    let value = this.get('byAddress');
    return value!.toBytes();
  }

  set byAddress(value: Bytes) {
    this.set('byAddress', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class TokenRoleRevoked extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TokenRoleRevoked entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenRoleRevoked must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TokenRoleRevoked', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TokenRoleRevoked | null {
    return changetype<TokenRoleRevoked | null>(
      store.get('TokenRoleRevoked', id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get('tokenId');
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set('tokenId', Value.fromBigInt(value));
  }

  get role(): i32 {
    let value = this.get('role');
    return value!.toI32();
  }

  set role(value: i32) {
    this.set('role', Value.fromI32(value));
  }

  get toAddress(): Bytes {
    let value = this.get('toAddress');
    return value!.toBytes();
  }

  set toAddress(value: Bytes) {
    this.set('toAddress', Value.fromBytes(value));
  }

  get byAddress(): Bytes {
    let value = this.get('byAddress');
    return value!.toBytes();
  }

  set byAddress(value: Bytes) {
    this.set('byAddress', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}

export class Transfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set('id', Value.fromBytes(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Transfer entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Transfer', id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(store.get('Transfer', id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get('id');
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get('from');
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set('from', Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get('to');
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set('to', Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get('tokenId');
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set('tokenId', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get('blockTimestamp');
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set('blockTimestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }
}
