// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import "./TestBase.sol";

contract Test_FleekERC721_TokenURIAssertions is Test {
    event MetadataUpdate(uint256 indexed _tokenId, string key, string value, address indexed triggeredBy);
    event MetadataUpdate(uint256 indexed _tokenId, string key, string[4] value, address indexed triggeredBy);
    event MetadataUpdate(uint256 indexed _tokenId, string key, uint24 value, address indexed triggeredBy);

    function expectMetadataUpdate(
        uint256 _tokenId,
        string memory key,
        string memory value,
        address triggeredBy
    ) public {
        vm.expectEmit(true, true, true, true);
        emit MetadataUpdate(_tokenId, key, value, triggeredBy);
    }

    function expectMetadataUpdate(
        uint256 _tokenId,
        string memory key,
        string[4] memory value,
        address triggeredBy
    ) public {
        vm.expectEmit(true, true, true, true);
        emit MetadataUpdate(_tokenId, key, value, triggeredBy);
    }

    function expectMetadataUpdate(uint256 _tokenId, string memory key, uint24 value, address triggeredBy) public {
        vm.expectEmit(true, true, true, true);
        emit MetadataUpdate(_tokenId, key, value, triggeredBy);
    }
}

contract Test_FleekERC721_TokenURI is Test_FleekERC721_Base, Test_FleekERC721_TokenURIAssertions {
    uint256 internal tokenId;

    function setUp() public {
        baseSetUp();
        tokenId = mintDefault(deployer);
    }

    function test_tokenURI() public {
        string memory uri = CuT.tokenURI(tokenId);
        assertEq(
            uri,
            "data:application/json;base64,"
        );
    }

    function test_tokenURIAfterUpdate() public {
        CuT.setTokenName(tokenId, "New App Name");
        CuT.setTokenDescription(tokenId, "New description for the app.");
        CuT.setTokenExternalURL(tokenId, "https://new-url.com");
        transferENS("new-ens.eth", deployer);
        CuT.setTokenENS(tokenId, "new-ens.eth");
        CuT.setTokenBuild(
            tokenId,
            "ce1a3fc141e29f8e1d00a654e156c4982d7711bf",
            "https://github.com/other/repo",
            "ipfsHash",
            "domain"
        );
        CuT.setTokenLogoAndColor(tokenId, TestConstants.LOGO_1, 0x654321);
        CuT.setTokenVerified(tokenId, true);

        string memory uri = CuT.tokenURI(tokenId);
        assertEq(
            uri,
            "data:application/json;base64,eyJuYW1lIjoiTmV3IEFwcCBOYW1lIiwiZGVzY3JpcHRpb24iOiJOZXcgZGVzY3JpcHRpb24gZm9yIHRoZSBhcHAuIiwib3duZXIiOiIweDkwMTkzYzk2MWE5MjYyNjFiNzU2ZDFlNWJiMjU1ZTY3ZmY5NDk4YTEiLCJleHRlcm5hbF91cmwiOiJkb21haW4iLCJpbWFnZSI6ImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QjNhV1IwYUQwaU1UQTJOU0lnYUdWcFoyaDBQU0l4TURZMUlpQjJhV1YzUW05NFBTSXdJREFnTVRBMk5TQXhNRFkxSWlCbWFXeHNQU0p1YjI1bElpQjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIaHRiRzV6T25oc2FXNXJQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUwzaHNhVzVySWo0OGMzUjViR1VnZEhsd1pUMGlkR1Y0ZEM5amMzTWlQa0JwYlhCdmNuUWdkWEpzS0NKb2RIUndjem92TDJadmJuUnpMbWR2YjJkc1pXRndhWE11WTI5dEwyTnpjekkvWm1GdGFXeDVQVWx1ZEdWeU9uZG5hSFJBTlRBd096WXdNQ0lwT3p3dmMzUjViR1UrUEhKbFkzUWdkMmxrZEdnOUlqRXdOalVpSUdobGFXZG9kRDBpTVRBMk5TSWdabWxzYkQwaWRYSnNLQ05pWVdOclozSnZkVzVrS1NJZ0x6NDhjbVZqZENCdmNHRmphWFI1UFNJd0xqSWlJSGRwWkhSb1BTSXhNRFkxSWlCb1pXbG5hSFE5SWpFd05qVWlJR1pwYkd3OUluVnliQ2dqWW1GamEyZHliM1Z1WkMxeVlXUnBZV3dwSWlBdlBqeG5JR1pwYkhSbGNqMGlkWEpzS0NOa2FYTnJaWFIwWlMxemFHRmtiM2NwSWo0OGNHRjBhQ0JrUFNKTk9EVTNMakl6TVNBeU56a3VOekV5VERrd01pNHlOQ0F5T0RZdU5qYzFRemt4TUM0MU5EY2dNamczTGprMklEa3hOeTQ1TVRVZ01qa3lMamN5TVNBNU1qSXVOU0F5T1RrdU56WTRURGt6T0M0NE9UUWdNekkwTGprMk5FTTVOREl1TWpRNUlETXpNQzR4TWlBNU5ETXVNekV4SURNek5pNDBNemNnT1RReExqZ3lOeUF6TkRJdU5EQTJURGt6Tnk0M09UZ2dNelU0TGpZeE5VdzVNalF1TURRNUlETTFOaTQyTlV3NU1Ua3VOREUySURNM05DNHdPRFJNT1RNMExqQTJPQ0F6TnpZdU1qUk1Oemt4TGprME55QTVNakl1TVRVeVF6YzRPQzR4TURrZ09UTTJMamc1TmlBM056TXVOamswSURrME5pNHpNRGdnTnpVNExqWTFNU0E1TkRNdU9Ea3pUREUzT1M0Mk16WWdPRFV3TGpreU9FTXhOakl1TXpFNElEZzBPQzR4TkRjZ01UVXhMakl4TlNBNE16QXVPVGczSURFMU5TNDNOellnT0RFMExqQTFNVXd4TmpBdU5EYzRJRGM1Tmk0MU9VdzNNRFF1TXpFMUlEZzNPUzQxTnpSTU9EVTNMakl6TVNBeU56a3VOekV5V2lJZ1ptbHNiRDBpSXpBMU1EVXdOU0lnTHo0OEwyYytQSEJoZEdnZ1pEMGlUVGcwTUM0eU16RWdNalF3TGpjeE1rdzRPRFV1TWpRZ01qUTNMalkzTlVNNE9UTXVOVFEzSURJME9DNDVOakVnT1RBd0xqa3hOU0F5TlRNdU56SXlJRGt3TlM0MUlESTJNQzQzTmpoTU9USXhMamc1TkNBeU9EVXVPVFkxUXpreU5TNHlORGtnTWpreExqRXlJRGt5Tmk0ek1URWdNamszTGpRek55QTVNalF1T0RJM0lETXdNeTQwTURaTU9USXdMamM1T0NBek1Ua3VOakUyVERrd055NHdORGtnTXpFM0xqWTFURGt3TWk0ME1UWWdNek0xTGpBNE5FdzVNVGN1TURZNElETXpOeTR5TkRGTU56YzBMamswTnlBNE9ETXVNVFV5UXpjM01TNHhNRGtnT0RrM0xqZzVOaUEzTlRZdU5qazBJRGt3Tnk0ek1EZ2dOelF4TGpZMU1TQTVNRFF1T0RrelRERTJNaTQyTXpZZ09ERXhMamt5T0VNeE5EVXVNekU0SURnd09TNHhORGNnTVRNMExqSXhOU0EzT1RFdU9UZzNJREV6T0M0M056WWdOemMxTGpBMU1Vd3hORE11TkRjNElEYzFOeTQxT1V3Mk9EY3VNekUxSURnME1DNDFOelJNT0RRd0xqSXpNU0F5TkRBdU56RXlXaUlnWm1sc2JEMGlkWEpzS0NOdFlXbHVLU0lnTHo0OGNHRjBhQ0JtYVd4c0xYSjFiR1U5SW1WMlpXNXZaR1FpSUdOc2FYQXRjblZzWlQwaVpYWmxibTlrWkNJZ1pEMGlUVE14T1M0NE5EY2dNVFl4TGpVd01rTXpNVEF1TXpVMklERTJNQzR3TURjZ016QXdMalkzTkNBeE5qWXVNekkySURJNU9DNHlNakVnTVRjMUxqWXhOa3d4TXpndU56STBJRGMzT1M0M05UaERNVE0yTGpJM01TQTNPRGt1TURRNElERTBNUzQ1TnpjZ056azNMamM1SURFMU1TNDBOamdnTnprNUxqSTROVXczTkRBdU1EWXhJRGc1TVM0NU56TkROelE1TGpVMU15QTRPVE11TkRZM0lEYzFPUzR5TXpVZ09EZzNMakUwT0NBM05qRXVOamczSURnM055NDROVGhNT1RBeUxqUXdOU0F6TkRRdU9EVTBURGc0T1M0eE5UZ2dNelF5TGpjMk9FdzRPVGd1T0RjeUlETXdOUzQ1TnpKTU9URXlMakV4T1NBek1EZ3VNRFU1VERreE15NDNNek1nTXpBeExqazBOa001TVRRdU9ETTNJREk1Tnk0M05qSWdPVEUwTGpNd09TQXlPVE11TkRjMklEa3hNaTR5TlRFZ01qZzVMamt5TjB3NE9UTXVORGcwSURJMU55NDFOamxET0RreExqRTFNeUF5TlRNdU5UUTVJRGc0Tnk0d05qTWdNalV3TGpneU15QTRPREl1TWpJeElESTFNQzR3TmpGTU9ESTRMakl3TlNBeU5ERXVOVFUwUXpneU1pNHlNalFnTWpRd0xqWXhNeUE0TVRVdU9EWTVJREkwTWk0M09ETWdPREV4TGpReU55QXlORGN1TWpnMFREZ3dOUzQyT0RZZ01qVXpMakV3TTBNNE1EUXVNakExSURJMU5DNDJNRE1nT0RBeUxqQTROeUF5TlRVdU16STJJRGd3TUM0d09UTWdNalUxTGpBeE0wdzNPRE11TmpFeElESTFNaTQwTVRkTU56TTBMak1nTkRNNUxqRTVOa00zTXpFdU5ETTVJRFExTUM0d016VWdOekl3TGpFME15QTBOVGN1TkRBM0lEY3dPUzR3TnlBME5UVXVOall6VERNeU9DNDRORGNnTXprMUxqYzRPRU16TVRjdU56YzBJRE01TkM0d05EVWdNekV4TGpFeE55QXpPRE11T0RRMUlETXhNeTQ1TnpnZ016Y3pMakF3TjB3ek5qWXVOVEk0SURFM015NDVOakpNTXpZMkxqVXpNeUF4TnpNdU9UUXhRek0yTnk0eU16UWdNVGN4TGpJMElETTJOUzQxTnpJZ01UWTRMamN3TWlBek5qSXVPREVnTVRZNExqSTJOMHd6TVRrdU9EUTNJREUyTVM0MU1ESmFUVE0yT1M0ek9USWdNVGMwTGpReE5Fd3pOamd1TmpVeUlERTNOeTR5TVRkTU16RTJMamcwTXlBek56TXVORFU0UXpNeE5DNHpPU0F6T0RJdU56UTRJRE15TUM0d09UWWdNemt4TGpRNUlETXlPUzQxT0RjZ016a3lMams0TlV3M01Ea3VPREVnTkRVeUxqZzJRemN4T1M0ek1ERWdORFUwTGpNMU5DQTNNamd1T1RneklEUTBPQzR3TXpVZ056TXhMalF6TmlBME16Z3VOelExVERjNE1DNDNORGNnTWpVeExqazJOa3czT0RNdU1qUTFJREkwTWk0MU1EUk1Oemd6TGprNE5TQXlNemt1TnpBeFRETTJPUzR6T1RJZ01UYzBMalF4TkZvaUlHWnBiR3c5SWlNeE16RXpNVFlpSUM4K1BIQmhkR2dnWm1sc2JDMXlkV3hsUFNKbGRtVnViMlJrSWlCamJHbHdMWEoxYkdVOUltVjJaVzV2WkdRaUlITjBjbTlyWlQwaWRYSnNLQ050WVdsdUtTSWdjM1J5YjJ0bExYZHBaSFJvUFNJMElpQnpkSEp2YTJVdGJHbHVaV05oY0QwaWNtOTFibVFpSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlJR1E5SWswek1Ua3VPRFEzSURFMk1TNDFNREpETXpFd0xqTTFOaUF4TmpBdU1EQTNJRE13TUM0Mk56UWdNVFkyTGpNeU5pQXlPVGd1TWpJeElERTNOUzQyTVRaTU1UTTRMamN5TkNBM056a3VOelU0UXpFek5pNHlOekVnTnpnNUxqQTBPQ0F4TkRFdU9UYzNJRGM1Tnk0M09TQXhOVEV1TkRZNElEYzVPUzR5T0RWTU56UXdMakEyTVNBNE9URXVPVGN6UXpjME9TNDFOVE1nT0RrekxqUTJOeUEzTlRrdU1qTTFJRGc0Tnk0eE5EZ2dOell4TGpZNE55QTROemN1T0RVNFREa3dNaTQwTURVZ016UTBMamcxTkV3NE9Ea3VNVFU0SURNME1pNDNOamhNT0RrNExqZzNNaUF6TURVdU9UY3lURGt4TWk0eE1Ua2dNekE0TGpBMU9VdzVNVE11TnpNeklETXdNUzQ1TkRaRE9URTBMamd6TnlBeU9UY3VOell5SURreE5DNHpNRGtnTWprekxqUTNOaUE1TVRJdU1qVXhJREk0T1M0NU1qZE1PRGt6TGpRNE5DQXlOVGN1TlRZNVF6ZzVNUzR4TlRNZ01qVXpMalUwT1NBNE9EY3VNRFl6SURJMU1DNDRNak1nT0RneUxqSXlNU0F5TlRBdU1EWXhURGd5T0M0eU1EVWdNalF4TGpVMU5FTTRNakl1TWpJMElESTBNQzQyTVRNZ09ERTFMamcyT1NBeU5ESXVOemd6SURneE1TNDBNamNnTWpRM0xqSTRORXc0TURVdU5qZzJJREkxTXk0eE1ETkRPREEwTGpJd05TQXlOVFF1TmpBeklEZ3dNaTR3T0RjZ01qVTFMak15TmlBNE1EQXVNRGt6SURJMU5TNHdNVE5NTnpnekxqWXhNU0F5TlRJdU5ERTNURGN6TkM0eklEUXpPUzR4T1RaRE56TXhMalF6T1NBME5UQXVNRE0xSURjeU1DNHhORE1nTkRVM0xqUXdOeUEzTURrdU1EY2dORFUxTGpZMk0wd3pNamd1T0RRM0lETTVOUzQzT0RoRE16RTNMamMzTkNBek9UUXVNRFExSURNeE1TNHhNVGNnTXpnekxqZzBOU0F6TVRNdU9UYzRJRE0zTXk0d01EZE1NelkyTGpVeU9DQXhOek11T1RZeVRETTJOaTQxTXpNZ01UY3pMamswTVVNek5qY3VNak0wSURFM01TNHlOQ0F6TmpVdU5UY3lJREUyT0M0M01ESWdNell5TGpneElERTJPQzR5TmpkTU16RTVMamcwTnlBeE5qRXVOVEF5V2swek5qa3VNemt5SURFM05DNDBNVFJNTXpZNExqWTFNaUF4TnpjdU1qRTNURE14Tmk0NE5ETWdNemN6TGpRMU9FTXpNVFF1TXprZ016Z3lMamMwT0NBek1qQXVNRGsySURNNU1TNDBPU0F6TWprdU5UZzNJRE01TWk0NU9EVk1OekE1TGpneElEUTFNaTQ0TmtNM01Ua3VNekF4SURRMU5DNHpOVFFnTnpJNExqazRNeUEwTkRndU1ETTFJRGN6TVM0ME16WWdORE00TGpjME5VdzNPREF1TnpRM0lESTFNUzQ1TmpaTU56Z3pMakkwTlNBeU5ESXVOVEEwVERjNE15NDVPRFVnTWpNNUxqY3dNVXd6TmprdU16a3lJREUzTkM0ME1UUmFJaUJtYVd4c1BTSjFjbXdvSTJScGMydGxkSFJsTFdkeVlXUnBaVzUwS1NJZ1ptbHNiQzF2Y0dGamFYUjVQU0l3TGpJaUlDOCtQSEJoZEdnZ1pEMGlUVE16TlM0ek9DQXlNRGd1TVRFelF6TXpOUzQ1TWpJZ01qQTRMakU1T0NBek16WXVOREUzSURJd055NDJPRFlnTXpNMkxqSTRNeUF5TURjdU1UYzVURE16TUM0ek9TQXhPRFF1TnprMVF6TXpNQzR5TkRrZ01UZzBMakkyTVNBek1qa3VOVEk1SURFNE5DNHhORGdnTXpJNUxqRXlPU0F4T0RRdU5UazNURE14TWk0ek5UZ2dNakF6TGpReE1VTXpNVEV1T1RjNElESXdNeTQ0TXpnZ016RXlMakUzTkNBeU1EUXVORFU0SURNeE1pNDNNVFlnTWpBMExqVTBORXd6TVRjdU9UWXlJREl3TlM0ek4wTXpNVGd1TXpVM0lESXdOUzQwTXpJZ016RTRMalU1TlNBeU1EVXVOemsySURNeE9DNDBPVE1nTWpBMkxqRTRNMHd6TVRRdU55QXlNakF1TlRVeFF6TXhOQzQxT1RjZ01qSXdMamt6T0NBek1UUXVPRE0xSURJeU1TNHpNRElnTXpFMUxqSXpNU0F5TWpFdU16WTBURE15TkM0MU16a2dNakl5TGpnelF6TXlOQzQ1TXpVZ01qSXlMamc1TXlBek1qVXVNek00SURJeU1pNDJNamtnTXpJMUxqUTBJREl5TWk0eU5ESk1Nekk1TGpJek15QXlNRGN1T0RjMVF6TXlPUzR6TXpZZ01qQTNMalE0T0NBek1qa3VOek01SURJd055NHlNalFnTXpNd0xqRXpOU0F5TURjdU1qZzJURE16TlM0ek9DQXlNRGd1TVRFeldpSWdabWxzYkQwaWRYSnNLQ050WVdsdUtTSWdMejQ4Y0dGMGFDQmtQU0pOTXpFNUxqSTRNaUF5TmprdU1EZzNRek14T1M0NE1qUWdNalk1TGpFM015QXpNakF1TXpFNUlESTJPQzQyTmpFZ016SXdMakU0TmlBeU5qZ3VNVFUwVERNeE5DNHlPVElnTWpRMUxqYzNRek14TkM0eE5URWdNalExTGpJek5pQXpNVE11TkRNeElESTBOUzR4TWpNZ016RXpMakF6TVNBeU5EVXVOVGN5VERJNU5pNHlOakVnTWpZMExqTTROa015T1RVdU9EZ2dNalkwTGpneE1pQXlPVFl1TURjMklESTJOUzQwTXpNZ01qazJMall4T0NBeU5qVXVOVEU0VERNd01TNDROalFnTWpZMkxqTTBORU16TURJdU1qVTVJREkyTmk0ME1EY2dNekF5TGpRNU55QXlOall1TnpjeElETXdNaTR6T1RVZ01qWTNMakUxT0V3eU9UZ3VOakF5SURJNE1TNDFNalpETWprNExqVWdNamd4TGpreE15QXlPVGd1TnpNM0lESTRNaTR5TnpjZ01qazVMakV6TXlBeU9ESXVNek01VERNd09DNDBOREVnTWpnekxqZ3dOVU16TURndU9ETTNJREk0TXk0NE5qY2dNekE1TGpJMElESTRNeTQyTURRZ016QTVMak0wTXlBeU9ETXVNakUzVERNeE15NHhNellnTWpZNExqZzBPVU16TVRNdU1qTTRJREkyT0M0ME5qSWdNekV6TGpZME1TQXlOamd1TVRrNUlETXhOQzR3TXpjZ01qWTRMakkyTVV3ek1Ua3VNamd5SURJMk9TNHdPRGRhSWlCbWFXeHNQU0ppYkdGamF5SWdabWxzYkMxdmNHRmphWFI1UFNJd0xqVWlJQzgrUEhCaGRHZ2daRDBpVFRNd015NHhPRFFnTXpNd0xqQTJNa016TURNdU56STJJRE16TUM0eE5EZ2dNekEwTGpJeU1TQXpNamt1TmpNMklETXdOQzR3T0RnZ016STVMakV5T0V3eU9UZ3VNVGswSURNd05pNDNORFZETWprNExqQTFNeUF6TURZdU1qRXhJREk1Tnk0ek16TWdNekEyTGpBNU9DQXlPVFl1T1RNeklETXdOaTQxTkRkTU1qZ3dMakUyTXlBek1qVXVNell4UXpJM09TNDNPRElnTXpJMUxqYzROeUF5TnprdU9UYzVJRE15Tmk0ME1EZ2dNamd3TGpVeUlETXlOaTQwT1ROTU1qZzFMamMyTmlBek1qY3VNekU1UXpJNE5pNHhOakVnTXpJM0xqTTRNaUF5T0RZdU16azVJRE15Tnk0M05EWWdNamcyTGpJNU55QXpNamd1TVRNelRESTRNaTQxTURRZ016UXlMalV3TVVNeU9ESXVOREF5SURNME1pNDRPRGdnTWpneUxqWXpPU0F6TkRNdU1qVXlJREk0TXk0d016VWdNelF6TGpNeE5Fd3lPVEl1TXpRMElETTBOQzQzT0VNeU9USXVOek01SURNME5DNDRORElnTWprekxqRTBNaUF6TkRRdU5UYzVJREk1TXk0eU5EVWdNelEwTGpFNU1rd3lPVGN1TURNNElETXlPUzQ0TWpSRE1qazNMakUwSURNeU9TNDBNemNnTWprM0xqVTBNeUF6TWprdU1UYzBJREk1Tnk0NU16a2dNekk1TGpJek5rd3pNRE11TVRnMElETXpNQzR3TmpKYUlpQm1hV3hzUFNKaWJHRmpheUlnWm1sc2JDMXZjR0ZqYVhSNVBTSXdMalVpSUM4K1BIQmhkR2dnYzNSeWIydGxQU0oxY213b0kyMWhhVzRwSWlCemRISnZhMlV0ZDJsa2RHZzlJallpSUhOMGNtOXJaUzFzYVc1bFkyRndQU0p5YjNWdVpDSWdjM1J5YjJ0bExXeHBibVZxYjJsdVBTSnliM1Z1WkNJZ1pEMGlUVEk1TUM0eE1Ea2dORFl6TGpReE9FTXlPVEl1TXpVNElEUTFOQzQ1TURJZ016QXhMakl6TXlBME5Ea3VNVEVnTXpBNUxqa3pNeUEwTlRBdU5EaE1OemN4TGpBM0lEVXlNeTR3T1RaRE56YzVMamMzSURVeU5DNDBOamNnTnpnMUlEVXpNaTQwT0NBM09ESXVOelV5SURVME1DNDVPVFpNTmpreUxqQTROaUE0T0RRdU5ERTRUREU1T1M0ME5ETWdPREEyTGpnMFRESTVNQzR4TURrZ05EWXpMalF4T0ZvaUlHWnBiR3c5SW1Kc1lXTnJJaUJtYVd4c0xXOXdZV05wZEhrOUlqQXVNVFFpSUM4K1BIQmhkR2dnWm1sc2JDMXlkV3hsUFNKbGRtVnViMlJrSWlCamJHbHdMWEoxYkdVOUltVjJaVzV2WkdRaUlITjBjbTlyWlQwaWRYSnNLQ050WVdsdUtTSWdjM1J5YjJ0bExYZHBaSFJvUFNJMklpQnpkSEp2YTJVdGJHbHVaV05oY0QwaWNtOTFibVFpSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlJR1E5SWswM09EY3VOVGc1SURJek55NHpORGxNTkRZd0xqTTFOQ0F4T0RVdU9ERTRURFF3Tmk0ek1qVWdNemt3TGpRMk9VTTBNRE11T0RjeUlETTVPUzQzTlRrZ05EQTVMalUzT0NBME1EZ3VOVEF4SURReE9TNHdOamtnTkRBNUxqazVOa3czTVRFdU9UTTBJRFExTmk0eE1UUkROekl4TGpReU5TQTBOVGN1TmpBNUlEY3pNUzR4TURjZ05EVXhMakk1SURjek15NDFOaUEwTkRKTU56ZzNMalU0T1NBeU16Y3VNelE1V2swMk5qQXVNalk1SURJME5TNHdNVU0yTlRVdU5USXpJREkwTkM0eU5qTWdOalV3TGpZNE1pQXlORGN1TkRJeklEWTBPUzQwTlRZZ01qVXlMakEyT0V3Mk1EY3VNemcySURReE1TNDBNVGhETmpBMkxqRTJJRFF4Tmk0d05qTWdOakE1TGpBeE15QTBNakF1TkRNMElEWXhNeTQzTlRrZ05ESXhMakU0TVV3Mk9ESXVORGs1SURRek1pNHdNRFpETmpnM0xqSTBOU0EwTXpJdU56VXpJRFk1TWk0d09EWWdOREk1TGpVNU5DQTJPVE11TXpFeUlEUXlOQzQ1TkRsTU56TTFMak00TWlBeU5qVXVOVGs1UXpjek5pNDJNRGdnTWpZd0xqazFOQ0EzTXpNdU56VTFJREkxTmk0MU9ETWdOekk1TGpBeElESTFOUzQ0TXpWTU5qWXdMakkyT1NBeU5EVXVNREZhSWlCbWFXeHNQU0oxY213b0kyMWhhVzRwSWlBdlBqeHdZWFJvSUdacGJHd3RjblZzWlQwaVpYWmxibTlrWkNJZ1kyeHBjQzF5ZFd4bFBTSmxkbVZ1YjJSa0lpQmtQU0pOT0RZMExqWTBNeUF5T0RNdU9UTTNRemcyTlM0eE9EWWdNamd6TGpZd05TQTROalV1TnpBNElESTROQzR5TlRjZ09EWTFMakl6T1NBeU9EUXVOamd6VERnME5DNHlOamdnTXpBekxqY3hPVU00TkRNdU9UTTRJRE13TkM0d01UZ2dPRFEwTGpBNU15QXpNRFF1TlRFM0lEZzBOQzQxTWpZZ016QTBMalUwT0V3NE5UTXVOekkySURNd05TNHlNRGRET0RVMExqRTROQ0F6TURVdU1qUWdPRFUwTGpNeU1TQXpNRFV1TnpnM0lEZzFNeTQ1TkRJZ016QTJMakEzTVV3NE16TXVPRGcwSURNeU1TNHhNVEpET0RNekxqVXdOaUF6TWpFdU16azJJRGd6TXk0Mk5ETWdNekl4TGprME15QTRNelF1TVRBeElETXlNUzQ1TnpaTU9EUTBMakF3TnlBek1qSXVOamcxUXpnME5DNDBPVEVnTXpJeUxqY3lJRGcwTkM0Mk1EVWdNekl6TGpNeE9TQTRORFF1TVRjM0lETXlNeTQxT0V3M09UY3VOelV5SURNMU1TNDVOVFJETnprM0xqSXdPU0F6TlRJdU1qZzJJRGM1Tmk0Mk9EY2dNelV4TGpZek5DQTNPVGN1TVRVMklETTFNUzR5TURsTU9ERTRMalF3TXlBek16RXVPVEl5UXpneE9DNDNNek1nTXpNeExqWXlNaUE0TVRndU5UYzNJRE16TVM0eE1qTWdPREU0TGpFME5TQXpNekV1TURreVREZ3dPQzQzTkRnZ016TXdMalF5UXpnd09DNHlPVElnTXpNd0xqTTROeUE0TURndU1UVTBJRE15T1M0NE5ETWdPREE0TGpVeU9TQXpNamt1TlRVNFREZ3lPQzR3TlRRZ016RTBMamMwTkVNNE1qZ3VORE1nTXpFMExqUTFPU0E0TWpndU1qa3hJRE14TXk0NU1UVWdPREkzTGpnek5TQXpNVE11T0RneVREZ3hPQzR6T0RrZ016RXpMakl3TmtNNE1UY3VPVEEwSURNeE15NHhOekVnT0RFM0xqYzVJRE14TWk0MU56SWdPREU0TGpJeE9DQXpNVEl1TXpFeFREZzJOQzQyTkRNZ01qZ3pMamt6TjFvaUlHWnBiR3c5SW5kb2FYUmxJaUF2UGp4bklIUnlZVzV6Wm05eWJUMGliV0YwY21sNEtEQXVPVGczT0RJM0lEQXVNVFUxTlRVM0lDMHdMakkxTlRJMk1TQXdMamsyTmpnM01pQXlOVEFnTnpNMUtTSStQSFJsZUhRZ1ptOXVkQzFtWVcxcGJIazlJa2x1ZEdWeUxDQnpZVzV6TFhObGNtbG1JaUJtYjI1MExYZGxhV2RvZEQwaVltOXNaQ0lnWm05dWRDMXphWHBsUFNJME1pSWdabWxzYkQwaUkwVTFSVGRHT0NJK1RtVjNJRUZ3Y0NCT1lXMWxQQzkwWlhoMFBqeDBaWGgwSUdadmJuUXRabUZ0YVd4NVBTSkpiblJsY2l3Z2MyRnVjeTF6WlhKcFppSWdabTl1ZEMxM1pXbG5hSFE5SW01dmNtMWhiQ0lnZVQwaU5EQWlJR1p2Ym5RdGMybDZaVDBpTWpJaUlHWnBiR3c5SWlNM1JqZ3hPVElpUG01bGR5MWxibk11WlhSb1BDOTBaWGgwUGp3dlp6NDhhVzFoWjJVZ2QybGtkR2c5SWpFMk55SWdhR1ZwWjJoMFBTSXhOamNpSUhSeVlXNXpabTl5YlQwaWJXRjBjbWw0S0RBdU9UZzNPREkzSURBdU1UVTFOVFUzSUMwd0xqSTFOVEkyTVNBd0xqazJOamczTWlBME5EUXVNVEUzSURVeU5DNHhOeWtpSUdoeVpXWTlJbVJoZEdFNmFXMWhaMlV2YzNabkszaHRiRHRpWVhObE5qUXNVRWhPTWxwNVFqSmFXRXA2WVZjNWRWQlRTWGhNYWtWcFNVaG9kR0pITlhwUVUwcHZaRWhTZDA5cE9IWmtNMlF6VEc1amVreHRPWGxhZVRoNVRVUkJkMHd6VGpKYWVVbG5aVWN4YzJKdVRUWmxSM2h3WW0xek9VbHRhREJrU0VFMlRIazVNMlF6WTNWa2VrMTFZak5LYmt4NlJUVlBWR3QyWlVkNGNHSnRjMmxKU0djNVNXcENkMlZEU1dkbFZEQnBUVWhDTkVscFFqSmhWMVl6VVcwNU5GQlRTWGRKUkVGblRWUkJkMDFEUVhoTlJFRjNTV2xDYkdKdFJtbGlSMVYwV1cxR2FtRXlaSGxpTTFaMVdrUXdhV0p0VmpOSlJFRm5UVU5CZUUxRVFYZEpSRVYzVFVSQmFVbElhSFJpUkhCNlkwZEdhbHBVTUdsalNFcHNZekpXZVdSdFZXbFFaMjg0V25vME9HTkhSakJoUTBKclVGTktUazVVUVhkTVJFVjNVWHBKZVU5VE5EQk1SRVYzVEVSRmQweEVTWGxQVXpRd1RFUkZkMHhFVlhkTlIwMTNURVJKTTAxRE5ESk1SRWw0VDFNME1FeEVVVFZOUTNjd1QxUkJjMDVFYTNkWmVra3pUVU0wTWt4RVFYTk9SR3QzVEZSSmVFOVROREJNUkZFMVRVTXdNRTlVUWtSUFZHdDNURVJKZVU5VE5EQk1SR016VFVNME1reEVSWGRNUkZWM1RVTjNlRTFJYjJkVVZHZDRUbE4zTkUxVVZtcE1WRkYzVEdwcmMwNUVRWFZQVXpBMFQwTTBNa3hFWTNwTWFrVjBUVlJSZUV4cVdYTlBWRlYxVGxkTmRFNVVVWFZQVTNkNVRYazBlVXhVUlhoTmVUUjVURVJOTVV4VVJUTk5lVFF3VEVSTk1WbDVNREpOUXpSNVRFUkJkRTFVUlRSTWFsVjBUVlJGZFU5RE1IaE9lazExVGtNd2VrNVZUWGxPZWsxMVRtbDNORTlFWjNOTmFra3hUR3ByYzA5RVZURk1hbXR6VFZSbk1VeEVaM2hPV0UxMFRucE5kRTlFWjNWT2FUQTFUbE0wTVV4VVJUQk5VelF5V1hrd2VVMTVOSGxNVkZVd1RHcHJkRTE2VlhSTlZFVjZUR3BKZEUxNlZYUk5WR042VEdwU2FrMURNREpOUXpSNVRFUkZlRXhxWjNSTlZFVTBUR3BWYzAxNlZYUk5WR042VEdwU2FrMXFTWFZPUXpBeFRYbDNNVTVETkRKTVZFVjNUVU0wTTB4RWF6Rk1hbFYwVFZSUmVFeHFXbnBQUkdkMVRta3dNMDE1ZDNoT1JFVjFUbWt3TlU1VE5ERlplbFV3VEdwcmRFMXFUWFZOYVhkNFRWUk5kVTFwTUhwT1UzZDRUbnBOZFU1RE1IcE9WMDB5VFVNMGVVeEVRWE5OVkVVMFRHcFZjMDFVUlhWUFEzZDRUbnBOZFU1RGQzcE9WMDB4VFhsM2VVMXBOREJNUkVWM1RVTTBNMHhFVlRCTWFsbHpUVlJSZUV4cVdYTlBWRlYxVGxkTk1FMURORFZNUkZGM1RHcHJjMDU2VFhOUFJHZDFUbWwzTlU1VE5ERk1SRVV3VFZNME1sbDZTWHBNYWtselRsUlJkVTlUZDNwT1UzZDRUVlJOZFUxcGQzcE9VM2Q0VG5wTmRVNUhUWGRNUkZsM1RHcEpkRTFVUlhWUFEzZDRUVlJuZFU1VE1IcE9VM2Q0VG5wTmRVNUZUVFJQUkdkelRucEpNa3hxVVhOUFJGVXhUR3ByYzA1Nll6Qk1ha1Z6VDBSRk1VeEVaM2hPV0c5cFRIbzBPRXd5WXl0RGFuZDJZek5hYmxCblBUMGlJQzgrUEdSbFpuTStQR1pwYkhSbGNpQnBaRDBpWkdsemEyVjBkR1V0YzJoaFpHOTNJaUI0UFNJM01DNDNORGc1SWlCNVBTSXhPVFV1TnpFeUlpQjNhV1IwYUQwaU9UVTFMamN6TXlJZ2FHVnBaMmgwUFNJNE16SXVOVFU0SWlCbWFXeDBaWEpWYm1sMGN6MGlkWE5sY2xOd1lXTmxUMjVWYzJVaUlHTnZiRzl5TFdsdWRHVnljRzlzWVhScGIyNHRabWxzZEdWeWN6MGljMUpIUWlJK1BHWmxSbXh2YjJRZ1pteHZiMlF0YjNCaFkybDBlVDBpTUNJZ0x6NDhabVZDYkdWdVpDQnBiajBpVTI5MWNtTmxSM0poY0docFl5SWdMejQ4Wm1WSFlYVnpjMmxoYmtKc2RYSWdjM1JrUkdWMmFXRjBhVzl1UFNJME1pSWdMejQ4TDJacGJIUmxjajQ4YkdsdVpXRnlSM0poWkdsbGJuUWdhV1E5SW1KaFkydG5jbTkxYm1RaUlIZ3hQU0kxTXpJdU5TSWdlVEU5SWpBaUlIZ3lQU0kxTXpJdU5TSWdlVEk5SWpFd05qVWlJR2R5WVdScFpXNTBWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWo0OGMzUnZjQ0F2UGp4emRHOXdJRzltWm5ObGREMGlNU0lnYzNSdmNDMWpiMnh2Y2owaUl6RXpNVE14TXlJZ0x6NDhMMnhwYm1WaGNrZHlZV1JwWlc1MFBqeHlZV1JwWVd4SGNtRmthV1Z1ZENCcFpEMGlZbUZqYTJkeWIzVnVaQzF5WVdScFlXd2lJR040UFNJd0lpQmplVDBpTUNJZ2NqMGlNU0lnWjNKaFpHbGxiblJWYm1sMGN6MGlkWE5sY2xOd1lXTmxUMjVWYzJVaUlHZHlZV1JwWlc1MFZISmhibk5tYjNKdFBTSjBjbUZ1YzJ4aGRHVW9OVE15TGpVZ05UTXlMalVwSUhKdmRHRjBaU2c0T1M0NU5qRXBJSE5qWVd4bEtEY3pOU2tpUGp4emRHOXdJSE4wYjNBdFkyOXNiM0k5SWlNMk5UUXpNakVpSUM4K1BITjBiM0FnYjJabWMyVjBQU0l4SWlCemRHOXdMV052Ykc5eVBTSWpOalUwTXpJeElpQnpkRzl3TFc5d1lXTnBkSGs5SWpBaUlDOCtQQzl5WVdScFlXeEhjbUZrYVdWdWRENDhiR2x1WldGeVIzSmhaR2xsYm5RZ2FXUTlJbVJwYzJ0bGRIUmxMV2R5WVdScFpXNTBJaUI0TVQwaU9USTFMall5TmlJZ2VURTlJakkxTmk0NE9UWWlJSGd5UFNJeE16WXVOemM1SWlCNU1qMGlPREF3TGpJd015SWdaM0poWkdsbGJuUlZibWwwY3owaWRYTmxjbE53WVdObFQyNVZjMlVpUGp4emRHOXdJSE4wYjNBdFkyOXNiM0k5SWlNMk5UUXpNakVpSUM4K1BITjBiM0FnYjJabWMyVjBQU0l4SWlCemRHOXdMV052Ykc5eVBTSWpNa016TVROR0lpQXZQand2YkdsdVpXRnlSM0poWkdsbGJuUStQR3hwYm1WaGNrZHlZV1JwWlc1MElHbGtQU0p0WVdsdUlqNDhjM1J2Y0NCemRHOXdMV052Ykc5eVBTSWpOalUwTXpJeElpQXZQand2YkdsdVpXRnlSM0poWkdsbGJuUStQQzlrWldaelBqd3ZjM1puUGc9PSIsInZlcmlmaWVkIjp0cnVlLCJhdHRyaWJ1dGVzIjogW3sidHJhaXRfdHlwZSI6ICJFTlMiLCAidmFsdWUiOiJuZXctZW5zLmV0aCJ9LHsidHJhaXRfdHlwZSI6ICJDb21taXQgSGFzaCIsICJ2YWx1ZSI6ImNlMWEzZmMxNDFlMjlmOGUxZDAwYTY1NGUxNTZjNDk4MmQ3NzExYmYifSx7InRyYWl0X3R5cGUiOiAiUmVwb3NpdG9yeSIsICJ2YWx1ZSI6Imh0dHBzOi8vZ2l0aHViLmNvbS9vdGhlci9yZXBvIn0seyJ0cmFpdF90eXBlIjogIklQRlMgSGFzaCIsICJ2YWx1ZSI6ImlwZnNIYXNoIn0seyJ0cmFpdF90eXBlIjogIlZlcnNpb24iLCAidmFsdWUiOiIxIn0seyJ0cmFpdF90eXBlIjogIkNvbG9yIiwgInZhbHVlIjoiIzY1NDMyMSJ9XX0="
        );
    }

    function testFuzz_tokenURIForDifferentAddresses(address account) public {
        vm.prank(account);
        CuT.tokenURI(tokenId);
    }

    function testFuzz_tokenURIForInexistentId(uint256 _tokenId) public {
        vm.assume(_tokenId != tokenId);
        expectRevertWithInvalidTokenId();
        CuT.tokenURI(_tokenId);
    }

    function test_shouldEmitEventForMetadataChanges() public {
        expectMetadataUpdate(tokenId, "name", "New App Name", deployer);
        CuT.setTokenName(tokenId, "New App Name");

        expectMetadataUpdate(tokenId, "description", "New description for the app.", deployer);
        CuT.setTokenDescription(tokenId, "New description for the app.");

        expectMetadataUpdate(tokenId, "externalURL", "https://new-url.com", deployer);
        CuT.setTokenExternalURL(tokenId, "https://new-url.com");

        transferENS("new-ens.eth", deployer);
        expectMetadataUpdate(tokenId, "ENS", "new-ens.eth", deployer);
        CuT.setTokenENS(tokenId, "new-ens.eth");

        expectMetadataUpdate(
            tokenId,
            "build",
            ["ce1a3fc141e29f8e1d00a654e156c4982d7711bf", "https://github.com/other/repo", "ipfshash", "domain"],
            deployer
        );
        CuT.setTokenBuild(
            tokenId,
            "ce1a3fc141e29f8e1d00a654e156c4982d7711bf",
            "https://github.com/other/repo",
            "ipfshash",
            "domain"
        );

        expectMetadataUpdate(tokenId, "logo", TestConstants.LOGO_1, deployer);
        CuT.setTokenLogo(tokenId, TestConstants.LOGO_1);

        expectMetadataUpdate(tokenId, "color", 0x654321, deployer);
        CuT.setTokenColor(tokenId, 0x654321);
    }
}
